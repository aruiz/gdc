{
    "constructors": [],
    "doc": "<p>A <span data-xref=\"Gtk.TreeModelFilter\"/> is a tree model which wraps another tree model,\nand can do the following things:</p><ul>\n<li>Filter specific rows, based on data from a \u201cvisible column\u201d, a column\n  storing booleans indicating whether the row should be filtered or not,\n  or based on the return value of a \u201cvisible function\u201d, which gets a\n  model, iter and user_data and returns a boolean indicating whether the\n  row should be filtered or not.</li>\n</ul><ul>\n<li>Modify the \u201cappearance\u201d of the model, using a modify function.\n  This is extremely powerful and allows for just changing some\n  values and also for creating a completely different model based\n  on the given child model.</li>\n</ul><ul>\n<li>Set a different root node, also known as a \u201cvirtual root\u201d. You can pass\n  in a <span data-xref=\"Gtk.TreePath\"/> indicating the root node for the filter at construction\n  time.</li>\n</ul><p>The basic API is similar to <span data-xref=\"Gtk.TreeModelSort\"/>. For an example on its usage,\nsee the section on <span data-xref=\"Gtk.TreeModelSort\"/>.</p><p>When using <span data-xref=\"Gtk.TreeModelFilter\"/>, it is important to realize that\n<span data-xref=\"Gtk.TreeModelFilter\"/> maintains an internal cache of all nodes which are\nvisible in its clients. The cache is likely to be a subtree of the tree\nexposed by the child model. <span data-xref=\"Gtk.TreeModelFilter\"/> will not cache the entire\nchild model when unnecessary to not compromise the caching mechanism\nthat is exposed by the reference counting scheme. If the child model\nimplements reference counting, unnecessary signals may not be emitted\nbecause of reference counting rule 3, see the <span data-xref=\"Gtk.TreeModel\"/>\ndocumentation. (Note that e.g. <span data-xref=\"Gtk.TreeStore\"/> does not implement\nreference counting and will always emit all signals, even when\nthe receiving node is not visible).</p><p>Because of this, limitations for possible visible functions do apply.\nIn general, visible functions should only use data or properties from\nthe node for which the visibility state must be determined, its siblings\nor its parents. Usually, having a dependency on the state of any child\nnode is not possible, unless references are taken on these explicitly.\nWhen no such reference exists, no signals may be received for these child\nnodes (see reference couting rule number 3 in the <span data-xref=\"Gtk.TreeModel\"/> section).</p><p>Determining the visibility state of a given node based on the state\nof its child nodes is a frequently occurring use case. Therefore,\n<span data-xref=\"Gtk.TreeModelFilter\"/> explicitly supports this. For example, when a node\ndoes not have any children, you might not want the node to be visible.\nAs soon as the first row is added to the node\u2019s child level (or the\nlast row removed), the node\u2019s visibility should be updated.</p><p>This introduces a dependency from the node on its child nodes. In order\nto accommodate this, <span data-xref=\"Gtk.TreeModelFilter\"/> must make sure the necessary\nsignals are received from the child model. This is achieved by building,\nfor all nodes which are exposed as visible nodes to <span data-xref=\"Gtk.TreeModelFilter\"/>'s\nclients, the child level (if any) and take a reference on the first node\nin this level. Furthermore, for every row-inserted, row-changed or\nrow-deleted signal (also these which were not handled because the node\nwas not cached), <span data-xref=\"Gtk.TreeModelFilter\"/> will check if the visibility state\nof any parent node has changed.</p><p>Beware, however, that this explicit support is limited to these two\ncases. For example, if you want a node to be visible only if two nodes\nin a child\u2019s child level (2 levels deeper) are visible, you are on your\nown. In this case, either rely on <span data-xref=\"Gtk.TreeStore\"/> to emit all signals\nbecause it does not implement reference counting, or for models that\ndo implement reference counting, obtain references on these child levels\nyourself.</p>",
    "fields": [
        {
            "doc": "",
            "kind": "field",
            "name": "parent"
        },
        {
            "doc": "",
            "kind": "field",
            "name": "priv"
        }
    ],
    "kind": "class",
    "methods": [
        {
            "doc": "<p>This function should almost never be called. It clears the <code>filter</code>\nof any cached iterators that haven\u2019t been reffed with\n<span data-xref=\"Gtk.TreeModel.ref_node\"/>. This might be useful if the child model\nbeing filtered is static (and doesn\u2019t change often) and there has been\na lot of unreffed access to nodes. As a side effect of this function,\nall unreffed iters will be invalid.</p>",
            "kind": "method",
            "name": "clear_cache",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets <code>filter_iter</code> to point to the row in <code>filter</code> that corresponds to the\nrow pointed at by <code>child_iter</code>.  If <code>filter_iter</code> was not set, <code>false</code> is\nreturned.</p>",
            "kind": "method",
            "name": "convert_child_iter_to_iter",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "filter_iter",
                    "direction": "out",
                    "type": "Gtk.TreeIter"
                },
                {
                    "allow_none": false,
                    "argname": "child_iter",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Converts <code>child_path</code> to a path relative to <code>filter</code>. That is, <code>child_path</code>\npoints to a path in the child model. The rerturned path will point to the\nsame row in the filtered model. If <code>child_path</code> isn\u2019t a valid path on the\nchild model or points to a row which is not visible in <code>filter</code>, then <code>null</code>\nis returned.</p>",
            "kind": "method",
            "name": "convert_child_path_to_path",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "child_path",
                    "direction": "in",
                    "type": "Gtk.TreePath"
                }
            ],
            "retval": {
                "type": "Gtk.TreePath"
            }
        },
        {
            "doc": "<p>Sets <code>child_iter</code> to point to the row pointed to by <code>filter_iter</code>.</p>",
            "kind": "method",
            "name": "convert_iter_to_child_iter",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "child_iter",
                    "direction": "out",
                    "type": "Gtk.TreeIter"
                },
                {
                    "allow_none": false,
                    "argname": "filter_iter",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Converts <code>filter_path</code> to a path on the child model of <code>filter</code>. That is,\n<code>filter_path</code> points to a location in <code>filter</code>. The returned path will\npoint to the same location in the model not being filtered. If <code>filter_path</code>\ndoes not point to a location in the child model, <code>null</code> is returned.</p>",
            "kind": "method",
            "name": "convert_path_to_child_path",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "filter_path",
                    "direction": "in",
                    "type": "Gtk.TreePath"
                }
            ],
            "retval": {
                "type": "Gtk.TreePath"
            }
        },
        {
            "doc": "<p>Returns a pointer to the child model of <code>filter</code>.</p>",
            "kind": "method",
            "name": "get_model",
            "parameters": [],
            "retval": {
                "type": "Gtk.TreeModel"
            }
        },
        {
            "doc": "<p>Emits ::row_changed for each row in the child model, which causes\nthe filter to re-evaluate whether a row is visible or not.</p>",
            "kind": "method",
            "name": "refilter",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>With the <code>n_columns</code> and <code>types</code> parameters, you give an array of column\ntypes for this model (which will be exposed to the parent model/view).\nThe <code>func</code>, <code>data</code> and <code>destroy</code> parameters are for specifying the modify\nfunction. The modify function will get called for each\ndata access, the goal of the modify function is to return the data which\nshould be displayed at the location specified using the parameters of the\nmodify function.</p>",
            "kind": "method",
            "name": "set_modify_func",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "n_columns",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "types",
                    "direction": "in",
                    "type": "Array(GObject.Type)"
                },
                {
                    "allow_none": false,
                    "argname": "func",
                    "direction": "in",
                    "type": "Gtk.TreeModelFilterModifyFunc"
                },
                {
                    "allow_none": true,
                    "argname": "data",
                    "direction": "in",
                    "type": "void"
                },
                {
                    "allow_none": true,
                    "argname": "destroy",
                    "direction": "in",
                    "type": "GLib.DestroyNotify"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets <code>column</code> of the child_model to be the column where <code>filter</code> should\nlook for visibility information. @columns should be a column of type\n%G_TYPE_BOOLEAN, where <code>true</code> means that a row is visible, and <code>false</code>\nif not.</p>",
            "kind": "method",
            "name": "set_visible_column",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "column",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the visible function used when filtering the <code>filter</code> to be <code>func</code>. The\nfunction should return <code>true</code> if the given row should be visible and\n<code>false</code> otherwise.</p><p>If the condition calculated by the function changes over time (e.g. because\nit depends on some global parameters), you must call\n<span data-xref=\"Gtk.TreeModelFilter.refilter\"/> to keep the visibility information of\nthe model uptodate.</p><p>Note that <code>func</code> is called whenever a row is inserted, when it may still be\nempty. The visible function should therefore take special care of empty\nrows, like in the example below.</p><p>|[&lt;!-- language=\"C\" --&gt;\nstatic gboolean\nvisible_func (GtkTreeModel <em>model,\n              GtkTreeIter  </em>iter,\n              gpointer      data)\n{\n  // Visible if row is non-empty and first column is \u201cHI\u201d\n  gchar *str;\n  gboolean visible = FALSE;</p><p>gtk_tree_model_get (model, iter, 0, &amp;str, -1);\n  if (str &amp;&amp; strcmp (str, \"HI\") == 0)\n    visible = TRUE;\n  g_free (str);</p><p>return visible;\n}\n]|</p>",
            "kind": "method",
            "name": "set_visible_func",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "func",
                    "direction": "in",
                    "type": "Gtk.TreeModelFilterVisibleFunc"
                },
                {
                    "allow_none": true,
                    "argname": "data",
                    "direction": "in",
                    "type": "void"
                },
                {
                    "allow_none": true,
                    "argname": "destroy",
                    "direction": "in",
                    "type": "GLib.DestroyNotify"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        []
    ],
    "name": "TreeModelFilter",
    "properties": [
        {
            "doc": "",
            "kind": "property",
            "name": "child-model",
            "type": "Gtk.TreeModel"
        },
        {
            "doc": "",
            "kind": "property",
            "name": "virtual-root",
            "type": "Gtk.TreePath"
        }
    ],
    "signals": [],
    "vfuncs": [
        {
            "doc": "",
            "kind": "vfunc",
            "name": "modify",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "child_model",
                    "direction": "in",
                    "type": "Gtk.TreeModel"
                },
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                },
                {
                    "allow_none": false,
                    "argname": "value",
                    "direction": "in",
                    "type": "Any"
                },
                {
                    "allow_none": false,
                    "argname": "column",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "visible",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "child_model",
                    "direction": "in",
                    "type": "Gtk.TreeModel"
                },
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        }
    ]
}