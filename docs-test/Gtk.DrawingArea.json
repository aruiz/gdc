{
    "constructors": [
        {
            "doc": "<p>Creates a new drawing area.</p>",
            "kind": "constructor",
            "name": "new",
            "parameters": [],
            "retval": {
                "type": "Gtk.Widget"
            }
        }
    ],
    "doc": "<p>The <span data-xref=\"Gtk.DrawingArea\"/> widget is used for creating custom user interface\nelements. It\u2019s essentially a blank widget; you can draw on it. After\ncreating a drawing area, the application may want to connect to:</p><ul>\n<li>Mouse and button press signals to respond to input from\n  the user. (Use <span data-xref=\"Gtk.Widget.add_events\"/> to enable events\n  you wish to receive.)</li>\n</ul><ul>\n<li>The <span data-xref=\"Gtk.Widget-realize\"/> signal to take any necessary actions\n  when the widget is instantiated on a particular display.\n  (Create GDK resources in response to this signal.)</li>\n</ul><ul>\n<li>The <span data-xref=\"Gtk.Widget-configure-event\"/> signal to take any necessary\n  actions when the widget changes size.</li>\n</ul><ul>\n<li>The <span data-xref=\"Gtk.Widget-draw\"/> signal to handle redrawing the\n  contents of the widget.</li>\n</ul><p>The following code portion demonstrates using a drawing\narea to display a circle in the normal widget foreground\ncolor.</p><p>Note that GDK automatically clears the exposed area to the\nbackground color before sending the expose event, and that\ndrawing is implicitly clipped to the exposed area.</p><h2>Simple GtkDrawingArea usage</h2><p>|[&lt;!-- language=\"C\" --&gt;\ngboolean\ndraw_callback (GtkWidget <em>widget, cairo_t </em>cr, gpointer data)\n{\n  guint width, height;\n  GdkRGBA color;</p><p>width = gtk_widget_get_allocated_width (widget);\n  height = gtk_widget_get_allocated_height (widget);\n  cairo_arc (cr,\n             width / 2.0, height / 2.0,\n             MIN (width, height) / 2.0,\n             0, 2 * G_PI);</p><p>gtk_style_context_get_color (gtk_widget_get_style_context (widget),\n                               0,\n                               &amp;color);\n  gdk_cairo_set_source_rgba (cr, &amp;color);</p><p>cairo_fill (cr);</p><p>return FALSE;\n}\n[...]\n  GtkWidget *drawing_area = gtk_drawing_area_new ();\n  gtk_widget_set_size_request (drawing_area, 100, 100);\n  g_signal_connect (G_OBJECT (drawing_area), \"draw\",\n                    G_CALLBACK (draw_callback), NULL);\n]|</p><p>Draw signals are normally delivered when a drawing area first comes\nonscreen, or when it\u2019s covered by another window and then uncovered.\nYou can also force an expose event by adding to the \u201cdamage region\u201d\nof the drawing area\u2019s window; <span data-xref=\"Gtk.Widget.queue_draw_area\"/> and\n<span data-xref=\"Gdk.Window.invalidate_rect\">Gdk.Window.prototype.invalidate_rect</span> are equally good ways to do this.\nYou\u2019ll then get a draw signal for the invalid region.</p><p>The available routines for drawing are documented on the\n[GDK Drawing Primitives][gdk3-Cairo-Interaction] page\nand the cairo documentation.</p><p>To receive mouse events on a drawing area, you will need to enable\nthem with <span data-xref=\"Gtk.Widget.add_events\"/>. To receive keyboard events, you\nwill need to set the \u201ccan-focus\u201d property on the drawing area, and you\nshould probably draw some user-visible indication that the drawing\narea is focused. Use <span data-xref=\"Gtk.Widget.has_focus\"/> in your expose event\nhandler to decide whether to draw the focus indicator. See\n<span data-xref=\"Gtk.render_focus\"/> for one way to draw focus.</p>",
    "fields": [
        {
            "doc": "",
            "kind": "field",
            "name": "widget"
        },
        {
            "doc": "",
            "kind": "field",
            "name": "dummy"
        }
    ],
    "kind": "class",
    "methods": [
        []
    ],
    "name": "DrawingArea",
    "properties": [],
    "signals": [],
    "vfuncs": []
}