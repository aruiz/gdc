{
    "constructors": [
        {
            "doc": "<p>Creates a new text buffer.</p>",
            "kind": "constructor",
            "name": "new",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "table",
                    "direction": "in",
                    "type": "Gtk.TextTagTable"
                }
            ],
            "retval": {
                "type": "Gtk.TextBuffer"
            }
        }
    ],
    "doc": "<p>You may wish to begin by reading the\n[text widget conceptual overview][TextWidget]\nwhich gives an overview of all the objects and data\ntypes related to the text widget and how they work together.</p>",
    "kind": "class",
    "methods": [
        {
            "doc": "<p>Adds the mark at position <pre>where</pre>. The mark must not be added to\nanother buffer, and if its name is not <pre>null</pre> then there must not\nbe another mark in the buffer with the same name.</p><p>Emits the <span data-xref=\"Gtk.TextBuffer-mark-set\"/> signal as notification of the mark's\ninitial placement.</p>",
            "kind": "method",
            "name": "add_mark",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "mark",
                    "direction": "in",
                    "type": "Gtk.TextMark"
                },
                {
                    "allow_none": false,
                    "argname": "where",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Adds <pre>clipboard</pre> to the list of clipboards in which the selection\ncontents of <pre>buffer</pre> are available. In most cases, <pre>clipboard</pre> will be\nthe <span data-xref=\"Gtk.Clipboard\"/> of type %GDK_SELECTION_PRIMARY for a view of <pre>buffer</pre>.</p>",
            "kind": "method",
            "name": "add_selection_clipboard",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "clipboard",
                    "direction": "in",
                    "type": "Gtk.Clipboard"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Emits the \u201capply-tag\u201d signal on <pre>buffer</pre>. The default\nhandler for the signal applies <pre>tag</pre> to the given range.\n<pre>start</pre> and <pre>end</pre> do not have to be in order.</p>",
            "kind": "method",
            "name": "apply_tag",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "tag",
                    "direction": "in",
                    "type": "Gtk.TextTag"
                },
                {
                    "allow_none": false,
                    "argname": "start",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "end",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Calls <span data-xref=\"Gtk.TextTagTable.lookup\"/> on the buffer\u2019s tag table to\nget a <span data-xref=\"Gtk.TextTag\"/>, then calls <span data-xref=\"Gtk.TextBuffer.apply_tag\"/>.</p>",
            "kind": "method",
            "name": "apply_tag_by_name",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "name",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "start",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "end",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Performs the appropriate action as if the user hit the delete\nkey with the cursor at the position specified by <pre>iter</pre>. In the\nnormal case a single character will be deleted, but when\ncombining accents are involved, more than one character can\nbe deleted, and when precomposed character and accent combinations\nare involved, less than one character will be deleted.</p><p>Because the buffer is modified, all outstanding iterators become\ninvalid after calling this function; however, the <pre>iter</pre> will be\nre-initialized to point to the location where text was deleted.</p>",
            "kind": "method",
            "name": "backspace",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "interactive",
                    "direction": "in",
                    "type": "Boolean"
                },
                {
                    "allow_none": false,
                    "argname": "default_editable",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Called to indicate that the buffer operations between here and a\ncall to <span data-xref=\"Gtk.TextBuffer.end_user_action\"/> are part of a single\nuser-visible operation. The operations between\n<span data-xref=\"Gtk.TextBuffer.begin_user_action\"/> and\n<span data-xref=\"Gtk.TextBuffer.end_user_action\"/> can then be grouped when creating\nan undo stack. <span data-xref=\"Gtk.TextBuffer\"/> maintains a count of calls to\n<span data-xref=\"Gtk.TextBuffer.begin_user_action\"/> that have not been closed with\na call to <span data-xref=\"Gtk.TextBuffer.end_user_action\"/>, and emits the\n\u201cbegin-user-action\u201d and \u201cend-user-action\u201d signals only for the\noutermost pair of calls. This allows you to build user actions\nfrom other user actions.</p><p>The \u201cinteractive\u201d buffer mutation functions, such as\n<span data-xref=\"Gtk.TextBuffer.insert_interactive\"/>, automatically call begin/end\nuser action around the buffer operations they perform, so there's\nno need to add extra calls if you user action consists solely of a\nsingle call to one of those functions.</p>",
            "kind": "method",
            "name": "begin_user_action",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Copies the currently-selected text to a clipboard.</p>",
            "kind": "method",
            "name": "copy_clipboard",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "clipboard",
                    "direction": "in",
                    "type": "Gtk.Clipboard"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>This is a convenience function which simply creates a child anchor\nwith <span data-xref=\"Gtk.TextChildAnchor.new\"/> and inserts it into the buffer\nwith <span data-xref=\"Gtk.TextBuffer.insert_child_anchor\"/>. The new anchor is\nowned by the buffer; no reference count is returned to\nthe caller of <span data-xref=\"Gtk.TextBuffer.create_child_anchor\"/>.</p>",
            "kind": "method",
            "name": "create_child_anchor",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                }
            ],
            "retval": {
                "type": "Gtk.TextChildAnchor"
            }
        },
        {
            "doc": "<p>Creates a mark at position <pre>where</pre>. If <pre>mark_name</pre> is <pre>null</pre>, the mark\nis anonymous; otherwise, the mark can be retrieved by name using\n<span data-xref=\"Gtk.TextBuffer.get_mark\"/>. If a mark has left gravity, and text is\ninserted at the mark\u2019s current location, the mark will be moved to\nthe left of the newly-inserted text. If the mark has right gravity\n(<pre>left_gravity</pre> = <pre>false</pre>), the mark will end up on the right of\nnewly-inserted text. The standard left-to-right cursor is a mark\nwith right gravity (when you type, the cursor stays on the right\nside of the text you\u2019re typing).</p><p>The caller of this function does not own a\nreference to the returned <span data-xref=\"Gtk.TextMark\"/>, so you can ignore the\nreturn value if you like. Marks are owned by the buffer and go\naway when the buffer does.</p><p>Emits the <span data-xref=\"Gtk.TextBuffer-mark-set\"/> signal as notification of the mark's\ninitial placement.</p>",
            "kind": "method",
            "name": "create_mark",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "mark_name",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "where",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "left_gravity",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "Gtk.TextMark"
            }
        },
        {
            "doc": "<p>Creates a tag and adds it to the tag table for <pre>buffer</pre>.\nEquivalent to calling <span data-xref=\"Gtk.TextTag.new\"/> and then adding the\ntag to the buffer\u2019s tag table. The returned tag is owned by\nthe buffer\u2019s tag table, so the ref count will be equal to one.</p><p>If <pre>tag_name</pre> is <pre>null</pre>, the tag is anonymous.</p><p>If <pre>tag_name</pre> is non-<pre>null</pre>, a tag called <pre>tag_name</pre> must not already\nexist in the tag table for this buffer.</p><p>The <pre>first_property_name</pre> argument and subsequent arguments are a list\nof properties to set on the tag, as with <span data-xref=\"GObject.Object.set\">GObject.Object.set</span>.</p>",
            "kind": "method",
            "name": "create_tag",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "tag_name",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": true,
                    "argname": "first_property_name",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "...",
                    "direction": "in",
                    "type": "<varargs>"
                }
            ],
            "retval": {
                "type": "Gtk.TextTag"
            }
        },
        {
            "doc": "<p>Copies the currently-selected text to a clipboard, then deletes\nsaid text if it\u2019s editable.</p>",
            "kind": "method",
            "name": "cut_clipboard",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "clipboard",
                    "direction": "in",
                    "type": "Gtk.Clipboard"
                },
                {
                    "allow_none": false,
                    "argname": "default_editable",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Deletes text between <pre>start</pre> and <pre>end</pre>. The order of <pre>start</pre> and <pre>end</pre>\nis not actually relevant; <span data-xref=\"Gtk.TextBuffer.delete\"/> will reorder\nthem. This function actually emits the \u201cdelete-range\u201d signal, and\nthe default handler of that signal deletes the text. Because the\nbuffer is modified, all outstanding iterators become invalid after\ncalling this function; however, the <pre>start</pre> and <pre>end</pre> will be\nre-initialized to point to the location where text was deleted.</p>",
            "kind": "method",
            "name": "delete",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "start",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "end",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Deletes all editable text in the given range.\nCalls <span data-xref=\"Gtk.TextBuffer.delete\"/> for each editable sub-range of\n[@start,@end). @start and @end are revalidated to point to\nthe location of the last deleted range, or left untouched if\nno text was deleted.</p>",
            "kind": "method",
            "name": "delete_interactive",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "start_iter",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "end_iter",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "default_editable",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Deletes <pre>mark</pre>, so that it\u2019s no longer located anywhere in the\nbuffer. Removes the reference the buffer holds to the mark, so if\nyou haven\u2019t called <span data-xref=\"GObject.Object.ref\">GObject.Object.prototype.ref</span> on the mark, it will be freed. Even\nif the mark isn\u2019t freed, most operations on <pre>mark</pre> become\ninvalid, until it gets added to a buffer again with\n<span data-xref=\"Gtk.TextBuffer.add_mark\"/>. Use <span data-xref=\"Gtk.TextMark.get_deleted\"/> to\nfind out if a mark has been removed from its buffer.\nThe <span data-xref=\"Gtk.TextBuffer-mark-deleted\"/> signal will be emitted as notification after\nthe mark is deleted.</p>",
            "kind": "method",
            "name": "delete_mark",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "mark",
                    "direction": "in",
                    "type": "Gtk.TextMark"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Deletes the mark named <pre>name</pre>; the mark must exist. See\n<span data-xref=\"Gtk.TextBuffer.delete_mark\"/> for details.</p>",
            "kind": "method",
            "name": "delete_mark_by_name",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "name",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Deletes the range between the \u201cinsert\u201d and \u201cselection_bound\u201d marks,\nthat is, the currently-selected text. If <pre>interactive</pre> is <pre>true</pre>,\nthe editability of the selection will be considered (users can\u2019t delete\nuneditable text).</p>",
            "kind": "method",
            "name": "delete_selection",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "interactive",
                    "direction": "in",
                    "type": "Boolean"
                },
                {
                    "allow_none": false,
                    "argname": "default_editable",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>This function deserializes rich text in format <pre>format</pre> and inserts\nit at <pre>iter</pre>.</p><p>@formats to be used must be registered using\n<span data-xref=\"Gtk.TextBuffer.register_deserialize_format\"/> or\n<span data-xref=\"Gtk.TextBuffer.register_deserialize_tagset\"/> beforehand.</p>",
            "kind": "method",
            "name": "deserialize",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "content_buffer",
                    "direction": "in",
                    "type": "Gtk.TextBuffer"
                },
                {
                    "allow_none": false,
                    "argname": "format",
                    "direction": "in",
                    "type": "Gdk.Atom"
                },
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "data",
                    "direction": "in",
                    "type": "ByteArray"
                },
                {
                    "allow_none": false,
                    "argname": "length",
                    "direction": "in",
                    "type": "Number(gsize)"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>This functions returns the value set with\n<span data-xref=\"Gtk.TextBuffer.deserialize_set_can_create_tags\"/></p>",
            "kind": "method",
            "name": "deserialize_get_can_create_tags",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "format",
                    "direction": "in",
                    "type": "Gdk.Atom"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Use this function to allow a rich text deserialization function to\ncreate new tags in the receiving buffer. Note that using this\nfunction is almost always a bad idea, because the rich text\nfunctions you register should know how to map the rich text format\nthey handler to your text buffers set of tags.</p><p>The ability of creating new (arbitrary!) tags in the receiving buffer\nis meant for special rich text formats like the internal one that\nis registered using <span data-xref=\"Gtk.TextBuffer.register_deserialize_tagset\"/>,\nbecause that format is essentially a dump of the internal structure\nof the source buffer, including its tag names.</p><p>You should allow creation of tags only if you know what you are\ndoing, e.g. if you defined a tagset name for your application\nsuite\u2019s text buffers and you know that it\u2019s fine to receive new\ntags from these buffers, because you know that your application can\nhandle the newly created tags.</p>",
            "kind": "method",
            "name": "deserialize_set_can_create_tags",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "format",
                    "direction": "in",
                    "type": "Gdk.Atom"
                },
                {
                    "allow_none": false,
                    "argname": "can_create_tags",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Should be paired with a call to <span data-xref=\"Gtk.TextBuffer.begin_user_action\"/>.\nSee that function for a full explanation.</p>",
            "kind": "method",
            "name": "end_user_action",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Retrieves the first and last iterators in the buffer, i.e. the\nentire buffer lies within the range [<pre>start</pre>,<pre>end</pre>).</p>",
            "kind": "method",
            "name": "get_bounds",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "start",
                    "direction": "out",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "end",
                    "direction": "out",
                    "type": "Gtk.TextIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Gets the number of characters in the buffer; note that characters\nand bytes are not the same, you can\u2019t e.g. expect the contents of\nthe buffer in string form to be this many bytes long. The character\ncount is cached, so this function is very fast.</p>",
            "kind": "method",
            "name": "get_char_count",
            "parameters": [],
            "retval": {
                "type": "Number(gint)"
            }
        },
        {
            "doc": "<p>This function returns the list of targets this text buffer can\nprovide for copying and as DND source. The targets in the list are\nadded with @info values from the <span data-xref=\"Gtk.TextBufferTargetInfo\"/> enum,\nusing <span data-xref=\"Gtk.TargetList.add_rich_text_targets\"/> and\n<span data-xref=\"Gtk.TargetList.add_text_targets\"/>.</p>",
            "kind": "method",
            "name": "get_copy_target_list",
            "parameters": [],
            "retval": {
                "type": "Gtk.TargetList"
            }
        },
        {
            "doc": "<p>This function returns the rich text deserialize formats registered\nwith <pre>buffer</pre> using <span data-xref=\"Gtk.TextBuffer.register_deserialize_format\"/> or\n<span data-xref=\"Gtk.TextBuffer.register_deserialize_tagset\"/></p>",
            "kind": "method",
            "name": "get_deserialize_formats",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "n_formats",
                    "direction": "out",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "Array(Gdk.Atom)"
            }
        },
        {
            "doc": "<p>Initializes <pre>iter</pre> with the \u201cend iterator,\u201d one past the last valid\ncharacter in the text buffer. If dereferenced with\n<span data-xref=\"Gtk.TextIter.get_char\"/>, the end iterator has a character value of 0.\nThe entire buffer lies in the range from the first position in\nthe buffer (call <span data-xref=\"Gtk.TextBuffer.get_start_iter\"/> to get\ncharacter position 0) to the end iterator.</p>",
            "kind": "method",
            "name": "get_end_iter",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "out",
                    "type": "Gtk.TextIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Indicates whether the buffer has some text currently selected.</p>",
            "kind": "method",
            "name": "get_has_selection",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Returns the mark that represents the cursor (insertion point).\nEquivalent to calling <span data-xref=\"Gtk.TextBuffer.get_mark\"/> to get the mark\nnamed \u201cinsert\u201d, but very slightly more efficient, and involves less\ntyping.</p>",
            "kind": "method",
            "name": "get_insert",
            "parameters": [],
            "retval": {
                "type": "Gtk.TextMark"
            }
        },
        {
            "doc": "<p>Obtains the location of <pre>anchor</pre> within <pre>buffer</pre>.</p>",
            "kind": "method",
            "name": "get_iter_at_child_anchor",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "out",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "anchor",
                    "direction": "in",
                    "type": "Gtk.TextChildAnchor"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Initializes <pre>iter</pre> to the start of the given line. If <pre>line_number</pre> is greater\nthan the number of lines in the <pre>buffer</pre>, the end iterator is returned.</p>",
            "kind": "method",
            "name": "get_iter_at_line",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "out",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "line_number",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Obtains an iterator pointing to <pre>byte_index</pre> within the given line.\n<pre>byte_index</pre> must be the start of a UTF-8 character, and must not be\nbeyond the end of the line.  Note bytes, not\ncharacters; UTF-8 may encode one character as multiple bytes.</p>",
            "kind": "method",
            "name": "get_iter_at_line_index",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "out",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "line_number",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "byte_index",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Obtains an iterator pointing to <pre>char_offset</pre> within the given\nline. The <pre>char_offset</pre> must exist, offsets off the end of the line\nare not allowed. Note characters, not bytes;\nUTF-8 may encode one character as multiple bytes.</p>",
            "kind": "method",
            "name": "get_iter_at_line_offset",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "out",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "line_number",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "char_offset",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Initializes <pre>iter</pre> with the current position of <pre>mark</pre>.</p>",
            "kind": "method",
            "name": "get_iter_at_mark",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "out",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "mark",
                    "direction": "in",
                    "type": "Gtk.TextMark"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Initializes <pre>iter</pre> to a position <pre>char_offset</pre> chars from the start\nof the entire buffer. If <pre>char_offset</pre> is -1 or greater than the number\nof characters in the buffer, <pre>iter</pre> is initialized to the end iterator,\nthe iterator one past the last valid character in the buffer.</p>",
            "kind": "method",
            "name": "get_iter_at_offset",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "out",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "char_offset",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Obtains the number of lines in the buffer. This value is cached, so\nthe function is very fast.</p>",
            "kind": "method",
            "name": "get_line_count",
            "parameters": [],
            "retval": {
                "type": "Number(gint)"
            }
        },
        {
            "doc": "<p>Returns the mark named <pre>name</pre> in buffer <pre>buffer</pre>, or <pre>null</pre> if no such\nmark exists in the buffer.</p>",
            "kind": "method",
            "name": "get_mark",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "name",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "Gtk.TextMark"
            }
        },
        {
            "doc": "<p>Indicates whether the buffer has been modified since the last call\nto <span data-xref=\"Gtk.TextBuffer.set_modified\"/> set the modification flag to\n<pre>false</pre>. Used for example to enable a \u201csave\u201d function in a text\neditor.</p>",
            "kind": "method",
            "name": "get_modified",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>This function returns the list of targets this text buffer supports\nfor pasting and as DND destination. The targets in the list are\nadded with @info values from the <span data-xref=\"Gtk.TextBufferTargetInfo\"/> enum,\nusing <span data-xref=\"Gtk.TargetList.add_rich_text_targets\"/> and\n<span data-xref=\"Gtk.TargetList.add_text_targets\"/>.</p>",
            "kind": "method",
            "name": "get_paste_target_list",
            "parameters": [],
            "retval": {
                "type": "Gtk.TargetList"
            }
        },
        {
            "doc": "<p>Returns the mark that represents the selection bound.  Equivalent\nto calling <span data-xref=\"Gtk.TextBuffer.get_mark\"/> to get the mark named\n\u201cselection_bound\u201d, but very slightly more efficient, and involves\nless typing.</p><p>The currently-selected text in <pre>buffer</pre> is the region between the\n\u201cselection_bound\u201d and \u201cinsert\u201d marks. If \u201cselection_bound\u201d and\n\u201cinsert\u201d are in the same place, then there is no current selection.\n<span data-xref=\"Gtk.TextBuffer.get_selection_bounds\"/> is another convenient function\nfor handling the selection, if you just want to know whether there\u2019s a\nselection and what its bounds are.</p>",
            "kind": "method",
            "name": "get_selection_bound",
            "parameters": [],
            "retval": {
                "type": "Gtk.TextMark"
            }
        },
        {
            "doc": "<p>Returns <pre>true</pre> if some text is selected; places the bounds\nof the selection in <pre>start</pre> and <pre>end</pre> (if the selection has length 0,\nthen <pre>start</pre> and <pre>end</pre> are filled in with the same value).\n<pre>start</pre> and <pre>end</pre> will be in ascending order. If <pre>start</pre> and <pre>end</pre> are\nNULL, then they are not filled in, but the return value still indicates\nwhether text is selected.</p>",
            "kind": "method",
            "name": "get_selection_bounds",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "start",
                    "direction": "out",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "end",
                    "direction": "out",
                    "type": "Gtk.TextIter"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>This function returns the rich text serialize formats registered\nwith <pre>buffer</pre> using <span data-xref=\"Gtk.TextBuffer.register_serialize_format\"/> or\n<span data-xref=\"Gtk.TextBuffer.register_serialize_tagset\"/></p>",
            "kind": "method",
            "name": "get_serialize_formats",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "n_formats",
                    "direction": "out",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "Array(Gdk.Atom)"
            }
        },
        {
            "doc": "<p>Returns the text in the range [<pre>start</pre>,<pre>end</pre>). Excludes undisplayed\ntext (text marked with tags that set the invisibility attribute) if\n<pre>include_hidden_chars</pre> is <pre>false</pre>. The returned string includes a\n0xFFFC character whenever the buffer contains\nembedded images, so byte and character indexes into\nthe returned string do correspond to byte\nand character indexes into the buffer. Contrast with\n<span data-xref=\"Gtk.TextBuffer.get_text\"/>. Note that 0xFFFC can occur in normal\ntext as well, so it is not a reliable indicator that a pixbuf or\nwidget is in the buffer.</p>",
            "kind": "method",
            "name": "get_slice",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "start",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "end",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "include_hidden_chars",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "String"
            }
        },
        {
            "doc": "<p>Initialized <pre>iter</pre> with the first position in the text buffer. This\nis the same as using <span data-xref=\"Gtk.TextBuffer.get_iter_at_offset\"/> to get\nthe iter at character offset 0.</p>",
            "kind": "method",
            "name": "get_start_iter",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "out",
                    "type": "Gtk.TextIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Get the <span data-xref=\"Gtk.TextTagTable\"/> associated with this buffer.</p>",
            "kind": "method",
            "name": "get_tag_table",
            "parameters": [],
            "retval": {
                "type": "Gtk.TextTagTable"
            }
        },
        {
            "doc": "<p>Returns the text in the range [<pre>start</pre>,<pre>end</pre>). Excludes undisplayed\ntext (text marked with tags that set the invisibility attribute) if\n<pre>include_hidden_chars</pre> is <pre>false</pre>. Does not include characters\nrepresenting embedded images, so byte and character indexes into\nthe returned string do not correspond to byte\nand character indexes into the buffer. Contrast with\n<span data-xref=\"Gtk.TextBuffer.get_slice\"/>.</p>",
            "kind": "method",
            "name": "get_text",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "start",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "end",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "include_hidden_chars",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "String"
            }
        },
        {
            "doc": "<p>Inserts <pre>len</pre> bytes of <pre>text</pre> at position <pre>iter</pre>.  If <pre>len</pre> is -1,\n<pre>text</pre> must be nul-terminated and will be inserted in its\nentirety. Emits the \u201cinsert-text\u201d signal; insertion actually occurs\nin the default handler for the signal. <pre>iter</pre> is invalidated when\ninsertion occurs (because the buffer contents change), but the\ndefault signal handler revalidates it to point to the end of the\ninserted text.</p>",
            "kind": "method",
            "name": "insert",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "text",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "len",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Simply calls <span data-xref=\"Gtk.TextBuffer.insert\"/>, using the current\ncursor position as the insertion point.</p>",
            "kind": "method",
            "name": "insert_at_cursor",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "text",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "len",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Inserts a child widget anchor into the text buffer at <pre>iter</pre>. The\nanchor will be counted as one character in character counts, and\nwhen obtaining the buffer contents as a string, will be represented\nby the Unicode \u201cobject replacement character\u201d 0xFFFC. Note that the\n\u201cslice\u201d variants for obtaining portions of the buffer as a string\ninclude this character for child anchors, but the \u201ctext\u201d variants do\nnot. E.g. see <span data-xref=\"Gtk.TextBuffer.get_slice\"/> and\n<span data-xref=\"Gtk.TextBuffer.get_text\"/>. Consider\n<span data-xref=\"Gtk.TextBuffer.create_child_anchor\"/> as a more convenient\nalternative to this function. The buffer will add a reference to\nthe anchor, so you can unref it after insertion.</p>",
            "kind": "method",
            "name": "insert_child_anchor",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "anchor",
                    "direction": "in",
                    "type": "Gtk.TextChildAnchor"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Like <span data-xref=\"Gtk.TextBuffer.insert\"/>, but the insertion will not occur if\n<pre>iter</pre> is at a non-editable location in the buffer. Usually you\nwant to prevent insertions at ineditable locations if the insertion\nresults from a user action (is interactive).</p><pre>default_editable</pre>\n\n<p>indicates the editability of text that doesn't\nhave a tag affecting editability applied to it. Typically the\nresult of <span data-xref=\"Gtk.TextView.get_editable\"/> is appropriate here.</p>",
            "kind": "method",
            "name": "insert_interactive",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "text",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "len",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "default_editable",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Calls <span data-xref=\"Gtk.TextBuffer.insert_interactive\"/> at the cursor\nposition.</p><pre>default_editable</pre>\n\n<p>indicates the editability of text that doesn't\nhave a tag affecting editability applied to it. Typically the\nresult of <span data-xref=\"Gtk.TextView.get_editable\"/> is appropriate here.</p>",
            "kind": "method",
            "name": "insert_interactive_at_cursor",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "text",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "len",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "default_editable",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Inserts an image into the text buffer at <pre>iter</pre>. The image will be\ncounted as one character in character counts, and when obtaining\nthe buffer contents as a string, will be represented by the Unicode\n\u201cobject replacement character\u201d 0xFFFC. Note that the \u201cslice\u201d\nvariants for obtaining portions of the buffer as a string include\nthis character for pixbufs, but the \u201ctext\u201d variants do\nnot. e.g. see <span data-xref=\"Gtk.TextBuffer.get_slice\"/> and\n<span data-xref=\"Gtk.TextBuffer.get_text\"/>.</p>",
            "kind": "method",
            "name": "insert_pixbuf",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "pixbuf",
                    "direction": "in",
                    "type": "GdkPixbuf.Pixbuf"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Copies text, tags, and pixbufs between <pre>start</pre> and <pre>end</pre> (the order\nof <pre>start</pre> and <pre>end</pre> doesn\u2019t matter) and inserts the copy at <pre>iter</pre>.\nUsed instead of simply getting/inserting text because it preserves\nimages and tags. If <pre>start</pre> and <pre>end</pre> are in a different buffer from\n<pre>buffer</pre>, the two buffers must share the same tag table.</p><p>Implemented via emissions of the insert_text and apply_tag signals,\nso expect those.</p>",
            "kind": "method",
            "name": "insert_range",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "start",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "end",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Same as <span data-xref=\"Gtk.TextBuffer.insert_range\"/>, but does nothing if the\ninsertion point isn\u2019t editable. The <pre>default_editable</pre> parameter\nindicates whether the text is editable at <pre>iter</pre> if no tags\nenclosing <pre>iter</pre> affect editability. Typically the result of\n<span data-xref=\"Gtk.TextView.get_editable\"/> is appropriate here.</p>",
            "kind": "method",
            "name": "insert_range_interactive",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "start",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "end",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "default_editable",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Inserts <pre>text</pre> into <pre>buffer</pre> at <pre>iter</pre>, applying the list of tags to\nthe newly-inserted text. The last tag specified must be <pre>null</pre> to\nterminate the list. Equivalent to calling <span data-xref=\"Gtk.TextBuffer.insert\"/>,\nthen <span data-xref=\"Gtk.TextBuffer.apply_tag\"/> on the inserted text;\n<span data-xref=\"Gtk.TextBuffer.insert_with_tags\"/> is just a convenience function.</p>",
            "kind": "method",
            "name": "insert_with_tags",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "text",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "len",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "first_tag",
                    "direction": "in",
                    "type": "Gtk.TextTag"
                },
                {
                    "allow_none": false,
                    "argname": "...",
                    "direction": "in",
                    "type": "<varargs>"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Same as <span data-xref=\"Gtk.TextBuffer.insert_with_tags\"/>, but allows you\nto pass in tag names instead of tag objects.</p>",
            "kind": "method",
            "name": "insert_with_tags_by_name",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "text",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "len",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "first_tag_name",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "...",
                    "direction": "in",
                    "type": "<varargs>"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Moves <pre>mark</pre> to the new location <pre>where</pre>. Emits the <span data-xref=\"Gtk.TextBuffer-mark-set\"/>\nsignal as notification of the move.</p>",
            "kind": "method",
            "name": "move_mark",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "mark",
                    "direction": "in",
                    "type": "Gtk.TextMark"
                },
                {
                    "allow_none": false,
                    "argname": "where",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Moves the mark named <pre>name</pre> (which must exist) to location <pre>where</pre>.\nSee <span data-xref=\"Gtk.TextBuffer.move_mark\"/> for details.</p>",
            "kind": "method",
            "name": "move_mark_by_name",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "name",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "where",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Pastes the contents of a clipboard.\u00a0If <pre>override_location</pre> is <pre>null</pre>, the\npasted text will be inserted at the cursor position, or the buffer selection\nwill be replaced if the selection is non-empty.</p><p>Note: pasting is asynchronous, that is, we\u2019ll ask for the paste data and\nreturn, and at some point later after the main loop runs, the paste data will\nbe inserted.</p>",
            "kind": "method",
            "name": "paste_clipboard",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "clipboard",
                    "direction": "in",
                    "type": "Gtk.Clipboard"
                },
                {
                    "allow_none": true,
                    "argname": "override_location",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "default_editable",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>This function moves the \u201cinsert\u201d and \u201cselection_bound\u201d marks\nsimultaneously.  If you move them to the same place in two steps\nwith <span data-xref=\"Gtk.TextBuffer.move_mark\"/>, you will temporarily select a\nregion in between their old and new locations, which can be pretty\ninefficient since the temporarily-selected region will force stuff\nto be recalculated. This function moves them as a unit, which can\nbe optimized.</p>",
            "kind": "method",
            "name": "place_cursor",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "where",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>This function registers a rich text deserialization <pre>function</pre> along with\nits <pre>mime_type</pre> with the passed <pre>buffer</pre>.</p>",
            "kind": "method",
            "name": "register_deserialize_format",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "mime_type",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "function",
                    "direction": "in",
                    "type": "Gtk.TextBufferDeserializeFunc"
                },
                {
                    "allow_none": false,
                    "argname": "user_data",
                    "direction": "in",
                    "type": "void"
                },
                {
                    "allow_none": false,
                    "argname": "user_data_destroy",
                    "direction": "in",
                    "type": "GLib.DestroyNotify"
                }
            ],
            "retval": {
                "type": "Gdk.Atom"
            }
        },
        {
            "doc": "<p>This function registers GTK+\u2019s internal rich text serialization\nformat with the passed <pre>buffer</pre>. See\n<span data-xref=\"Gtk.TextBuffer.register_serialize_tagset\"/> for details.</p>",
            "kind": "method",
            "name": "register_deserialize_tagset",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "tagset_name",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "Gdk.Atom"
            }
        },
        {
            "doc": "<p>This function registers a rich text serialization <pre>function</pre> along with\nits <pre>mime_type</pre> with the passed <pre>buffer</pre>.</p>",
            "kind": "method",
            "name": "register_serialize_format",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "mime_type",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "function",
                    "direction": "in",
                    "type": "Gtk.TextBufferSerializeFunc"
                },
                {
                    "allow_none": false,
                    "argname": "user_data",
                    "direction": "in",
                    "type": "void"
                },
                {
                    "allow_none": false,
                    "argname": "user_data_destroy",
                    "direction": "in",
                    "type": "GLib.DestroyNotify"
                }
            ],
            "retval": {
                "type": "Gdk.Atom"
            }
        },
        {
            "doc": "<p>This function registers GTK+\u2019s internal rich text serialization\nformat with the passed <pre>buffer</pre>. The internal format does not comply\nto any standard rich text format and only works between <span data-xref=\"Gtk.TextBuffer\"/>\ninstances. It is capable of serializing all of a text buffer\u2019s tags\nand embedded pixbufs.</p><p>This function is just a wrapper around\n<span data-xref=\"Gtk.TextBuffer.register_serialize_format\"/>. The mime type used\nfor registering is \u201capplication/x-gtk-text-buffer-rich-text\u201d, or\n\u201capplication/x-gtk-text-buffer-rich-text;format=<pre>tagset_name</pre>\u201d if a\n<pre>tagset_name</pre> was passed.</p><p>The <pre>tagset_name</pre> can be used to restrict the transfer of rich text\nto buffers with compatible sets of tags, in order to avoid unknown\ntags from being pasted. It is probably the common case to pass an\nidentifier != <pre>null</pre> here, since the <pre>null</pre> tagset requires the\nreceiving buffer to deal with with pasting of arbitrary tags.</p>",
            "kind": "method",
            "name": "register_serialize_tagset",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "tagset_name",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "Gdk.Atom"
            }
        },
        {
            "doc": "<p>Removes all tags in the range between <pre>start</pre> and <pre>end</pre>.  Be careful\nwith this function; it could remove tags added in code unrelated to\nthe code you\u2019re currently writing. That is, using this function is\nprobably a bad idea if you have two or more unrelated code sections\nthat add tags.</p>",
            "kind": "method",
            "name": "remove_all_tags",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "start",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "end",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Removes a <span data-xref=\"Gtk.Clipboard\"/> added with\n<span data-xref=\"Gtk.TextBuffer.add_selection_clipboard\"/>.</p>",
            "kind": "method",
            "name": "remove_selection_clipboard",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "clipboard",
                    "direction": "in",
                    "type": "Gtk.Clipboard"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Emits the \u201cremove-tag\u201d signal. The default handler for the signal\nremoves all occurrences of <pre>tag</pre> from the given range. <pre>start</pre> and\n<pre>end</pre> don\u2019t have to be in order.</p>",
            "kind": "method",
            "name": "remove_tag",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "tag",
                    "direction": "in",
                    "type": "Gtk.TextTag"
                },
                {
                    "allow_none": false,
                    "argname": "start",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "end",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Calls <span data-xref=\"Gtk.TextTagTable.lookup\"/> on the buffer\u2019s tag table to\nget a <span data-xref=\"Gtk.TextTag\"/>, then calls <span data-xref=\"Gtk.TextBuffer.remove_tag\"/>.</p>",
            "kind": "method",
            "name": "remove_tag_by_name",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "name",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "start",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "end",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>This function moves the \u201cinsert\u201d and \u201cselection_bound\u201d marks\nsimultaneously.  If you move them in two steps\nwith <span data-xref=\"Gtk.TextBuffer.move_mark\"/>, you will temporarily select a\nregion in between their old and new locations, which can be pretty\ninefficient since the temporarily-selected region will force stuff\nto be recalculated. This function moves them as a unit, which can\nbe optimized.</p>",
            "kind": "method",
            "name": "select_range",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "ins",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "bound",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>This function serializes the portion of text between <pre>start</pre>\nand <pre>end</pre> in the rich text format represented by <pre>format</pre>.</p><p>@formats to be used must be registered using\n<span data-xref=\"Gtk.TextBuffer.register_serialize_format\"/> or\n<span data-xref=\"Gtk.TextBuffer.register_serialize_tagset\"/> beforehand.</p>",
            "kind": "method",
            "name": "serialize",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "content_buffer",
                    "direction": "in",
                    "type": "Gtk.TextBuffer"
                },
                {
                    "allow_none": false,
                    "argname": "format",
                    "direction": "in",
                    "type": "Gdk.Atom"
                },
                {
                    "allow_none": false,
                    "argname": "start",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "end",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "length",
                    "direction": "out",
                    "type": "Number(gsize)"
                }
            ],
            "retval": {
                "type": "ByteArray"
            }
        },
        {
            "doc": "<p>Used to keep track of whether the buffer has been modified since the\nlast time it was saved. Whenever the buffer is saved to disk, call\ngtk_text_buffer_set_modified (<pre>buffer</pre>, FALSE). When the buffer is modified,\nit will automatically toggled on the modified bit again. When the modified\nbit flips, the buffer emits the <span data-xref=\"Gtk.TextBuffer-modified-changed\"/> signal.</p>",
            "kind": "method",
            "name": "set_modified",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "setting",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Deletes current contents of <pre>buffer</pre>, and inserts <pre>text</pre> instead. If\n<pre>len</pre> is -1, <pre>text</pre> must be nul-terminated. <pre>text</pre> must be valid UTF-8.</p>",
            "kind": "method",
            "name": "set_text",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "text",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "len",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>This function unregisters a rich text format that was previously\nregistered using <span data-xref=\"Gtk.TextBuffer.register_deserialize_format\"/> or\n<span data-xref=\"Gtk.TextBuffer.register_deserialize_tagset\"/>.</p>",
            "kind": "method",
            "name": "unregister_deserialize_format",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "format",
                    "direction": "in",
                    "type": "Gdk.Atom"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>This function unregisters a rich text format that was previously\nregistered using <span data-xref=\"Gtk.TextBuffer.register_serialize_format\"/> or\n<span data-xref=\"Gtk.TextBuffer.register_serialize_tagset\"/></p>",
            "kind": "method",
            "name": "unregister_serialize_format",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "format",
                    "direction": "in",
                    "type": "Gdk.Atom"
                }
            ],
            "retval": {
                "type": "void"
            }
        }
    ],
    "name": "TextBuffer",
    "properties": [
        {
            "doc": "<p>The list of targets this buffer supports for clipboard copying\nand as DND source.</p>",
            "kind": "property",
            "name": "copy-target-list",
            "type": "Gtk.TargetList"
        },
        {
            "doc": "<p>The position of the insert mark (as offset from the beginning\nof the buffer). It is useful for getting notified when the\ncursor moves.</p>",
            "kind": "property",
            "name": "cursor-position",
            "type": "Number(gint)"
        },
        {
            "doc": "<p>Whether the buffer has some text currently selected.</p>",
            "kind": "property",
            "name": "has-selection",
            "type": "Boolean"
        },
        {
            "doc": "<p>The list of targets this buffer supports for clipboard pasting\nand as DND destination.</p>",
            "kind": "property",
            "name": "paste-target-list",
            "type": "Gtk.TargetList"
        },
        {
            "doc": "",
            "kind": "property",
            "name": "tag-table",
            "type": "Gtk.TextTagTable"
        },
        {
            "doc": "<p>The text content of the buffer. Without child widgets and images,\nsee <span data-xref=\"Gtk.TextBuffer.get_text\"/> for more information.</p>",
            "kind": "property",
            "name": "text",
            "type": "String"
        }
    ],
    "signals": [
        {
            "doc": "<p>The ::apply-tag signal is emitted to apply a tag to a\nrange of text in a <span data-xref=\"Gtk.TextBuffer\"/>.\nApplying actually occurs in the default handler.</p><p>Note that if your handler runs before the default handler it must not\ninvalidate the <pre>start</pre> and <pre>end</pre> iters (or has to revalidate them).</p><p>See also:\n<span data-xref=\"Gtk.TextBuffer.apply_tag\"/>,\n<span data-xref=\"Gtk.TextBuffer.insert_with_tags\"/>,\n<span data-xref=\"Gtk.TextBuffer.insert_range\"/>.</p>",
            "kind": "signal",
            "name": "apply-tag",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "tag",
                    "direction": "in",
                    "type": "Gtk.TextTag"
                },
                {
                    "allow_none": false,
                    "argname": "start",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "end",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::begin-user-action signal is emitted at the beginning of a single\nuser-visible operation on a <span data-xref=\"Gtk.TextBuffer\"/>.</p><p>See also:\n<span data-xref=\"Gtk.TextBuffer.begin_user_action\"/>,\n<span data-xref=\"Gtk.TextBuffer.insert_interactive\"/>,\n<span data-xref=\"Gtk.TextBuffer.insert_range_interactive\"/>,\n<span data-xref=\"Gtk.TextBuffer.delete_interactive\"/>,\n<span data-xref=\"Gtk.TextBuffer.backspace\"/>,\n<span data-xref=\"Gtk.TextBuffer.delete_selection\"/>.</p>",
            "kind": "signal",
            "name": "begin-user-action",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::changed signal is emitted when the content of a <span data-xref=\"Gtk.TextBuffer\"/>\nhas changed.</p>",
            "kind": "signal",
            "name": "changed",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::delete-range signal is emitted to delete a range\nfrom a <span data-xref=\"Gtk.TextBuffer\"/>.</p><p>Note that if your handler runs before the default handler it must not\ninvalidate the <pre>start</pre> and <pre>end</pre> iters (or has to revalidate them).\nThe default signal handler revalidates the <pre>start</pre> and <pre>end</pre> iters to\nboth point to the location where text was deleted. Handlers\nwhich run after the default handler (see g_signal_connect_after())\ndo not have access to the deleted text.</p><p>See also: <span data-xref=\"Gtk.TextBuffer.delete\"/>.</p>",
            "kind": "signal",
            "name": "delete-range",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "start",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "end",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::end-user-action signal is emitted at the end of a single\nuser-visible operation on the <span data-xref=\"Gtk.TextBuffer\"/>.</p><p>See also:\n<span data-xref=\"Gtk.TextBuffer.end_user_action\"/>,\n<span data-xref=\"Gtk.TextBuffer.insert_interactive\"/>,\n<span data-xref=\"Gtk.TextBuffer.insert_range_interactive\"/>,\n<span data-xref=\"Gtk.TextBuffer.delete_interactive\"/>,\n<span data-xref=\"Gtk.TextBuffer.backspace\"/>,\n<span data-xref=\"Gtk.TextBuffer.delete_selection\"/>,\n<span data-xref=\"Gtk.TextBuffer.backspace\"/>.</p>",
            "kind": "signal",
            "name": "end-user-action",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::insert-child-anchor signal is emitted to insert a\n<span data-xref=\"Gtk.TextChildAnchor\"/> in a <span data-xref=\"Gtk.TextBuffer\"/>.\nInsertion actually occurs in the default handler.</p><p>Note that if your handler runs before the default handler it must\nnot invalidate the <pre>location</pre> iter (or has to revalidate it).\nThe default signal handler revalidates it to be placed after the\ninserted <pre>anchor</pre>.</p><p>See also: <span data-xref=\"Gtk.TextBuffer.insert_child_anchor\"/>.</p>",
            "kind": "signal",
            "name": "insert-child-anchor",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "location",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "anchor",
                    "direction": "in",
                    "type": "Gtk.TextChildAnchor"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::insert-pixbuf signal is emitted to insert a <span data-xref=\"GdkPixbuf.Pixbuf\">GdkPixbuf.Pixbuf</span>\nin a <span data-xref=\"Gtk.TextBuffer\"/>. Insertion actually occurs in the default handler.</p><p>Note that if your handler runs before the default handler it must not\ninvalidate the <pre>location</pre> iter (or has to revalidate it).\nThe default signal handler revalidates it to be placed after the\ninserted <pre>pixbuf</pre>.</p><p>See also: <span data-xref=\"Gtk.TextBuffer.insert_pixbuf\"/>.</p>",
            "kind": "signal",
            "name": "insert-pixbuf",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "location",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "pixbuf",
                    "direction": "in",
                    "type": "GdkPixbuf.Pixbuf"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::insert-text signal is emitted to insert text in a <span data-xref=\"Gtk.TextBuffer\"/>.\nInsertion actually occurs in the default handler.</p><p>Note that if your handler runs before the default handler it must not\ninvalidate the <pre>location</pre> iter (or has to revalidate it).\nThe default signal handler revalidates it to point to the end of the\ninserted text.</p><p>See also:\n<span data-xref=\"Gtk.TextBuffer.insert\"/>,\n<span data-xref=\"Gtk.TextBuffer.insert_range\"/>.</p>",
            "kind": "signal",
            "name": "insert-text",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "location",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "text",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "len",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::mark-deleted signal is emitted as notification\nafter a <span data-xref=\"Gtk.TextMark\"/> is deleted.</p><p>See also:\n<span data-xref=\"Gtk.TextBuffer.delete_mark\"/>.</p>",
            "kind": "signal",
            "name": "mark-deleted",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "mark",
                    "direction": "in",
                    "type": "Gtk.TextMark"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::mark-set signal is emitted as notification\nafter a <span data-xref=\"Gtk.TextMark\"/> is set.</p><p>See also:\n<span data-xref=\"Gtk.TextBuffer.create_mark\"/>,\n<span data-xref=\"Gtk.TextBuffer.move_mark\"/>.</p>",
            "kind": "signal",
            "name": "mark-set",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "location",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "mark",
                    "direction": "in",
                    "type": "Gtk.TextMark"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::modified-changed signal is emitted when the modified bit of a\n<span data-xref=\"Gtk.TextBuffer\"/> flips.</p><p>See also:\n<span data-xref=\"Gtk.TextBuffer.set_modified\"/>.</p>",
            "kind": "signal",
            "name": "modified-changed",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The paste-done signal is emitted after paste operation has been completed.\nThis is useful to properly scroll the view to the end of the pasted text.\nSee <span data-xref=\"Gtk.TextBuffer.paste_clipboard\"/> for more details.</p>",
            "kind": "signal",
            "name": "paste-done",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "clipboard",
                    "direction": "in",
                    "type": "Gtk.Clipboard"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::remove-tag signal is emitted to remove all occurrences of <pre>tag</pre> from\na range of text in a <span data-xref=\"Gtk.TextBuffer\"/>.\nRemoval actually occurs in the default handler.</p><p>Note that if your handler runs before the default handler it must not\ninvalidate the <pre>start</pre> and <pre>end</pre> iters (or has to revalidate them).</p><p>See also:\n<span data-xref=\"Gtk.TextBuffer.remove_tag\"/>.</p>",
            "kind": "signal",
            "name": "remove-tag",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "tag",
                    "direction": "in",
                    "type": "Gtk.TextTag"
                },
                {
                    "allow_none": false,
                    "argname": "start",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "end",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        }
    ],
    "vfuncs": [
        {
            "doc": "<p>Emits the \u201capply-tag\u201d signal on <pre>buffer</pre>. The default\nhandler for the signal applies <pre>tag</pre> to the given range.\n<pre>start</pre> and <pre>end</pre> do not have to be in order.</p>",
            "kind": "vfunc",
            "name": "apply_tag",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "tag",
                    "direction": "in",
                    "type": "Gtk.TextTag"
                },
                {
                    "allow_none": false,
                    "argname": "start",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "end",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Called to indicate that the buffer operations between here and a\ncall to <span data-xref=\"Gtk.TextBuffer.end_user_action\"/> are part of a single\nuser-visible operation. The operations between\n<span data-xref=\"Gtk.TextBuffer.begin_user_action\"/> and\n<span data-xref=\"Gtk.TextBuffer.end_user_action\"/> can then be grouped when creating\nan undo stack. <span data-xref=\"Gtk.TextBuffer\"/> maintains a count of calls to\n<span data-xref=\"Gtk.TextBuffer.begin_user_action\"/> that have not been closed with\na call to <span data-xref=\"Gtk.TextBuffer.end_user_action\"/>, and emits the\n\u201cbegin-user-action\u201d and \u201cend-user-action\u201d signals only for the\noutermost pair of calls. This allows you to build user actions\nfrom other user actions.</p><p>The \u201cinteractive\u201d buffer mutation functions, such as\n<span data-xref=\"Gtk.TextBuffer.insert_interactive\"/>, automatically call begin/end\nuser action around the buffer operations they perform, so there's\nno need to add extra calls if you user action consists solely of a\nsingle call to one of those functions.</p>",
            "kind": "vfunc",
            "name": "begin_user_action",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "changed",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "delete_range",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "start",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "end",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Should be paired with a call to <span data-xref=\"Gtk.TextBuffer.begin_user_action\"/>.\nSee that function for a full explanation.</p>",
            "kind": "vfunc",
            "name": "end_user_action",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Inserts a child widget anchor into the text buffer at <pre>iter</pre>. The\nanchor will be counted as one character in character counts, and\nwhen obtaining the buffer contents as a string, will be represented\nby the Unicode \u201cobject replacement character\u201d 0xFFFC. Note that the\n\u201cslice\u201d variants for obtaining portions of the buffer as a string\ninclude this character for child anchors, but the \u201ctext\u201d variants do\nnot. E.g. see <span data-xref=\"Gtk.TextBuffer.get_slice\"/> and\n<span data-xref=\"Gtk.TextBuffer.get_text\"/>. Consider\n<span data-xref=\"Gtk.TextBuffer.create_child_anchor\"/> as a more convenient\nalternative to this function. The buffer will add a reference to\nthe anchor, so you can unref it after insertion.</p>",
            "kind": "vfunc",
            "name": "insert_child_anchor",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "anchor",
                    "direction": "in",
                    "type": "Gtk.TextChildAnchor"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Inserts an image into the text buffer at <pre>iter</pre>. The image will be\ncounted as one character in character counts, and when obtaining\nthe buffer contents as a string, will be represented by the Unicode\n\u201cobject replacement character\u201d 0xFFFC. Note that the \u201cslice\u201d\nvariants for obtaining portions of the buffer as a string include\nthis character for pixbufs, but the \u201ctext\u201d variants do\nnot. e.g. see <span data-xref=\"Gtk.TextBuffer.get_slice\"/> and\n<span data-xref=\"Gtk.TextBuffer.get_text\"/>.</p>",
            "kind": "vfunc",
            "name": "insert_pixbuf",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "pixbuf",
                    "direction": "in",
                    "type": "GdkPixbuf.Pixbuf"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "insert_text",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "pos",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "new_text",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "new_text_length",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "mark_deleted",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "mark",
                    "direction": "in",
                    "type": "Gtk.TextMark"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "mark_set",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "location",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "mark",
                    "direction": "in",
                    "type": "Gtk.TextMark"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "modified_changed",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "paste_done",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "clipboard",
                    "direction": "in",
                    "type": "Gtk.Clipboard"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Emits the \u201cremove-tag\u201d signal. The default handler for the signal\nremoves all occurrences of <pre>tag</pre> from the given range. <pre>start</pre> and\n<pre>end</pre> don\u2019t have to be in order.</p>",
            "kind": "vfunc",
            "name": "remove_tag",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "tag",
                    "direction": "in",
                    "type": "Gtk.TextTag"
                },
                {
                    "allow_none": false,
                    "argname": "start",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                },
                {
                    "allow_none": false,
                    "argname": "end",
                    "direction": "in",
                    "type": "Gtk.TextIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        }
    ]
}