{
    "constructors": [
        {
            "doc": "<p>This is a convenience function for creating a widget and setting\nits properties in one go. For example you might write:\n<code>gtk_widget_new (GTK_TYPE_LABEL, \"label\", \"Hello World\", \"xalign\",\n0.0, NULL)</code> to create a left-aligned label. Equivalent to\n<span data-xref=\"GObject.Object.new\">GObject.Object.new</span>, but returns a widget so you don\u2019t have to\ncast the object yourself.</p>",
            "kind": "constructor",
            "name": "new",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "type",
                    "direction": "in",
                    "type": "GObject.Type"
                },
                {
                    "allow_none": false,
                    "argname": "first_property_name",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "...",
                    "direction": "in",
                    "type": "<varargs>"
                }
            ],
            "retval": {
                "type": "Gtk.Widget"
            }
        }
    ],
    "doc": "<p>GtkWidget is the base class all widgets in GTK+ derive from. It manages the\nwidget lifecycle, states and style.</p><h1>Height-for-width Geometry Management # {#geometry-management}</h1><p>GTK+ uses a height-for-width (and width-for-height) geometry management\nsystem. Height-for-width means that a widget can change how much\nvertical space it needs, depending on the amount of horizontal space\nthat it is given (and similar for width-for-height). The most common\nexample is a label that reflows to fill up the available width, wraps\nto fewer lines, and therefore needs less height.</p><p>Height-for-width geometry management is implemented in GTK+ by way\nof five virtual methods:</p><ul>\n<li><span data-xref=\"Gtk.WidgetClass\"/>.get_request_mode()</li>\n<li><span data-xref=\"Gtk.WidgetClass\"/>.get_preferred_width()</li>\n<li><span data-xref=\"Gtk.WidgetClass\"/>.get_preferred_height()</li>\n<li><span data-xref=\"Gtk.WidgetClass\"/>.get_preferred_height_for_width()</li>\n<li><span data-xref=\"Gtk.WidgetClass\"/>.get_preferred_width_for_height()</li>\n<li><span data-xref=\"Gtk.WidgetClass\"/>.get_preferred_height_and_baseline_for_width()</li>\n</ul><p>There are some important things to keep in mind when implementing\nheight-for-width and when using it in container implementations.</p><p>The geometry management system will query a widget hierarchy in\nonly one orientation at a time. When widgets are initially queried\nfor their minimum sizes it is generally done in two initial passes\nin the <span data-xref=\"Gtk.SizeRequestMode\"/> chosen by the toplevel.</p><p>For example, when queried in the normal\n<span data-xref=\"Gtk.SizeRequestMode\"/>.height_for_width mode:\nFirst, the default minimum and natural width for each widget\nin the interface will be computed using <span data-xref=\"Gtk.Widget.get_preferred_width\"/>.\nBecause the preferred widths for each container depend on the preferred\nwidths of their children, this information propagates up the hierarchy,\nand finally a minimum and natural width is determined for the entire\ntoplevel. Next, the toplevel will use the minimum width to query for the\nminimum height contextual to that width using\n<span data-xref=\"Gtk.Widget.get_preferred_height_for_width\"/>, which will also be a highly\nrecursive operation. The minimum height for the minimum width is normally\nused to set the minimum size constraint on the toplevel\n(unless <span data-xref=\"Gtk.Window.set_geometry_hints\"/> is explicitly used instead).</p><p>After the toplevel window has initially requested its size in both\ndimensions it can go on to allocate itself a reasonable size (or a size\npreviously specified with <span data-xref=\"Gtk.Window.set_default_size\"/>). During the\nrecursive allocation process it\u2019s important to note that request cycles\nwill be recursively executed while container widgets allocate their children.\nEach container widget, once allocated a size, will go on to first share the\nspace in one orientation among its children and then request each child's\nheight for its target allocated width or its width for allocated height,\ndepending. In this way a <span data-xref=\"Gtk.Widget\"/> will typically be requested its size\na number of times before actually being allocated a size. The size a\nwidget is finally allocated can of course differ from the size it has\nrequested. For this reason, <span data-xref=\"Gtk.Widget\"/> caches a  small number of results\nto avoid re-querying for the same sizes in one allocation cycle.</p><p>See\n[GtkContainer\u2019s geometry management section][container-geometry-management]\nto learn more about how height-for-width allocations are performed\nby container widgets.</p><p>If a widget does move content around to intelligently use up the\nallocated size then it must support the request in both</p>\n<h1>GtkSizeRequestModes even if the widget in question only</h1>\n<p>trades sizes in a single orientation.</p><p>For instance, a <span data-xref=\"Gtk.Label\"/> that does height-for-width word wrapping\nwill not expect to have <span data-xref=\"Gtk.WidgetClass\"/>.get_preferred_height() called\nbecause that call is specific to a width-for-height request. In this\ncase the label must return the height required for its own minimum\npossible width. By following this rule any widget that handles\nheight-for-width or width-for-height requests will always be allocated\nat least enough space to fit its own content.</p><p>Here are some examples of how a <span data-xref=\"Gtk.SizeRequestMode\"/>.height_for_width widget\ngenerally deals with width-for-height requests, for <span data-xref=\"Gtk.WidgetClass\"/>.get_preferred_height()\nit will do:</p><p>|[&lt;!-- language=\"C\" --&gt;\nstatic void\nfoo_widget_get_preferred_height (GtkWidget <em>widget,\n                                 gint </em>min_height,\n                                 gint *nat_height)\n{\n   if (i_am_in_height_for_width_mode)\n     {\n       gint min_width;</p><pre><code>   GTK_WIDGET_GET_CLASS (widget)-&amp;gt;get_preferred_width (widget,\n                                                       &amp;amp;min_width,\n                                                       NULL);\n   GTK_WIDGET_GET_CLASS (widget)-&amp;gt;get_preferred_height_for_width\n                                                      (widget,\n                                                       min_width,\n                                                       min_height,\n                                                       nat_height);\n }\n</code></pre>\n<p>else\n     {\n        ... some widgets do both. For instance, if a GtkLabel is\n        rotated to 90 degrees it will return the minimum and\n        natural height for the rotated label here.\n     }\n}\n]|</p><p>And in <span data-xref=\"Gtk.WidgetClass\"/>.get_preferred_width_for_height() it will simply return\nthe minimum and natural width:\n|[&lt;!-- language=\"C\" --&gt;\nstatic void\nfoo_widget_get_preferred_width_for_height (GtkWidget <em>widget,\n                                           gint for_height,\n                                           gint </em>min_width,\n                                           gint *nat_width)\n{\n   if (i_am_in_height_for_width_mode)\n     {\n       GTK_WIDGET_GET_CLASS (widget)-&gt;get_preferred_width (widget,\n                                                           min_width,\n                                                           nat_width);\n     }\n   else\n     {\n        ... again if a widget is sometimes operating in\n        width-for-height mode (like a rotated GtkLabel) it can go\n        ahead and do its real width for height calculation here.\n     }\n}\n]|</p><p>Often a widget needs to get its own request during size request or\nallocation. For example, when computing height it may need to also\ncompute width. Or when deciding how to use an allocation, the widget\nmay need to know its natural size. In these cases, the widget should\nbe careful to call its virtual methods directly, like this:</p><p>|[&lt;!-- language=\"C\" --&gt;\nGTK_WIDGET_GET_CLASS(widget)-&gt;get_preferred_width (widget,\n                                                   &amp;min,\n                                                   &amp;natural);\n]|</p><p>It will not work to use the wrapper functions, such as\n<span data-xref=\"Gtk.Widget.get_preferred_width\"/> inside your own size request\nimplementation. These return a request adjusted by <span data-xref=\"Gtk.SizeGroup\"/>\nand by the <span data-xref=\"Gtk.WidgetClass\"/>.adjust_size_request() virtual method. If a\nwidget used the wrappers inside its virtual method implementations,\nthen the adjustments (such as widget margins) would be applied\ntwice. GTK+ therefore does not allow this and will warn if you try\nto do it.</p><p>Of course if you are getting the size request for\nanother widget, such as a child of a\ncontainer, you must use the wrapper APIs.\nOtherwise, you would not properly consider widget margins,\n<span data-xref=\"Gtk.SizeGroup\"/>, and so forth.</p><p>Since 3.10 Gtk+ also supports baseline vertical alignment of widgets. This\nmeans that widgets are positioned such that the typographical baseline of\nwidgets in the same row are aligned. This happens if a widget supports baselines,\nhas a vertical alignment of <span data-xref=\"Gtk.Align\"/>.baseline, and is inside a container\nthat supports baselines and has a natural \u201crow\u201d that it aligns to the baseline,\nor a baseline assigned to it by the grandparent.</p><p>Baseline alignment support for a widget is done by the <span data-xref=\"Gtk.WidgetClass\"/>.get_preferred_height_and_baseline_for_width()\nvirtual function. It allows you to report a baseline in combination with the\nminimum and natural height. If there is no baseline you can return -1 to indicate\nthis. The default implementation of this virtual function calls into the\n<span data-xref=\"Gtk.WidgetClass\"/>.get_preferred_height() and <span data-xref=\"Gtk.WidgetClass\"/>.get_preferred_height_for_width(),\nso if baselines are not supported it doesn\u2019t need to be implemented.</p><p>If a widget ends up baseline aligned it will be allocated all the space in the parent\nas if it was <span data-xref=\"Gtk.Align\"/>.fill, but the selected baseline can be found via <span data-xref=\"Gtk.Widget.get_allocated_baseline\"/>.\nIf this has a value other than -1 you need to align the widget such that the baseline\nappears at the position.</p><h1>Style Properties</h1><p><span data-xref=\"Gtk.Widget\"/> introduces \u201cstyle\nproperties\u201d - these are basically object properties that are stored\nnot on the object, but in the style object associated to the widget. Style\nproperties are set in [resource files][gtk3-Resource-Files].\nThis mechanism is used for configuring such things as the location of the\nscrollbar arrows through the theme, giving theme authors more control over the\nlook of applications without the need to write a theme engine in C.</p><p>Use <span data-xref=\"Gtk.WidgetClass.install_style_property\"/> to install style properties for\na widget class, <span data-xref=\"Gtk.WidgetClass.find_style_property\"/> or\n<span data-xref=\"Gtk.WidgetClass.list_style_properties\"/> to get information about existing\nstyle properties and <span data-xref=\"Gtk.Widget.style_get_property\"/>, <span data-xref=\"Gtk.Widget.style_get\"/> or\n<span data-xref=\"Gtk.Widget.style_get_valist\"/> to obtain the value of a style property.</p><h1>GtkWidget as GtkBuildable</h1><p>The GtkWidget implementation of the GtkBuildable interface supports a\ncustom &lt;accelerator&gt; element, which has attributes named \u201dkey\u201d, \u201dmodifiers\u201d\nand \u201dsignal\u201d and allows to specify accelerators.</p><p>An example of a UI definition fragment specifying an accelerator:\n|[\n&lt;object class=\"GtkButton\"&gt;\n  &lt;accelerator key=\"q\" modifiers=\"GDK_CONTROL_MASK\" signal=\"clicked\"/&gt;\n&lt;/object&gt;\n]|</p><p>In addition to accelerators, GtkWidget also support a custom &lt;accessible&gt;\nelement, which supports actions and relations. Properties on the accessible\nimplementation of an object can be set by accessing the internal child\n\u201caccessible\u201d of a <span data-xref=\"Gtk.Widget\"/>.</p><p>An example of a UI definition fragment specifying an accessible:\n|[\n&lt;object class=\"GtkButton\" id=\"label1\"/&gt;\n  &lt;property name=\"label\"&gt;I am a Label for a Button&lt;/property&gt;\n&lt;/object&gt;\n&lt;object class=\"GtkButton\" id=\"button1\"&gt;\n  &lt;accessibility&gt;\n    &lt;action action_name=\"click\" translatable=\"yes\"&gt;Click the button.&lt;/action&gt;\n    &lt;relation target=\"label1\" type=\"labelled-by\"/&gt;\n  &lt;/accessibility&gt;\n  &lt;child internal-child=\"accessible\"&gt;\n    &lt;object class=\"AtkObject\" id=\"a11y-button1\"&gt;\n      &lt;property name=\"accessible-name\"&gt;Clickable Button&lt;/property&gt;\n    &lt;/object&gt;\n  &lt;/child&gt;\n&lt;/object&gt;\n]|</p><p>Finally, GtkWidget allows style information such as style classes to\nbe associated with widgets, using the custom &lt;style&gt; element:\n|[\n&lt;object class=\"GtkButton\" id=\"button1\"&gt;\n  &lt;style&gt;\n    &lt;class name=\"my-special-button-class\"/&gt;\n    &lt;class name=\"dark-button\"/&gt;\n  &lt;/style&gt;\n&lt;/object&gt;\n]|</p><h1>Building composite widgets from template XML</h1><p>GtkWidget exposes some facilities to automate the proceedure\nof creating composite widgets using <span data-xref=\"Gtk.Builder\"/> interface description\nlanguage.</p><p>To create composite widgets with <span data-xref=\"Gtk.Builder\"/> XML, one must associate\nthe interface description with the widget class at class initialization\ntime using <span data-xref=\"Gtk.WidgetClass.set_template\"/>.</p><p>The interface description semantics expected in composite template descriptions\nis slightly different from regulare <span data-xref=\"Gtk.Builder\"/> XML.</p><p>Unlike regular interface descriptions, <span data-xref=\"Gtk.WidgetClass.set_template\"/> will\nexpect a &lt;template&gt; tag as a direct child of the toplevel &lt;interface&gt;\ntag. The &lt;template&gt; tag must specify the \u201cclass\u201d attribute which must be\nthe type name of the widget. Optionally, the \u201cparent\u201d attribute may be\nspecified to specify the direct parent type of the widget type, this is\nignored by the GtkBuilder but required for Glade to introspect what kind\nof properties and internal children exist for a given type when the actual\ntype does not exist.</p><p>The XML which is contained inside the &lt;template&gt; tag behaves as if it were\nadded to the &lt;object&gt; tag defining @widget itself. You may set properties\non @widget by inserting &lt;property&gt; tags into the &lt;template&gt; tag, and also\nadd &lt;child&gt; tags to add children and extend @widget in the normal way you\nwould with &lt;object&gt; tags.</p><p>Additionally, &lt;object&gt; tags can also be added before and after the initial\n&lt;template&gt; tag in the normal way, allowing one to define auxilary objects\nwhich might be referenced by other widgets declared as children of the\n&lt;template&gt; tag.</p><p>An example of a GtkBuilder Template Definition:\n|[\n&lt;interface&gt;\n  &lt;template class=\"FooWidget\" parent=\"GtkBox\"&gt;\n    &lt;property name=\"orientation\"&gt;GTK_ORIENTATION_HORIZONTAL&lt;/property&gt;\n    &lt;property name=\"spacing\"&gt;4&lt;/property&gt;\n    &lt;child&gt;\n      &lt;object class=\"GtkButton\" id=\"hello_button\"&gt;\n        &lt;property name=\"label\"&gt;Hello World&lt;/property&gt;\n      &lt;/object&gt;\n    &lt;/child&gt;\n    &lt;child&gt;\n      &lt;object class=\"GtkButton\" id=\"goodbye_button\"&gt;\n        &lt;property name=\"label\"&gt;Goodbye World&lt;/property&gt;\n      &lt;/object&gt;\n    &lt;/child&gt;\n  &lt;/template&gt;\n&lt;/interface&gt;\n]|</p>",
    "fields": [
        {
            "doc": "",
            "kind": "field",
            "name": "parent_instance"
        },
        {
            "doc": "",
            "kind": "field",
            "name": "priv"
        }
    ],
    "kind": "class",
    "methods": [
        {
            "doc": "<p>For widgets that can be \u201cactivated\u201d (buttons, menu items, etc.)\nthis function activates them. Activation is what happens when you\npress Enter on a widget during key navigation. If <code>widget</code> isn't\nactivatable, the function returns <code>false</code>.</p>",
            "kind": "method",
            "name": "activate",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Installs an accelerator for this <code>widget</code> in <code>accel_group</code> that causes\n<code>accel_signal</code> to be emitted if the accelerator is activated.\nThe <code>accel_group</code> needs to be added to the widget\u2019s toplevel via\n<span data-xref=\"Gtk.Window.add_accel_group\"/>, and the signal must be of type <span data-xref=\"GObject.SignalFlags\">GObject.SignalFlags</span>.action.\nAccelerators added through this function are not user changeable during\nruntime. If you want to support accelerators that can be changed by the\nuser, use <span data-xref=\"Gtk.AccelMap.add_entry\"/> and <span data-xref=\"Gtk.Widget.set_accel_path\"/> or\n<span data-xref=\"Gtk.MenuItem.set_accel_path\"/> instead.</p>",
            "kind": "method",
            "name": "add_accelerator",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "accel_signal",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "accel_group",
                    "direction": "in",
                    "type": "Gtk.AccelGroup"
                },
                {
                    "allow_none": false,
                    "argname": "accel_key",
                    "direction": "in",
                    "type": "Number(guint)"
                },
                {
                    "allow_none": false,
                    "argname": "accel_mods",
                    "direction": "in",
                    "type": "Gdk.ModifierType"
                },
                {
                    "allow_none": false,
                    "argname": "accel_flags",
                    "direction": "in",
                    "type": "Gtk.AccelFlags"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Adds the device events in the bitfield <code>events</code> to the event mask for\n<code>widget</code>. See <span data-xref=\"Gtk.Widget.set_device_events\"/> for details.</p>",
            "kind": "method",
            "name": "add_device_events",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "device",
                    "direction": "in",
                    "type": "Gdk.Device"
                },
                {
                    "allow_none": false,
                    "argname": "events",
                    "direction": "in",
                    "type": "Gdk.EventMask"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Adds the events in the bitfield <code>events</code> to the event mask for\n<code>widget</code>. See <span data-xref=\"Gtk.Widget.set_events\"/> for details.</p>",
            "kind": "method",
            "name": "add_events",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "events",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Adds a widget to the list of mnemonic labels for\nthis widget. (See <span data-xref=\"Gtk.Widget.list_mnemonic_labels\"/>). Note the\nlist of mnemonic labels for the widget is cleared when the\nwidget is destroyed, so the caller must make sure to update\nits internal state at this point as well, by using a connection\nto the <span data-xref=\"Gtk.Widget-destroy\"/> signal or a weak notifier.</p>",
            "kind": "method",
            "name": "add_mnemonic_label",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "label",
                    "direction": "in",
                    "type": "Gtk.Widget"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Queues an animation frame update and adds a callback to be called\nbefore each frame. Until the tick callback is removed, it will be\ncalled frequently (usually at the frame rate of the output device\nor as quickly as the application can be repainted, whichever is\nslower). For this reason, is most suitable for handling graphics\nthat change every frame or every few frames. The tick callback does\nnot automatically imply a relayout or repaint. If you want a\nrepaint or relayout, and aren\u2019t changing widget properties that\nwould trigger that (for example, changing the text of a <span data-xref=\"Gtk.Label\"/>),\nthen you will have to call <span data-xref=\"Gtk.Widget.queue_resize\"/> or\n<span data-xref=\"Gtk.Widget.queue_draw_area\"/> yourself.</p><p><span data-xref=\"Gdk.FrameClock.get_frame_time\">Gdk.FrameClock.prototype.get_frame_time</span> should generally be used for timing\ncontinuous animations and\n<span data-xref=\"Gdk.FrameTimings.get_predicted_presentation_time\">Gdk.FrameTimings.prototype.get_predicted_presentation_time</span> if you are\ntrying to display isolated frames at particular times.</p><p>This is a more convenient alternative to connecting directly to the\n<span data-xref=\"Gdk.FrameClock-update\">Gdk.FrameClock::update</span> signal of <span data-xref=\"Gdk.FrameClock\">Gdk.FrameClock</span>, since you don't\nhave to worry about when a <span data-xref=\"Gdk.FrameClock\">Gdk.FrameClock</span> is assigned to a widget.</p>",
            "kind": "method",
            "name": "add_tick_callback",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "callback",
                    "direction": "in",
                    "type": "Gtk.TickCallback"
                },
                {
                    "allow_none": false,
                    "argname": "user_data",
                    "direction": "in",
                    "type": "void"
                },
                {
                    "allow_none": false,
                    "argname": "notify",
                    "direction": "in",
                    "type": "GLib.DestroyNotify"
                }
            ],
            "retval": {
                "type": "Number(guint)"
            }
        },
        {
            "doc": "<p>Determines whether an accelerator that activates the signal\nidentified by <code>signal_id</code> can currently be activated.\nThis is done by emitting the <span data-xref=\"Gtk.Widget-can-activate-accel\"/>\nsignal on <code>widget</code>; if the signal isn\u2019t overridden by a\nhandler or in a derived widget, then the default check is\nthat the widget must be sensitive, and the widget and all\nits ancestors mapped.</p>",
            "kind": "method",
            "name": "can_activate_accel",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "signal_id",
                    "direction": "in",
                    "type": "Number(guint)"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>This function is used by custom widget implementations; if you're\nwriting an app, you\u2019d use <span data-xref=\"Gtk.Widget.grab_focus\"/> to move the focus\nto a particular widget, and <span data-xref=\"Gtk.Container.set_focus_chain\"/> to\nchange the focus tab order. So you may want to investigate those\nfunctions instead.</p><p><span data-xref=\"Gtk.Widget.child_focus\"/> is called by containers as the user moves\naround the window using keyboard shortcuts. <code>direction</code> indicates\nwhat kind of motion is taking place (up, down, left, right, tab\nforward, tab backward). <span data-xref=\"Gtk.Widget.child_focus\"/> emits the\n<span data-xref=\"Gtk.Widget-focus\"/> signal; widgets override the default handler\nfor this signal in order to implement appropriate focus behavior.</p><p>The default ::focus handler for a widget should return <code>true</code> if\nmoving in <code>direction</code> left the focus on a focusable location inside\nthat widget, and <code>false</code> if moving in <code>direction</code> moved the focus\noutside the widget. If returning <code>true</code>, widgets normally\ncall <span data-xref=\"Gtk.Widget.grab_focus\"/> to place the focus accordingly;\nif returning <code>false</code>, they don\u2019t modify the current focus location.</p>",
            "kind": "method",
            "name": "child_focus",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "direction",
                    "direction": "in",
                    "type": "Gtk.DirectionType"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Emits a <span data-xref=\"Gtk.Widget-child-notify\"/> signal for the\n[child property][child-properties] <code>child_property</code>\non <code>widget</code>.</p><p>This is the analogue of <span data-xref=\"GObject.Object.notify\">GObject.Object.prototype.notify</span> for child properties.</p><p>Also see <span data-xref=\"Gtk.Container.child_notify\"/>.</p>",
            "kind": "method",
            "name": "child_notify",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "child_property",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Same as <span data-xref=\"Gtk.Widget.path\"/>, but always uses the name of a widget\u2019s type,\nnever uses a custom name set with <span data-xref=\"Gtk.Widget.set_name\"/>.</p>",
            "kind": "method",
            "name": "class_path",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "path_length",
                    "direction": "out",
                    "type": "Number(guint)"
                },
                {
                    "allow_none": true,
                    "argname": "path",
                    "direction": "out",
                    "type": "String"
                },
                {
                    "allow_none": true,
                    "argname": "path_reversed",
                    "direction": "out",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Computes whether a container should give this widget extra space\nwhen possible. Containers should check this, rather than\nlooking at <span data-xref=\"Gtk.Widget.get_hexpand\"/> or <span data-xref=\"Gtk.Widget.get_vexpand\"/>.</p><p>This function already checks whether the widget is visible, so\nvisibility does not need to be checked separately. Non-visible\nwidgets are not expanded.</p><p>The computed expand value uses either the expand setting explicitly\nset on the widget itself, or, if none has been explicitly set,\nthe widget may expand if some of its children do.</p>",
            "kind": "method",
            "name": "compute_expand",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "orientation",
                    "direction": "in",
                    "type": "Gtk.Orientation"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Creates a new <span data-xref=\"Pango.Context\">Pango.Context</span> with the appropriate font map,\nfont description, and base direction for drawing text for\nthis widget. See also <span data-xref=\"Gtk.Widget.get_pango_context\"/>.</p>",
            "kind": "method",
            "name": "create_pango_context",
            "parameters": [],
            "retval": {
                "type": "Pango.Context"
            }
        },
        {
            "doc": "<p>Creates a new <span data-xref=\"Pango.Layout\">Pango.Layout</span> with the appropriate font map,\nfont description, and base direction for drawing text for\nthis widget.</p><p>If you keep a <span data-xref=\"Pango.Layout\">Pango.Layout</span> created in this way around, you need\nto re-create it when the widget <span data-xref=\"Pango.Context\">Pango.Context</span> is replaced.\nThis can be tracked by using the <span data-xref=\"Gtk.Widget-screen-changed\"/> signal\non the widget.</p>",
            "kind": "method",
            "name": "create_pango_layout",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "text",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "Pango.Layout"
            }
        },
        {
            "doc": "<p>Destroys a widget.</p><p>When a widget is\ndestroyed, it will break any references it holds to other objects.\nIf the widget is inside a container, the widget will be removed\nfrom the container. If the widget is a toplevel (derived from\n<span data-xref=\"Gtk.Window\"/>), it will be removed from the list of toplevels, and the\nreference GTK+ holds to it will be removed. Removing a\nwidget from its container or the list of toplevels results in the\nwidget being finalized, unless you\u2019ve added additional references\nto the widget with <span data-xref=\"GObject.Object.ref\">GObject.Object.prototype.ref</span>.</p><p>In most cases, only toplevel widgets (windows) require explicit\ndestruction, because when you destroy a toplevel its children will\nbe destroyed as well.</p>",
            "kind": "method",
            "name": "destroy",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>This function sets *<code>widget_pointer</code> to <code>null</code> if <code>widget_pointer</code> !=\n<code>null</code>.  It\u2019s intended to be used as a callback connected to the\n\u201cdestroy\u201d signal of a widget. You connect <span data-xref=\"Gtk.Widget.destroyed\"/>\nas a signal handler, and pass the address of your widget variable\nas user data. Then when the widget is destroyed, the variable will\nbe set to <code>null</code>. Useful for example to avoid multiple copies\nof the same dialog.</p>",
            "kind": "method",
            "name": "destroyed",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "widget_pointer",
                    "direction": "inout",
                    "type": "Gtk.Widget"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Returns <code>true</code> if <code>device</code> has been shadowed by a GTK+\ndevice grab on another widget, so it would stop sending\nevents to <code>widget</code>. This may be used in the\n<span data-xref=\"Gtk.Widget-grab-notify\"/> signal to check for specific\ndevices. See <span data-xref=\"Gtk.device_grab_add\"/>.</p>",
            "kind": "method",
            "name": "device_is_shadowed",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "device",
                    "direction": "in",
                    "type": "Gdk.Device"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>This is equivalent to <span data-xref=\"Gtk.Widget.drag_begin_with_coordinates\"/>, passing -1, -1\nas coordinates.</p>",
            "kind": "method",
            "name": "drag_begin",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "targets",
                    "direction": "in",
                    "type": "Gtk.TargetList"
                },
                {
                    "allow_none": false,
                    "argname": "actions",
                    "direction": "in",
                    "type": "Gdk.DragAction"
                },
                {
                    "allow_none": false,
                    "argname": "button",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.Event"
                }
            ],
            "retval": {
                "type": "Gdk.DragContext"
            }
        },
        {
            "doc": "<p>Initiates a drag on the source side. The function only needs to be used\nwhen the application is starting drags itself, and is not needed when\n<span data-xref=\"Gtk.Widget.drag_source_set\"/> is used.</p><p>The <code>event</code> is used to retrieve the timestamp that will be used internally to\ngrab the pointer.  If <code>event</code> is <code>null</code>, then %GDK_CURRENT_TIME will be used.\nHowever, you should try to pass a real event in all cases, since that can be\nused to get information about the drag.</p><p>Generally there are three cases when you want to start a drag by hand by\ncalling this function:</p><ol>\n<li>During a <span data-xref=\"Gtk.Widget-button-press-event\"/> handler, if you want to start a drag\nimmediately when the user presses the mouse button.  Pass the <code>event</code>\nthat you have in your <span data-xref=\"Gtk.Widget-button-press-event\"/> handler.</li>\n</ol><ol>\n<li>During a <span data-xref=\"Gtk.Widget-motion-notify-event\"/> handler, if you want to start a drag\nwhen the mouse moves past a certain threshold distance after a button-press.\nPass the <code>event</code> that you have in your <span data-xref=\"Gtk.Widget-motion-notify-event\"/> handler.</li>\n</ol><ol>\n<li>During a timeout handler, if you want to start a drag after the mouse\nbutton is held down for some time.  Try to save the last event that you got\nfrom the mouse, using <span data-xref=\"Gdk.Event.copy\">Gdk.Event.prototype.copy</span>, and pass it to this function\n(remember to free the event with <span data-xref=\"Gdk.Event.free\">Gdk.Event.prototype.free</span> when you are done).\nIf you can really not pass a real event, pass #NULL instead.</li>\n</ol>",
            "kind": "method",
            "name": "drag_begin_with_coordinates",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "targets",
                    "direction": "in",
                    "type": "Gtk.TargetList"
                },
                {
                    "allow_none": false,
                    "argname": "actions",
                    "direction": "in",
                    "type": "Gdk.DragAction"
                },
                {
                    "allow_none": false,
                    "argname": "button",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.Event"
                },
                {
                    "allow_none": false,
                    "argname": "x",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "y",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "Gdk.DragContext"
            }
        },
        {
            "doc": "<p>Checks to see if a mouse drag starting at (<code>start_x</code>, <code>start_y</code>) and ending\nat (<code>current_x</code>, <code>current_y</code>) has passed the GTK+ drag threshold, and thus\nshould trigger the beginning of a drag-and-drop operation.</p>",
            "kind": "method",
            "name": "drag_check_threshold",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "start_x",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "start_y",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "current_x",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "current_y",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Add the image targets supported by <span data-xref=\"Gtk.SelectionData\"/> to\nthe target list of the drag destination. The targets\nare added with @info = 0. If you need another value,\nuse <span data-xref=\"Gtk.TargetList.add_image_targets\"/> and\n<span data-xref=\"Gtk.Widget.drag_dest_set_target_list\"/>.</p>",
            "kind": "method",
            "name": "drag_dest_add_image_targets",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Add the text targets supported by <span data-xref=\"Gtk.SelectionData\"/> to\nthe target list of the drag destination. The targets\nare added with @info = 0. If you need another value,\nuse <span data-xref=\"Gtk.TargetList.add_text_targets\"/> and\n<span data-xref=\"Gtk.Widget.drag_dest_set_target_list\"/>.</p>",
            "kind": "method",
            "name": "drag_dest_add_text_targets",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Add the URI targets supported by <span data-xref=\"Gtk.SelectionData\"/> to\nthe target list of the drag destination. The targets\nare added with @info = 0. If you need another value,\nuse <span data-xref=\"Gtk.TargetList.add_uri_targets\"/> and\n<span data-xref=\"Gtk.Widget.drag_dest_set_target_list\"/>.</p>",
            "kind": "method",
            "name": "drag_dest_add_uri_targets",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Looks for a match between the supported targets of <code>context</code> and the\n@dest_target_list, returning the first matching target, otherwise\nreturning %GDK_NONE. @dest_target_list should usually be the return\nvalue from <span data-xref=\"Gtk.Widget.drag_dest_get_target_list\"/>, but some widgets may\nhave different valid targets for different parts of the widget; in\nthat case, they will have to implement a drag_motion handler that\npasses the correct target list to this function.</p>",
            "kind": "method",
            "name": "drag_dest_find_target",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "context",
                    "direction": "in",
                    "type": "Gdk.DragContext"
                },
                {
                    "allow_none": true,
                    "argname": "target_list",
                    "direction": "in",
                    "type": "Gtk.TargetList"
                }
            ],
            "retval": {
                "type": "Gdk.Atom"
            }
        },
        {
            "doc": "<p>Returns the list of targets this widget can accept from\ndrag-and-drop.</p>",
            "kind": "method",
            "name": "drag_dest_get_target_list",
            "parameters": [],
            "retval": {
                "type": "Gtk.TargetList"
            }
        },
        {
            "doc": "<p>Returns whether the widget has been configured to always\nemit <span data-xref=\"Gtk.Widget-drag-motion\"/> signals.</p>",
            "kind": "method",
            "name": "drag_dest_get_track_motion",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Sets a widget as a potential drop destination, and adds default behaviors.</p><p>The default behaviors listed in <code>flags</code> have an effect similar\nto installing default handlers for the widget\u2019s drag-and-drop signals\n(<span data-xref=\"Gtk.Widget-drag-motion\"/>, <span data-xref=\"Gtk.Widget-drag-drop\"/>, ...). They all exist\nfor convenience. When passing #GTK_DEST_DEFAULT_ALL for instance it is\nsufficient to connect to the widget\u2019s <span data-xref=\"Gtk.Widget-drag-data-received\"/>\nsignal to get primitive, but consistent drag-and-drop support.</p><p>Things become more complicated when you try to preview the dragged data,\nas described in the documentation for <span data-xref=\"Gtk.Widget-drag-motion\"/>. The default\nbehaviors described by <code>flags</code> make some assumptions, that can conflict\nwith your own signal handlers. For instance #GTK_DEST_DEFAULT_DROP causes\ninvokations of <span data-xref=\"Gdk.drag_status\">Gdk.drag_status</span> in the context of <span data-xref=\"Gtk.Widget-drag-motion\"/>,\nand invokations of <span data-xref=\"Gtk.drag_finish\"/> in <span data-xref=\"Gtk.Widget-drag-data-received\"/>.\nEspecially the later is dramatic, when your own <span data-xref=\"Gtk.Widget-drag-motion\"/>\nhandler calls <span data-xref=\"Gtk.Widget.drag_get_data\"/> to inspect the dragged data.</p><p>There\u2019s no way to set a default action here, you can use the\n<span data-xref=\"Gtk.Widget-drag-motion\"/> callback for that. Here\u2019s an example which selects\nthe action to use depending on whether the control key is pressed or not:\n|[&lt;!-- language=\"C\" --&gt;\nstatic void\ndrag_motion (GtkWidget <em>widget,\n             GdkDragContext </em>context,\n             gint x,\n             gint y,\n             guint time)\n{\n  GdkModifierType mask;</p><p>gdk_window_get_pointer (gtk_widget_get_window (widget),\n                          NULL, NULL, &amp;mask);\n  if (mask &amp; GDK_CONTROL_MASK)\n    gdk_drag_status (context, GDK_ACTION_COPY, time);\n  else\n    gdk_drag_status (context, GDK_ACTION_MOVE, time);\n}\n]|</p>",
            "kind": "method",
            "name": "drag_dest_set",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "flags",
                    "direction": "in",
                    "type": "Gtk.DestDefaults"
                },
                {
                    "allow_none": true,
                    "argname": "targets",
                    "direction": "in",
                    "type": "Array(Gtk.TargetEntry)"
                },
                {
                    "allow_none": false,
                    "argname": "n_targets",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "actions",
                    "direction": "in",
                    "type": "Gdk.DragAction"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets this widget as a proxy for drops to another window.</p>",
            "kind": "method",
            "name": "drag_dest_set_proxy",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "proxy_window",
                    "direction": "in",
                    "type": "Gdk.Window"
                },
                {
                    "allow_none": false,
                    "argname": "protocol",
                    "direction": "in",
                    "type": "Gdk.DragProtocol"
                },
                {
                    "allow_none": false,
                    "argname": "use_coordinates",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the target types that this widget can accept from drag-and-drop.\nThe widget must first be made into a drag destination with\n<span data-xref=\"Gtk.Widget.drag_dest_set\"/>.</p>",
            "kind": "method",
            "name": "drag_dest_set_target_list",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "target_list",
                    "direction": "in",
                    "type": "Gtk.TargetList"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Tells the widget to emit <span data-xref=\"Gtk.Widget-drag-motion\"/> and\n<span data-xref=\"Gtk.Widget-drag-leave\"/> events regardless of the targets and the\n<span data-xref=\"Gtk.DestDefaults\"/>.motion flag.</p><p>This may be used when a widget wants to do generic\nactions regardless of the targets that the source offers.</p>",
            "kind": "method",
            "name": "drag_dest_set_track_motion",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "track_motion",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Clears information about a drop destination set with\n<span data-xref=\"Gtk.Widget.drag_dest_set\"/>. The widget will no longer receive\nnotification of drags.</p>",
            "kind": "method",
            "name": "drag_dest_unset",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Gets the data associated with a drag. When the data\nis received or the retrieval fails, GTK+ will emit a\n<span data-xref=\"Gtk.Widget-drag-data-received\"/> signal. Failure of the retrieval\nis indicated by the length field of the @selection_data\nsignal parameter being negative. However, when <span data-xref=\"Gtk.Widget.drag_get_data\"/>\nis called implicitely because the <span data-xref=\"Gtk.DestDefaults\"/>.drop was set,\nthen the widget will not receive notification of failed\ndrops.</p>",
            "kind": "method",
            "name": "drag_get_data",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "context",
                    "direction": "in",
                    "type": "Gdk.DragContext"
                },
                {
                    "allow_none": false,
                    "argname": "target",
                    "direction": "in",
                    "type": "Gdk.Atom"
                },
                {
                    "allow_none": false,
                    "argname": "time_",
                    "direction": "in",
                    "type": "Number(guint32)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Draws a highlight around a widget. This will attach\nhandlers to <span data-xref=\"Gtk.Widget-draw\"/>, so the highlight\nwill continue to be displayed until <span data-xref=\"Gtk.Widget.drag_unhighlight\"/>\nis called.</p>",
            "kind": "method",
            "name": "drag_highlight",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Add the writable image targets supported by <span data-xref=\"Gtk.SelectionData\"/> to\nthe target list of the drag source. The targets\nare added with @info = 0. If you need another value,\nuse <span data-xref=\"Gtk.TargetList.add_image_targets\"/> and\n<span data-xref=\"Gtk.Widget.drag_source_set_target_list\"/>.</p>",
            "kind": "method",
            "name": "drag_source_add_image_targets",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Add the text targets supported by <span data-xref=\"Gtk.SelectionData\"/> to\nthe target list of the drag source.  The targets\nare added with @info = 0. If you need another value,\nuse <span data-xref=\"Gtk.TargetList.add_text_targets\"/> and\n<span data-xref=\"Gtk.Widget.drag_source_set_target_list\"/>.</p>",
            "kind": "method",
            "name": "drag_source_add_text_targets",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Add the URI targets supported by <span data-xref=\"Gtk.SelectionData\"/> to\nthe target list of the drag source.  The targets\nare added with @info = 0. If you need another value,\nuse <span data-xref=\"Gtk.TargetList.add_uri_targets\"/> and\n<span data-xref=\"Gtk.Widget.drag_source_set_target_list\"/>.</p>",
            "kind": "method",
            "name": "drag_source_add_uri_targets",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Gets the list of targets this widget can provide for\ndrag-and-drop.</p>",
            "kind": "method",
            "name": "drag_source_get_target_list",
            "parameters": [],
            "retval": {
                "type": "Gtk.TargetList"
            }
        },
        {
            "doc": "<p>Sets up a widget so that GTK+ will start a drag operation when the user\nclicks and drags on the widget. The widget must have a window.</p>",
            "kind": "method",
            "name": "drag_source_set",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "start_button_mask",
                    "direction": "in",
                    "type": "Gdk.ModifierType"
                },
                {
                    "allow_none": true,
                    "argname": "targets",
                    "direction": "in",
                    "type": "Array(Gtk.TargetEntry)"
                },
                {
                    "allow_none": false,
                    "argname": "n_targets",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "actions",
                    "direction": "in",
                    "type": "Gdk.DragAction"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the icon that will be used for drags from a particular source\nto <code>icon</code>. See the docs for <span data-xref=\"Gtk.IconTheme\"/> for more details.</p>",
            "kind": "method",
            "name": "drag_source_set_icon_gicon",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "icon",
                    "direction": "in",
                    "type": "Gio.Icon"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the icon that will be used for drags from a particular source\nto a themed icon. See the docs for <span data-xref=\"Gtk.IconTheme\"/> for more details.</p>",
            "kind": "method",
            "name": "drag_source_set_icon_name",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "icon_name",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the icon that will be used for drags from a particular widget\nfrom a <span data-xref=\"GdkPixbuf.Pixbuf\">GdkPixbuf.Pixbuf</span>. GTK+ retains a reference for <code>pixbuf</code> and will\nrelease it when it is no longer needed.</p>",
            "kind": "method",
            "name": "drag_source_set_icon_pixbuf",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "pixbuf",
                    "direction": "in",
                    "type": "GdkPixbuf.Pixbuf"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the icon that will be used for drags from a particular source\nto a stock icon.</p>",
            "kind": "method",
            "name": "drag_source_set_icon_stock",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "stock_id",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Changes the target types that this widget offers for drag-and-drop.\nThe widget must first be made into a drag source with\n<span data-xref=\"Gtk.Widget.drag_source_set\"/>.</p>",
            "kind": "method",
            "name": "drag_source_set_target_list",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "target_list",
                    "direction": "in",
                    "type": "Gtk.TargetList"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Undoes the effects of <span data-xref=\"Gtk.Widget.drag_source_set\"/>.</p>",
            "kind": "method",
            "name": "drag_source_unset",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Removes a highlight set by <span data-xref=\"Gtk.Widget.drag_highlight\"/> from\na widget.</p>",
            "kind": "method",
            "name": "drag_unhighlight",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Draws <code>widget</code> to <code>cr</code>. The top left corner of the widget will be\ndrawn to the currently set origin point of <code>cr</code>.</p><p>You should pass a cairo context as <code>cr</code> argument that is in an\noriginal state. Otherwise the resulting drawing is undefined. For\nexample changing the operator using cairo_set_operator() or the\nline width using cairo_set_line_width() might have unwanted side\neffects.\nYou may however change the context\u2019s transform matrix - like with\ncairo_scale(), cairo_translate() or cairo_set_matrix() and clip\nregion with cairo_clip() prior to calling this function. Also, it\nis fine to modify the context with cairo_save() and\ncairo_push_group() prior to calling this function.</p><p>Note that special-purpose widgets may contain special code for\nrendering to the screen and might appear differently on screen\nand when rendered using <span data-xref=\"Gtk.Widget.draw\"/>.</p>",
            "kind": "method",
            "name": "draw",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "cr",
                    "direction": "in",
                    "type": "cairo.Context"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Ensures that <code>widget</code> has a style (<code>widget</code>-&gt;style).</p><p>Not a very useful function; most of the time, if you\nwant the style, the widget is realized, and realized\nwidgets are guaranteed to have a style already.</p>",
            "kind": "method",
            "name": "ensure_style",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Notifies the user about an input-related error on this widget.\nIf the <span data-xref=\"Gtk.Settings-gtk-error-bell\"/> setting is <code>true</code>, it calls\n<span data-xref=\"Gdk.Window.beep\">Gdk.Window.prototype.beep</span>, otherwise it does nothing.</p><p>Note that the effect of <span data-xref=\"Gdk.Window.beep\">Gdk.Window.prototype.beep</span> can be configured in many\nways, depending on the windowing backend and the desktop environment\nor window manager that is used.</p>",
            "kind": "method",
            "name": "error_bell",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Rarely-used function. This function is used to emit\nthe event signals on a widget (those signals should never\nbe emitted without using this function to do so).\nIf you want to synthesize an event though, don\u2019t use this function;\ninstead, use <span data-xref=\"Gtk.main_do_event\"/> so the event will behave as if\nit were in the event queue. Don\u2019t synthesize expose events; instead,\nuse <span data-xref=\"Gdk.Window.invalidate_rect\">Gdk.Window.prototype.invalidate_rect</span> to invalidate a region of the\nwindow.</p>",
            "kind": "method",
            "name": "event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.Event"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Stops emission of <span data-xref=\"Gtk.Widget-child-notify\"/> signals on <code>widget</code>. The\nsignals are queued until <span data-xref=\"Gtk.Widget.thaw_child_notify\"/> is called\non <code>widget</code>.</p><p>This is the analogue of <span data-xref=\"GObject.Object.freeze_notify\">GObject.Object.prototype.freeze_notify</span> for child properties.</p>",
            "kind": "method",
            "name": "freeze_child_notify",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Returns the accessible object that describes the widget to an\nassistive technology.</p><p>If accessibility support is not available, this <span data-xref=\"Atk.Object\">Atk.Object</span>\ninstance may be a no-op. Likewise, if no class-specific <span data-xref=\"Atk.Object\">Atk.Object</span>\nimplementation is available for the widget instance in question,\nit will inherit an <span data-xref=\"Atk.Object\">Atk.Object</span> implementation from the first ancestor\nclass for which such an implementation is defined.</p><p>The documentation of the\n<a href=\"http://developer.gnome.org/atk/stable/\">ATK</a>\nlibrary contains more information about accessible objects and their uses.</p>",
            "kind": "method",
            "name": "get_accessible",
            "parameters": [],
            "retval": {
                "type": "Atk.Object"
            }
        },
        {
            "doc": "<p>Returns the baseline that has currently been allocated to <code>widget</code>.\nThis function is intended to be used when implementing handlers\nfor the <span data-xref=\"Gtk.Widget-draw\"/> function, and when allocating child\nwidgets in #GtkWidget::size_allocate.</p>",
            "kind": "method",
            "name": "get_allocated_baseline",
            "parameters": [],
            "retval": {
                "type": "Number(gint)"
            }
        },
        {
            "doc": "<p>Returns the height that has currently been allocated to <code>widget</code>.\nThis function is intended to be used when implementing handlers\nfor the <span data-xref=\"Gtk.Widget-draw\"/> function.</p>",
            "kind": "method",
            "name": "get_allocated_height",
            "parameters": [],
            "retval": {
                "type": "Number(gint)"
            }
        },
        {
            "doc": "<p>Returns the width that has currently been allocated to <code>widget</code>.\nThis function is intended to be used when implementing handlers\nfor the <span data-xref=\"Gtk.Widget-draw\"/> function.</p>",
            "kind": "method",
            "name": "get_allocated_width",
            "parameters": [],
            "retval": {
                "type": "Number(gint)"
            }
        },
        {
            "doc": "<p>Retrieves the widget\u2019s allocation.</p><p>Note, when implementing a <span data-xref=\"Gtk.Container\"/>: a widget\u2019s allocation will\nbe its \u201cadjusted\u201d allocation, that is, the widget\u2019s parent\ncontainer typically calls <span data-xref=\"Gtk.Widget.size_allocate\"/> with an\nallocation, and that allocation is then adjusted (to handle margin\nand alignment for example) before assignment to the widget.\n<span data-xref=\"Gtk.Widget.get_allocation\"/> returns the adjusted allocation that\nwas actually assigned to the widget. The adjusted allocation is\nguaranteed to be completely contained within the\n<span data-xref=\"Gtk.Widget.size_allocate\"/> allocation, however. So a <span data-xref=\"Gtk.Container\"/>\nis guaranteed that its children stay inside the assigned bounds,\nbut not that they have exactly the bounds the container assigned.\nThere is no way to get the original allocation assigned by\n<span data-xref=\"Gtk.Widget.size_allocate\"/>, since it isn\u2019t stored; if a container\nimplementation needs that information it will have to track it itself.</p>",
            "kind": "method",
            "name": "get_allocation",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "allocation",
                    "direction": "out",
                    "type": "Gtk.Allocation"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Gets the first ancestor of <code>widget</code> with type <code>widget_type</code>. For example,\n<code>gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)</code> gets\nthe first <span data-xref=\"Gtk.Box\"/> that\u2019s an ancestor of <code>widget</code>. No reference will be\nadded to the returned widget; it should not be unreferenced. See note\nabout checking for a toplevel <span data-xref=\"Gtk.Window\"/> in the docs for\n<span data-xref=\"Gtk.Widget.get_toplevel\"/>.</p><p>Note that unlike <span data-xref=\"Gtk.Widget.is_ancestor\"/>, <span data-xref=\"Gtk.Widget.get_ancestor\"/>\nconsiders <code>widget</code> to be an ancestor of itself.</p>",
            "kind": "method",
            "name": "get_ancestor",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "widget_type",
                    "direction": "in",
                    "type": "GObject.Type"
                }
            ],
            "retval": {
                "type": "Gtk.Widget"
            }
        },
        {
            "doc": "<p>Determines whether the application intends to draw on the widget in\nan <span data-xref=\"Gtk.Widget-draw\"/> handler.</p><p>See <span data-xref=\"Gtk.Widget.set_app_paintable\"/></p>",
            "kind": "method",
            "name": "get_app_paintable",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Determines whether <code>widget</code> can be a default widget. See\n<span data-xref=\"Gtk.Widget.set_can_default\"/>.</p>",
            "kind": "method",
            "name": "get_can_default",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Determines whether <code>widget</code> can own the input focus. See\n<span data-xref=\"Gtk.Widget.set_can_focus\"/>.</p>",
            "kind": "method",
            "name": "get_can_focus",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>This function is only for use in widget implementations. Obtains\n<code>widget</code>-&gt;requisition, unless someone has forced a particular\ngeometry on the widget (e.g. with <span data-xref=\"Gtk.Widget.set_size_request\"/>),\nin which case it returns that geometry instead of the widget's\nrequisition.</p><p>This function differs from <span data-xref=\"Gtk.Widget.size_request\"/> in that\nit retrieves the last size request value from <code>widget</code>-&gt;requisition,\nwhile <span data-xref=\"Gtk.Widget.size_request\"/> actually calls the \"size_request\" method\non <code>widget</code> to compute the size request and fill in <code>widget</code>-&gt;requisition,\nand only then returns <code>widget</code>-&gt;requisition.</p><p>Because this function does not call the \u201csize_request\u201d method, it\ncan only be used when you know that <code>widget</code>-&gt;requisition is\nup-to-date, that is, <span data-xref=\"Gtk.Widget.size_request\"/> has been called\nsince the last time a resize was queued. In general, only container\nimplementations have this information; applications should use\n<span data-xref=\"Gtk.Widget.size_request\"/>.</p>",
            "kind": "method",
            "name": "get_child_requisition",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "requisition",
                    "direction": "out",
                    "type": "Gtk.Requisition"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Gets the value set with <span data-xref=\"Gtk.Widget.set_child_visible\"/>.\nIf you feel a need to use this function, your code probably\nneeds reorganization.</p><p>This function is only useful for container implementations and\nnever should be called by an application.</p>",
            "kind": "method",
            "name": "get_child_visible",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Returns the clipboard object for the given selection to\nbe used with <code>widget</code>. <code>widget</code> must have a <span data-xref=\"Gdk.Display\">Gdk.Display</span>\nassociated with it, so must be attached to a toplevel\nwindow.</p>",
            "kind": "method",
            "name": "get_clipboard",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "selection",
                    "direction": "in",
                    "type": "Gdk.Atom"
                }
            ],
            "retval": {
                "type": "Gtk.Clipboard"
            }
        },
        {
            "doc": "<p>Obtains the composite name of a widget.</p>",
            "kind": "method",
            "name": "get_composite_name",
            "parameters": [],
            "retval": {
                "type": "String"
            }
        },
        {
            "doc": "<p>Returns whether <code>device</code> can interact with <code>widget</code> and its\nchildren. See <span data-xref=\"Gtk.Widget.set_device_enabled\"/>.</p>",
            "kind": "method",
            "name": "get_device_enabled",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "device",
                    "direction": "in",
                    "type": "Gdk.Device"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Returns the events mask for the widget corresponding to an specific device. These\nare the events that the widget will receive when <code>device</code> operates on it.</p>",
            "kind": "method",
            "name": "get_device_events",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "device",
                    "direction": "in",
                    "type": "Gdk.Device"
                }
            ],
            "retval": {
                "type": "Gdk.EventMask"
            }
        },
        {
            "doc": "<p>Gets the reading direction for a particular widget. See\n<span data-xref=\"Gtk.Widget.set_direction\"/>.</p>",
            "kind": "method",
            "name": "get_direction",
            "parameters": [],
            "retval": {
                "type": "Gtk.TextDirection"
            }
        },
        {
            "doc": "<p>Get the <span data-xref=\"Gdk.Display\">Gdk.Display</span> for the toplevel window associated with\nthis widget. This function can only be called after the widget\nhas been added to a widget hierarchy with a <span data-xref=\"Gtk.Window\"/> at the top.</p><p>In general, you should only create display specific\nresources when a widget has been realized, and you should\nfree those resources when the widget is unrealized.</p>",
            "kind": "method",
            "name": "get_display",
            "parameters": [],
            "retval": {
                "type": "Gdk.Display"
            }
        },
        {
            "doc": "<p>Determines whether the widget is double buffered.</p><p>See <span data-xref=\"Gtk.Widget.set_double_buffered\"/></p>",
            "kind": "method",
            "name": "get_double_buffered",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Returns the event mask for the widget (a bitfield containing flags\nfrom the <span data-xref=\"Gdk.EventMask\">Gdk.EventMask</span> enumeration). These are the events that the widget\nwill receive.</p>",
            "kind": "method",
            "name": "get_events",
            "parameters": [],
            "retval": {
                "type": "Number(gint)"
            }
        },
        {
            "doc": "<p>Obtains the frame clock for a widget. The frame clock is a global\n\u201cticker\u201d that can be used to drive animations and repaints.  The\nmost common reason to get the frame clock is to call\n<span data-xref=\"Gdk.FrameClock.get_frame_time\">Gdk.FrameClock.prototype.get_frame_time</span>, in order to get a time to use for\nanimating. For example you might record the start of the animation\nwith an initial value from <span data-xref=\"Gdk.FrameClock.get_frame_time\">Gdk.FrameClock.prototype.get_frame_time</span>, and\nthen update the animation by calling\n<span data-xref=\"Gdk.FrameClock.get_frame_time\">Gdk.FrameClock.prototype.get_frame_time</span> again during each repaint.</p><p><span data-xref=\"Gdk.FrameClock.request_phase\">Gdk.FrameClock.prototype.request_phase</span> will result in a new frame on the\nclock, but won\u2019t necessarily repaint any widgets. To repaint a\nwidget, you have to use <span data-xref=\"Gtk.Widget.queue_draw\"/> which invalidates\nthe widget (thus scheduling it to receive a draw on the next\nframe). <span data-xref=\"Gtk.Widget.queue_draw\"/> will also end up requesting a frame\non the appropriate frame clock.</p><p>A widget\u2019s frame clock will not change while the widget is\nmapped. Reparenting a widget (which implies a temporary unmap) can\nchange the widget\u2019s frame clock.</p><p>Unrealized widgets do not have a frame clock.</p>",
            "kind": "method",
            "name": "get_frame_clock",
            "parameters": [],
            "retval": {
                "type": "Gdk.FrameClock"
            }
        },
        {
            "doc": "<p>Gets the value of the <span data-xref=\"Gtk.Widget-halign\"/> property.</p><p>For backwards compatibility reasons this method will never return\n<span data-xref=\"Gtk.Align\"/>.baseline, but instead it will convert it to\n<span data-xref=\"Gtk.Align\"/>.fill. Baselines are not supported for horizontal\nalignment.</p>",
            "kind": "method",
            "name": "get_halign",
            "parameters": [],
            "retval": {
                "type": "Gtk.Align"
            }
        },
        {
            "doc": "<p>Returns the current value of the has-tooltip property.  See\n<span data-xref=\"Gtk.Widget-has-tooltip\"/> for more information.</p>",
            "kind": "method",
            "name": "get_has_tooltip",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Determines whether <code>widget</code> has a <span data-xref=\"Gdk.Window\">Gdk.Window</span> of its own. See\n<span data-xref=\"Gtk.Widget.set_has_window\"/>.</p>",
            "kind": "method",
            "name": "get_has_window",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Gets whether the widget would like any available extra horizontal\nspace. When a user resizes a <span data-xref=\"Gtk.Window\"/>, widgets with expand=TRUE\ngenerally receive the extra space. For example, a list or\nscrollable area or document in your window would often be set to\nexpand.</p><p>Containers should use <span data-xref=\"Gtk.Widget.compute_expand\"/> rather than\nthis function, to see whether a widget, or any of its children,\nhas the expand flag set. If any child of a widget wants to\nexpand, the parent may ask to expand also.</p><p>This function only looks at the widget\u2019s own hexpand flag, rather\nthan computing whether the entire widget tree rooted at this widget\nwants to expand.</p>",
            "kind": "method",
            "name": "get_hexpand",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Gets whether <span data-xref=\"Gtk.Widget.set_hexpand\"/> has been used to\nexplicitly set the expand flag on this widget.</p><p>If hexpand is set, then it overrides any computed\nexpand value based on child widgets. If hexpand is not\nset, then the expand value depends on whether any\nchildren of the widget would like to expand.</p><p>There are few reasons to use this function, but it\u2019s here\nfor completeness and consistency.</p>",
            "kind": "method",
            "name": "get_hexpand_set",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Whether the widget is mapped.</p>",
            "kind": "method",
            "name": "get_mapped",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Gets the value of the <span data-xref=\"Gtk.Widget-margin-bottom\"/> property.</p>",
            "kind": "method",
            "name": "get_margin_bottom",
            "parameters": [],
            "retval": {
                "type": "Number(gint)"
            }
        },
        {
            "doc": "<p>Gets the value of the <span data-xref=\"Gtk.Widget-margin-end\"/> property.</p>",
            "kind": "method",
            "name": "get_margin_end",
            "parameters": [],
            "retval": {
                "type": "Number(gint)"
            }
        },
        {
            "doc": "<p>Gets the value of the <span data-xref=\"Gtk.Widget-margin-left\"/> property.</p>",
            "kind": "method",
            "name": "get_margin_left",
            "parameters": [],
            "retval": {
                "type": "Number(gint)"
            }
        },
        {
            "doc": "<p>Gets the value of the <span data-xref=\"Gtk.Widget-margin-right\"/> property.</p>",
            "kind": "method",
            "name": "get_margin_right",
            "parameters": [],
            "retval": {
                "type": "Number(gint)"
            }
        },
        {
            "doc": "<p>Gets the value of the <span data-xref=\"Gtk.Widget-margin-start\"/> property.</p>",
            "kind": "method",
            "name": "get_margin_start",
            "parameters": [],
            "retval": {
                "type": "Number(gint)"
            }
        },
        {
            "doc": "<p>Gets the value of the <span data-xref=\"Gtk.Widget-margin-top\"/> property.</p>",
            "kind": "method",
            "name": "get_margin_top",
            "parameters": [],
            "retval": {
                "type": "Number(gint)"
            }
        },
        {
            "doc": "<p>Returns the modifier mask the <code>widget</code>\u2019s windowing system backend\nuses for a particular purpose.</p><p>See <span data-xref=\"Gdk.Keymap.get_modifier_mask\">Gdk.Keymap.prototype.get_modifier_mask</span>.</p>",
            "kind": "method",
            "name": "get_modifier_mask",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "intent",
                    "direction": "in",
                    "type": "Gdk.ModifierIntent"
                }
            ],
            "retval": {
                "type": "Gdk.ModifierType"
            }
        },
        {
            "doc": "<p>Returns the current modifier style for the widget. (As set by\n<span data-xref=\"Gtk.Widget.modify_style\"/>.) If no style has previously set, a new\n<span data-xref=\"Gtk.RcStyle\"/> will be created with all values unset, and set as the\nmodifier style for the widget. If you make changes to this rc\nstyle, you must call <span data-xref=\"Gtk.Widget.modify_style\"/>, passing in the\nreturned rc style, to make sure that your changes take effect.</p><p>Caution: passing the style back to <span data-xref=\"Gtk.Widget.modify_style\"/> will\nnormally end up destroying it, because <span data-xref=\"Gtk.Widget.modify_style\"/> copies\nthe passed-in style and sets the copy as the new modifier style,\nthus dropping any reference to the old modifier style. Add a reference\nto the modifier style if you want to keep it alive.</p>",
            "kind": "method",
            "name": "get_modifier_style",
            "parameters": [],
            "retval": {
                "type": "Gtk.RcStyle"
            }
        },
        {
            "doc": "<p>Retrieves the name of a widget. See <span data-xref=\"Gtk.Widget.set_name\"/> for the\nsignificance of widget names.</p>",
            "kind": "method",
            "name": "get_name",
            "parameters": [],
            "retval": {
                "type": "String"
            }
        },
        {
            "doc": "<p>Returns the current value of the <span data-xref=\"Gtk.Widget-no-show-all\"/> property,\nwhich determines whether calls to <span data-xref=\"Gtk.Widget.show_all\"/>\nwill affect this widget.</p>",
            "kind": "method",
            "name": "get_no_show_all",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Fetches the requested opacity for this widget. See\n<span data-xref=\"Gtk.Widget.set_opacity\"/>.</p>",
            "kind": "method",
            "name": "get_opacity",
            "parameters": [],
            "retval": {
                "type": "Number(gdouble)"
            }
        },
        {
            "doc": "<p>Gets a <span data-xref=\"Pango.Context\">Pango.Context</span> with the appropriate font map, font description,\nand base direction for this widget. Unlike the context returned\nby <span data-xref=\"Gtk.Widget.create_pango_context\"/>, this context is owned by\nthe widget (it can be used until the screen for the widget changes\nor the widget is removed from its toplevel), and will be updated to\nmatch any changes to the widget\u2019s attributes. This can be tracked\nby using the <span data-xref=\"Gtk.Widget-screen-changed\"/> signal on the widget.</p>",
            "kind": "method",
            "name": "get_pango_context",
            "parameters": [],
            "retval": {
                "type": "Pango.Context"
            }
        },
        {
            "doc": "<p>Returns the parent container of <code>widget</code>.</p>",
            "kind": "method",
            "name": "get_parent",
            "parameters": [],
            "retval": {
                "type": "Gtk.Widget"
            }
        },
        {
            "doc": "<p>Gets <code>widget</code>\u2019s parent window.</p>",
            "kind": "method",
            "name": "get_parent_window",
            "parameters": [],
            "retval": {
                "type": "Gdk.Window"
            }
        },
        {
            "doc": "<p>Returns the <span data-xref=\"Gtk.WidgetPath\"/> representing <code>widget</code>, if the widget\nis not connected to a toplevel widget, a partial path will be\ncreated.</p>",
            "kind": "method",
            "name": "get_path",
            "parameters": [],
            "retval": {
                "type": "Gtk.WidgetPath"
            }
        },
        {
            "doc": "<p>Obtains the location of the mouse pointer in widget coordinates.\nWidget coordinates are a bit odd; for historical reasons, they are\ndefined as <code>widget</code>-&gt;window coordinates for widgets that are not</p>\n<h1>GTK_NO_WINDOW widgets, and are relative to <code>widget</code>-&gt;allocation.x,</h1>\n<p><code>widget</code>-&gt;allocation.y for widgets that are #GTK_NO_WINDOW widgets.</p>",
            "kind": "method",
            "name": "get_pointer",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "x",
                    "direction": "out",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": true,
                    "argname": "y",
                    "direction": "out",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Retrieves a widget\u2019s initial minimum and natural height.</p><p>This call is specific to width-for-height requests.</p><p>The returned request will be modified by the\nGtkWidgetClass::adjust_size_request virtual method and by any</p>\n<h1>GtkSizeGroups that have been applied. That is, the returned request</h1>\n<p>is the one that should be used for layout, not necessarily the one\nreturned by the widget itself.</p>",
            "kind": "method",
            "name": "get_preferred_height",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "minimum_height",
                    "direction": "out",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": true,
                    "argname": "natural_height",
                    "direction": "out",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Retrieves a widget\u2019s minimum and natural height and the corresponding baselines if it would be given\nthe specified <code>width</code>, or the default height if <code>width</code> is -1. The baselines may be -1 which means\nthat no baseline is requested for this widget.</p><p>The returned request will be modified by the\nGtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods\nand by any #GtkSizeGroups that have been applied. That is, the returned request\nis the one that should be used for layout, not necessarily the one\nreturned by the widget itself.</p>",
            "kind": "method",
            "name": "get_preferred_height_and_baseline_for_width",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "width",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": true,
                    "argname": "minimum_height",
                    "direction": "out",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": true,
                    "argname": "natural_height",
                    "direction": "out",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": true,
                    "argname": "minimum_baseline",
                    "direction": "out",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": true,
                    "argname": "natural_baseline",
                    "direction": "out",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Retrieves a widget\u2019s minimum and natural height if it would be given\nthe specified <code>width</code>.</p><p>The returned request will be modified by the\nGtkWidgetClass::adjust_size_request virtual method and by any</p>\n<h1>GtkSizeGroups that have been applied. That is, the returned request</h1>\n<p>is the one that should be used for layout, not necessarily the one\nreturned by the widget itself.</p>",
            "kind": "method",
            "name": "get_preferred_height_for_width",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "width",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": true,
                    "argname": "minimum_height",
                    "direction": "out",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": true,
                    "argname": "natural_height",
                    "direction": "out",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Retrieves the minimum and natural size of a widget, taking\ninto account the widget\u2019s preference for height-for-width management.</p><p>This is used to retrieve a suitable size by container widgets which do\nnot impose any restrictions on the child placement. It can be used\nto deduce toplevel window and menu sizes as well as child widgets in\nfree-form containers such as GtkLayout.</p><p>Handle with care. Note that the natural height of a height-for-width\nwidget will generally be a smaller size than the minimum height, since the required\nheight for the natural width is generally smaller than the required height for\nthe minimum width.</p><p>Use <span data-xref=\"Gtk.Widget.get_preferred_height_and_baseline_for_width\"/> if you want to support\nbaseline alignment.</p>",
            "kind": "method",
            "name": "get_preferred_size",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "minimum_size",
                    "direction": "out",
                    "type": "Gtk.Requisition"
                },
                {
                    "allow_none": true,
                    "argname": "natural_size",
                    "direction": "out",
                    "type": "Gtk.Requisition"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Retrieves a widget\u2019s initial minimum and natural width.</p><p>This call is specific to height-for-width requests.</p><p>The returned request will be modified by the\nGtkWidgetClass::adjust_size_request virtual method and by any</p>\n<h1>GtkSizeGroups that have been applied. That is, the returned request</h1>\n<p>is the one that should be used for layout, not necessarily the one\nreturned by the widget itself.</p>",
            "kind": "method",
            "name": "get_preferred_width",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "minimum_width",
                    "direction": "out",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": true,
                    "argname": "natural_width",
                    "direction": "out",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Retrieves a widget\u2019s minimum and natural width if it would be given\nthe specified <code>height</code>.</p><p>The returned request will be modified by the\nGtkWidgetClass::adjust_size_request virtual method and by any</p>\n<h1>GtkSizeGroups that have been applied. That is, the returned request</h1>\n<p>is the one that should be used for layout, not necessarily the one\nreturned by the widget itself.</p>",
            "kind": "method",
            "name": "get_preferred_width_for_height",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "height",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": true,
                    "argname": "minimum_width",
                    "direction": "out",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": true,
                    "argname": "natural_width",
                    "direction": "out",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Determines whether <code>widget</code> is realized.</p>",
            "kind": "method",
            "name": "get_realized",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Determines whether <code>widget</code> is always treated as the default widget\nwithin its toplevel when it has the focus, even if another widget\nis the default.</p><p>See <span data-xref=\"Gtk.Widget.set_receives_default\"/>.</p>",
            "kind": "method",
            "name": "get_receives_default",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Gets whether the widget prefers a height-for-width layout\nor a width-for-height layout.</p><p><span data-xref=\"Gtk.Bin\"/> widgets generally propagate the preference of\ntheir child, container widgets need to request something either in\ncontext of their children or in context of their allocation\ncapabilities.</p>",
            "kind": "method",
            "name": "get_request_mode",
            "parameters": [],
            "retval": {
                "type": "Gtk.SizeRequestMode"
            }
        },
        {
            "doc": "<p>Retrieves the widget\u2019s requisition.</p><p>This function should only be used by widget implementations in\norder to figure whether the widget\u2019s requisition has actually\nchanged after some internal state change (so that they can call\n<span data-xref=\"Gtk.Widget.queue_resize\"/> instead of <span data-xref=\"Gtk.Widget.queue_draw\"/>).</p><p>Normally, <span data-xref=\"Gtk.Widget.size_request\"/> should be used.</p>",
            "kind": "method",
            "name": "get_requisition",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "requisition",
                    "direction": "out",
                    "type": "Gtk.Requisition"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Get the root window where this widget is located. This function can\nonly be called after the widget has been added to a widget\nhierarchy with <span data-xref=\"Gtk.Window\"/> at the top.</p><p>The root window is useful for such purposes as creating a popup\n<span data-xref=\"Gdk.Window\">Gdk.Window</span> associated with the window. In general, you should only\ncreate display specific resources when a widget has been realized,\nand you should free those resources when the widget is unrealized.</p>",
            "kind": "method",
            "name": "get_root_window",
            "parameters": [],
            "retval": {
                "type": "Gdk.Window"
            }
        },
        {
            "doc": "<p>Retrieves the internal scale factor that maps from window coordinates\nto the actual device pixels. On traditional systems this is 1, on\nhigh density outputs, it can be a higher value (typically 2).</p><p>See <span data-xref=\"Gdk.Window.get_scale_factor\">Gdk.Window.prototype.get_scale_factor</span>.</p>",
            "kind": "method",
            "name": "get_scale_factor",
            "parameters": [],
            "retval": {
                "type": "Number(gint)"
            }
        },
        {
            "doc": "<p>Get the <span data-xref=\"Gdk.Screen\">Gdk.Screen</span> from the toplevel window associated with\nthis widget. This function can only be called after the widget\nhas been added to a widget hierarchy with a <span data-xref=\"Gtk.Window\"/>\nat the top.</p><p>In general, you should only create screen specific\nresources when a widget has been realized, and you should\nfree those resources when the widget is unrealized.</p>",
            "kind": "method",
            "name": "get_screen",
            "parameters": [],
            "retval": {
                "type": "Gdk.Screen"
            }
        },
        {
            "doc": "<p>Returns the widget\u2019s sensitivity (in the sense of returning\nthe value that has been set using <span data-xref=\"Gtk.Widget.set_sensitive\"/>).</p><p>The effective sensitivity of a widget is however determined by both its\nown and its parent widget\u2019s sensitivity. See <span data-xref=\"Gtk.Widget.is_sensitive\"/>.</p>",
            "kind": "method",
            "name": "get_sensitive",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Gets the settings object holding the settings used for this widget.</p><p>Note that this function can only be called when the <span data-xref=\"Gtk.Widget\"/>\nis attached to a toplevel, since the settings object is specific\nto a particular <span data-xref=\"Gdk.Screen\">Gdk.Screen</span>.</p>",
            "kind": "method",
            "name": "get_settings",
            "parameters": [],
            "retval": {
                "type": "Gtk.Settings"
            }
        },
        {
            "doc": "<p>Gets the size request that was explicitly set for the widget using\n<span data-xref=\"Gtk.Widget.set_size_request\"/>. A value of -1 stored in <code>width</code> or\n<code>height</code> indicates that that dimension has not been set explicitly\nand the natural requisition of the widget will be used intead. See\n<span data-xref=\"Gtk.Widget.set_size_request\"/>. To get the size a widget will\nactually request, call <span data-xref=\"Gtk.Widget.get_preferred_size\"/> instead of\nthis function.</p>",
            "kind": "method",
            "name": "get_size_request",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "width",
                    "direction": "out",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": true,
                    "argname": "height",
                    "direction": "out",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Returns the widget\u2019s state. See <span data-xref=\"Gtk.Widget.set_state\"/>.</p>",
            "kind": "method",
            "name": "get_state",
            "parameters": [],
            "retval": {
                "type": "Gtk.StateType"
            }
        },
        {
            "doc": "<p>Returns the widget state as a flag set. It is worth mentioning\nthat the effective <span data-xref=\"Gtk.StateFlags\"/>.insensitive state will be\nreturned, that is, also based on parent insensitivity, even if\n<code>widget</code> itself is sensitive.</p>",
            "kind": "method",
            "name": "get_state_flags",
            "parameters": [],
            "retval": {
                "type": "Gtk.StateFlags"
            }
        },
        {
            "doc": "<p>Simply an accessor function that returns <code>widget</code>-&gt;style.</p>",
            "kind": "method",
            "name": "get_style",
            "parameters": [],
            "retval": {
                "type": "Gtk.Style"
            }
        },
        {
            "doc": "<p>Returns the style context associated to <code>widget</code>.</p>",
            "kind": "method",
            "name": "get_style_context",
            "parameters": [],
            "retval": {
                "type": "Gtk.StyleContext"
            }
        },
        {
            "doc": "<p>Returns <code>true</code> if <code>widget</code> is multiple pointer aware. See\n<span data-xref=\"Gtk.Widget.set_support_multidevice\"/> for more information.</p>",
            "kind": "method",
            "name": "get_support_multidevice",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Fetch an object build from the template XML for <code>widget_type</code> in this <code>widget</code> instance.</p><p>This will only report children which were previously declared with\n<span data-xref=\"Gtk.WidgetClass.bind_template_child_full\"/> or one of its\nvariants.</p><p>This function is only meant to be called for code which is private to the <code>widget_type</code> which\ndeclared the child and is meant for language bindings which cannot easily make use\nof the GObject structure offsets.</p>",
            "kind": "method",
            "name": "get_template_child",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "widget_type",
                    "direction": "in",
                    "type": "GObject.Type"
                },
                {
                    "allow_none": false,
                    "argname": "name",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "GObject.Object"
            }
        },
        {
            "doc": "<p>Gets the contents of the tooltip for <code>widget</code>.</p>",
            "kind": "method",
            "name": "get_tooltip_markup",
            "parameters": [],
            "retval": {
                "type": "String"
            }
        },
        {
            "doc": "<p>Gets the contents of the tooltip for <code>widget</code>.</p>",
            "kind": "method",
            "name": "get_tooltip_text",
            "parameters": [],
            "retval": {
                "type": "String"
            }
        },
        {
            "doc": "<p>Returns the <span data-xref=\"Gtk.Window\"/> of the current tooltip. This can be the\nGtkWindow created by default, or the custom tooltip window set\nusing <span data-xref=\"Gtk.Widget.set_tooltip_window\"/>.</p>",
            "kind": "method",
            "name": "get_tooltip_window",
            "parameters": [],
            "retval": {
                "type": "Gtk.Window"
            }
        },
        {
            "doc": "<p>This function returns the topmost widget in the container hierarchy\n<code>widget</code> is a part of. If <code>widget</code> has no parent widgets, it will be\nreturned as the topmost widget. No reference will be added to the\nreturned widget; it should not be unreferenced.</p><p>Note the difference in behavior vs. <span data-xref=\"Gtk.Widget.get_ancestor\"/>;\n<code>gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)</code>\nwould return\n<code>null</code> if <code>widget</code> wasn\u2019t inside a toplevel window, and if the\nwindow was inside a <span data-xref=\"Gtk.Window\"/>-derived widget which was in turn\ninside the toplevel <span data-xref=\"Gtk.Window\"/>. While the second case may\nseem unlikely, it actually happens when a <span data-xref=\"Gtk.Plug\"/> is embedded\ninside a <span data-xref=\"Gtk.Socket\"/> within the same application.</p><p>To reliably find the toplevel <span data-xref=\"Gtk.Window\"/>, use\n<span data-xref=\"Gtk.Widget.get_toplevel\"/> and call <span data-xref=\"Gtk.Widget.is_toplevel\"/>\non the result.\n|[&lt;!-- language=\"C\" --&gt;\n GtkWidget *toplevel = gtk_widget_get_toplevel (widget);\n if (gtk_widget_is_toplevel (toplevel))\n   {\n     // Perform action on toplevel.\n   }\n]|</p>",
            "kind": "method",
            "name": "get_toplevel",
            "parameters": [],
            "retval": {
                "type": "Gtk.Widget"
            }
        },
        {
            "doc": "<p>Gets the value of the <span data-xref=\"Gtk.Widget-valign\"/> property.</p><p>For backwards compatibility reasons this method will never return\n<span data-xref=\"Gtk.Align\"/>.baseline, but instead it will convert it to\n<span data-xref=\"Gtk.Align\"/>.fill. If your widget want to support baseline aligned\nchildren it must use <span data-xref=\"Gtk.Widget.get_valign_with_baseline\"/>.</p>",
            "kind": "method",
            "name": "get_valign",
            "parameters": [],
            "retval": {
                "type": "Gtk.Align"
            }
        },
        {
            "doc": "<p>Gets the value of the <span data-xref=\"Gtk.Widget-valign\"/> property, including\n<span data-xref=\"Gtk.Align\"/>.baseline.</p>",
            "kind": "method",
            "name": "get_valign_with_baseline",
            "parameters": [],
            "retval": {
                "type": "Gtk.Align"
            }
        },
        {
            "doc": "<p>Gets whether the widget would like any available extra vertical\nspace.</p><p>See <span data-xref=\"Gtk.Widget.get_hexpand\"/> for more detail.</p>",
            "kind": "method",
            "name": "get_vexpand",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Gets whether <span data-xref=\"Gtk.Widget.set_vexpand\"/> has been used to\nexplicitly set the expand flag on this widget.</p><p>See <span data-xref=\"Gtk.Widget.get_hexpand_set\"/> for more detail.</p>",
            "kind": "method",
            "name": "get_vexpand_set",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Determines whether the widget is visible. If you want to\ntake into account whether the widget\u2019s parent is also marked as\nvisible, use <span data-xref=\"Gtk.Widget.is_visible\"/> instead.</p><p>This function does not check if the widget is obscured in any way.</p><p>See <span data-xref=\"Gtk.Widget.set_visible\"/>.</p>",
            "kind": "method",
            "name": "get_visible",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Gets the visual that will be used to render <code>widget</code>.</p>",
            "kind": "method",
            "name": "get_visual",
            "parameters": [],
            "retval": {
                "type": "Gdk.Visual"
            }
        },
        {
            "doc": "<p>Returns the widget\u2019s window if it is realized, <code>null</code> otherwise</p>",
            "kind": "method",
            "name": "get_window",
            "parameters": [],
            "retval": {
                "type": "Gdk.Window"
            }
        },
        {
            "doc": "<p>Makes <code>widget</code> the current grabbed widget.</p><p>This means that interaction with other widgets in the same\napplication is blocked and mouse as well as keyboard events\nare delivered to this widget.</p><p>If <code>widget</code> is not sensitive, it is not set as the current\ngrabbed widget and this function does nothing.</p>",
            "kind": "method",
            "name": "grab_add",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Causes <code>widget</code> to become the default widget. <code>widget</code> must be able to be\na default widget; typically you would ensure this yourself\nby calling <span data-xref=\"Gtk.Widget.set_can_default\"/> with a <code>true</code> value.\nThe default widget is activated when\nthe user presses Enter in a window. Default widgets must be\nactivatable, that is, <span data-xref=\"Gtk.Widget.activate\"/> should affect them. Note\nthat <span data-xref=\"Gtk.Entry\"/> widgets require the \u201cactivates-default\u201d property\nset to <code>true</code> before they activate the default widget when Enter\nis pressed and the <span data-xref=\"Gtk.Entry\"/> is focused.</p>",
            "kind": "method",
            "name": "grab_default",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Causes <code>widget</code> to have the keyboard focus for the <span data-xref=\"Gtk.Window\"/> it's\ninside. <code>widget</code> must be a focusable widget, such as a <span data-xref=\"Gtk.Entry\"/>;\nsomething like <span data-xref=\"Gtk.Frame\"/> won\u2019t work.</p><p>More precisely, it must have the %GTK_CAN_FOCUS flag set. Use\n<span data-xref=\"Gtk.Widget.set_can_focus\"/> to modify that flag.</p><p>The widget also needs to be realized and mapped. This is indicated by the\nrelated signals. Grabbing the focus immediately after creating the widget\nwill likely fail and cause critical warnings.</p>",
            "kind": "method",
            "name": "grab_focus",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Removes the grab from the given widget.</p><p>You have to pair calls to <span data-xref=\"Gtk.Widget.grab_add\"/> and <span data-xref=\"Gtk.Widget.grab_remove\"/>.</p><p>If <code>widget</code> does not have the grab, this function does nothing.</p>",
            "kind": "method",
            "name": "grab_remove",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Determines whether <code>widget</code> is the current default widget within its\ntoplevel. See <span data-xref=\"Gtk.Widget.set_can_default\"/>.</p>",
            "kind": "method",
            "name": "has_default",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Determines if the widget has the global input focus. See\n<span data-xref=\"Gtk.Widget.is_focus\"/> for the difference between having the global\ninput focus, and only having the focus within a toplevel.</p>",
            "kind": "method",
            "name": "has_focus",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Determines whether the widget is currently grabbing events, so it\nis the only widget receiving input events (keyboard and mouse).</p><p>See also <span data-xref=\"Gtk.Widget.grab_add\"/>.</p>",
            "kind": "method",
            "name": "has_grab",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Determines if the widget style has been looked up through the rc mechanism.</p>",
            "kind": "method",
            "name": "has_rc_style",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Checks whether there is a <span data-xref=\"Gdk.Screen\">Gdk.Screen</span> is associated with\nthis widget. All toplevel widgets have an associated\nscreen, and all widgets added into a hierarchy with a toplevel\nwindow at the top.</p>",
            "kind": "method",
            "name": "has_screen",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Determines if the widget should show a visible indication that\nit has the global input focus. This is a convenience function for\nuse in ::draw handlers that takes into account whether focus\nindication should currently be shown in the toplevel window of\n<code>widget</code>. See <span data-xref=\"Gtk.Window.get_focus_visible\"/> for more information\nabout focus indication.</p><p>To find out if the widget has the global input focus, use\n<span data-xref=\"Gtk.Widget.has_focus\"/>.</p>",
            "kind": "method",
            "name": "has_visible_focus",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Reverses the effects of <span data-xref=\"Gtk.Widget.show\"/>, causing the widget to be\nhidden (invisible to the user).</p>",
            "kind": "method",
            "name": "hide",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Utility function; intended to be connected to the <span data-xref=\"Gtk.Widget-delete-event\"/>\nsignal on a <span data-xref=\"Gtk.Window\"/>. The function calls <span data-xref=\"Gtk.Widget.hide\"/> on its\nargument, then returns <code>true</code>. If connected to ::delete-event, the\nresult is that clicking the close button for a window (on the\nwindow frame, top right corner usually) will hide but not destroy\nthe window. By default, GTK+ destroys windows when ::delete-event\nis received.</p>",
            "kind": "method",
            "name": "hide_on_delete",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Returns whether the widget is currently being destroyed.\nThis information can sometimes be used to avoid doing\nunnecessary work.</p>",
            "kind": "method",
            "name": "in_destruction",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Creates and initializes child widgets defined in templates. This\nfunction must be called in the instance initializer for any\nclass which assigned itself a template using <span data-xref=\"Gtk.WidgetClass.set_template\"/></p><p>It is important to call this function in the instance initializer\nof a <span data-xref=\"Gtk.Widget\"/> subclass and not in <span data-xref=\"GObject.Object\">GObject.Object</span>.constructed() or\n<span data-xref=\"GObject.Object\">GObject.Object</span>.constructor() for two reasons.</p><p>One reason is that generally derived widgets will assume that parent\nclass composite widgets have been created in their instance\ninitializers.</p><p>Another reason is that when calling <span data-xref=\"GObject.Object.new\">GObject.Object.new</span> on a widget with\ncomposite templates, it\u2019s important to build the composite widgets\nbefore the construct properties are set. Properties passed to <span data-xref=\"GObject.Object.new\">GObject.Object.new</span>\nshould take precedence over properties set in the private template XML.</p>",
            "kind": "method",
            "name": "init_template",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets an input shape for this widget\u2019s GDK window. This allows for\nwindows which react to mouse click in a nonrectangular region, see\n<span data-xref=\"Gdk.Window.input_shape_combine_region\">Gdk.Window.prototype.input_shape_combine_region</span> for more information.</p>",
            "kind": "method",
            "name": "input_shape_combine_region",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "region",
                    "direction": "in",
                    "type": "cairo.Region"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Inserts <code>group</code> into <code>widget</code>. Children of <code>widget</code> that implement\n<span data-xref=\"Gtk.Actionable\"/> can then be associated with actions in <code>group</code> by\nsetting their \u201caction-name\u201d to\n@prefix.<code>action-name</code>.</p><p>If <code>group</code> is <code>null</code>, a previously inserted group for <code>name</code> is removed\nfrom <code>widget</code>.</p>",
            "kind": "method",
            "name": "insert_action_group",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "name",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": true,
                    "argname": "group",
                    "direction": "in",
                    "type": "Gio.ActionGroup"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Computes the intersection of a <code>widget</code>\u2019s area and <code>area</code>, storing\nthe intersection in <code>intersection</code>, and returns <code>true</code> if there was\nan intersection.  <code>intersection</code> may be <code>null</code> if you\u2019re only\ninterested in whether there was an intersection.</p>",
            "kind": "method",
            "name": "intersect",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "area",
                    "direction": "in",
                    "type": "Gdk.Rectangle"
                },
                {
                    "allow_none": false,
                    "argname": "intersection",
                    "direction": "in",
                    "type": "Gdk.Rectangle"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Determines whether <code>widget</code> is somewhere inside <code>ancestor</code>, possibly with\nintermediate containers.</p>",
            "kind": "method",
            "name": "is_ancestor",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "ancestor",
                    "direction": "in",
                    "type": "Gtk.Widget"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Whether <code>widget</code> can rely on having its alpha channel\ndrawn correctly. On X11 this function returns whether a\ncompositing manager is running for <code>widget</code>\u2019s screen.</p><p>Please note that the semantics of this call will change\nin the future if used on a widget that has a composited\nwindow in its hierarchy (as set by <span data-xref=\"Gdk.Window.set_composited\">Gdk.Window.prototype.set_composited</span>).</p>",
            "kind": "method",
            "name": "is_composited",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Determines whether <code>widget</code> can be drawn to. A widget can be drawn\nto if it is mapped and visible.</p>",
            "kind": "method",
            "name": "is_drawable",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Determines if the widget is the focus widget within its\ntoplevel. (This does not mean that the <span data-xref=\"Gtk.Widget-has-focus\"/> property is\nnecessarily set; <span data-xref=\"Gtk.Widget-has-focus\"/> will only be set if the\ntoplevel widget additionally has the global input focus.)</p>",
            "kind": "method",
            "name": "is_focus",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Returns the widget\u2019s effective sensitivity, which means\nit is sensitive itself and also its parent widget is sensitive</p>",
            "kind": "method",
            "name": "is_sensitive",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Determines whether <code>widget</code> is a toplevel widget.</p><p>Currently only <span data-xref=\"Gtk.Window\"/> and <span data-xref=\"Gtk.Invisible\"/> (and out-of-process</p>\n<h1>GtkPlugs) are toplevel widgets. Toplevel widgets have no parent</h1>\n<p>widget.</p>",
            "kind": "method",
            "name": "is_toplevel",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Determines whether the widget and all its parents are marked as\nvisible.</p><p>This function does not check if the widget is obscured in any way.</p><p>See also <span data-xref=\"Gtk.Widget.get_visible\"/> and <span data-xref=\"Gtk.Widget.set_visible\"/></p>",
            "kind": "method",
            "name": "is_visible",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>This function should be called whenever keyboard navigation within\na single widget hits a boundary. The function emits the\n<span data-xref=\"Gtk.Widget-keynav-failed\"/> signal on the widget and its return\nvalue should be interpreted in a way similar to the return value of\n<span data-xref=\"Gtk.Widget.child_focus\"/>:</p><p>When <code>true</code> is returned, stay in the widget, the failed keyboard\nnavigation is Ok and/or there is nowhere we can/should move the\nfocus to.</p><p>When <code>false</code> is returned, the caller should continue with keyboard\nnavigation outside the widget, e.g. by calling\n<span data-xref=\"Gtk.Widget.child_focus\"/> on the widget\u2019s toplevel.</p><p>The default ::keynav-failed handler returns <code>true</code> for\n<span data-xref=\"Gtk.DirectionType\"/>.tab_forward and <span data-xref=\"Gtk.DirectionType\"/>.tab_backward. For the other\nvalues of <span data-xref=\"Gtk.DirectionType\"/> it returns <code>false</code>.</p><p>Whenever the default handler returns <code>true</code>, it also calls\n<span data-xref=\"Gtk.Widget.error_bell\"/> to notify the user of the failed keyboard\nnavigation.</p><p>A use case for providing an own implementation of ::keynav-failed\n(either by connecting to it or by overriding it) would be a row of\n<span data-xref=\"Gtk.Entry\"/> widgets where the user should be able to navigate the\nentire row with the cursor keys, as e.g. known from user interfaces\nthat require entering license keys.</p>",
            "kind": "method",
            "name": "keynav_failed",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "direction",
                    "direction": "in",
                    "type": "Gtk.DirectionType"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Lists the closures used by <code>widget</code> for accelerator group connections\nwith <span data-xref=\"Gtk.AccelGroup.connect_by_path\"/> or <span data-xref=\"Gtk.AccelGroup.connect\"/>.\nThe closures can be used to monitor accelerator changes on <code>widget</code>,\nby connecting to the @GtkAccelGroup::accel-changed signal of the\n<span data-xref=\"Gtk.AccelGroup\"/> of a closure which can be found out with\n<span data-xref=\"Gtk.AccelGroup.from_accel_closure\"/>.</p>",
            "kind": "method",
            "name": "list_accel_closures",
            "parameters": [],
            "retval": {
                "type": "Array(Function)"
            }
        },
        {
            "doc": "<p>Returns a newly allocated list of the widgets, normally labels, for\nwhich this widget is the target of a mnemonic (see for example,\n<span data-xref=\"Gtk.Label.set_mnemonic_widget\"/>).</p><p>The widgets in the list are not individually referenced. If you\nwant to iterate through the list and perform actions involving\ncallbacks that might destroy the widgets, you\nmust call <code>g_list_foreach (result,\n(GFunc)g_object_ref, NULL)</code> first, and then unref all the\nwidgets afterwards.</p>",
            "kind": "method",
            "name": "list_mnemonic_labels",
            "parameters": [],
            "retval": {
                "type": "Array(Gtk.Widget)"
            }
        },
        {
            "doc": "<p>This function is only for use in widget implementations. Causes\na widget to be mapped if it isn\u2019t already.</p>",
            "kind": "method",
            "name": "map",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Emits the <span data-xref=\"Gtk.Widget-mnemonic-activate\"/> signal.</p><p>The default handler for this signal activates the <code>widget</code> if\n<code>group_cycling</code> is <code>false</code>, and just grabs the focus if <code>group_cycling</code>\nis <code>true</code>.</p>",
            "kind": "method",
            "name": "mnemonic_activate",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "group_cycling",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Sets the base color for a widget in a particular state.\nAll other style values are left untouched. The base color\nis the background color used along with the text color\n(see <span data-xref=\"Gtk.Widget.modify_text\"/>) for widgets such as <span data-xref=\"Gtk.Entry\"/>\nand <span data-xref=\"Gtk.TextView\"/>. See also <span data-xref=\"Gtk.Widget.modify_style\"/>.</p><p>&gt; Note that \u201cno window\u201d widgets (which have the %GTK_NO_WINDOW\n&gt; flag set) draw on their parent container\u2019s window and thus may\n&gt; not draw any background themselves. This is the case for e.g.\n&gt; <span data-xref=\"Gtk.Label\"/>.\n&gt;\n&gt; To modify the background of such widgets, you have to set the\n&gt; base color on their parent; if you want to set the background\n&gt; of a rectangular area around a label, try placing the label in\n&gt; a <span data-xref=\"Gtk.EventBox\"/> widget and setting the base color on that.</p>",
            "kind": "method",
            "name": "modify_base",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "state",
                    "direction": "in",
                    "type": "Gtk.StateType"
                },
                {
                    "allow_none": true,
                    "argname": "color",
                    "direction": "in",
                    "type": "Gdk.Color"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the background color for a widget in a particular state.</p><p>All other style values are left untouched.\nSee also <span data-xref=\"Gtk.Widget.modify_style\"/>.</p><p>&gt; Note that \u201cno window\u201d widgets (which have the %GTK_NO_WINDOW\n&gt; flag set) draw on their parent container\u2019s window and thus may\n&gt; not draw any background themselves. This is the case for e.g.\n&gt; <span data-xref=\"Gtk.Label\"/>.\n&gt;\n&gt; To modify the background of such widgets, you have to set the\n&gt; background color on their parent; if you want to set the background\n&gt; of a rectangular area around a label, try placing the label in\n&gt; a <span data-xref=\"Gtk.EventBox\"/> widget and setting the background color on that.</p>",
            "kind": "method",
            "name": "modify_bg",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "state",
                    "direction": "in",
                    "type": "Gtk.StateType"
                },
                {
                    "allow_none": true,
                    "argname": "color",
                    "direction": "in",
                    "type": "Gdk.Color"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the cursor color to use in a widget, overriding the <span data-xref=\"Gtk.Widget\"/>\ncursor-color and secondary-cursor-color\nstyle properties.</p><p>All other style values are left untouched.\nSee also <span data-xref=\"Gtk.Widget.modify_style\"/>.</p>",
            "kind": "method",
            "name": "modify_cursor",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "primary",
                    "direction": "in",
                    "type": "Gdk.Color"
                },
                {
                    "allow_none": false,
                    "argname": "secondary",
                    "direction": "in",
                    "type": "Gdk.Color"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the foreground color for a widget in a particular state.</p><p>All other style values are left untouched.\nSee also <span data-xref=\"Gtk.Widget.modify_style\"/>.</p>",
            "kind": "method",
            "name": "modify_fg",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "state",
                    "direction": "in",
                    "type": "Gtk.StateType"
                },
                {
                    "allow_none": true,
                    "argname": "color",
                    "direction": "in",
                    "type": "Gdk.Color"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the font to use for a widget.</p><p>All other style values are left untouched.\nSee also <span data-xref=\"Gtk.Widget.modify_style\"/>.</p>",
            "kind": "method",
            "name": "modify_font",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "font_desc",
                    "direction": "in",
                    "type": "Pango.FontDescription"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Modifies style values on the widget.</p><p>Modifications made using this technique take precedence over\nstyle values set via an RC file, however, they will be overridden\nif a style is explicitly set on the widget using <span data-xref=\"Gtk.Widget.set_style\"/>.\nThe <span data-xref=\"Gtk.RcStyle\"/>-struct is designed so each field can either be\nset or unset, so it is possible, using this function, to modify some\nstyle values and leave the others unchanged.</p><p>Note that modifications made with this function are not cumulative\nwith previous calls to <span data-xref=\"Gtk.Widget.modify_style\"/> or with such\nfunctions as <span data-xref=\"Gtk.Widget.modify_fg\"/>. If you wish to retain\nprevious values, you must first call <span data-xref=\"Gtk.Widget.get_modifier_style\"/>,\nmake your modifications to the returned style, then call\n<span data-xref=\"Gtk.Widget.modify_style\"/> with that style. On the other hand,\nif you first call <span data-xref=\"Gtk.Widget.modify_style\"/>, subsequent calls\nto such functions <span data-xref=\"Gtk.Widget.modify_fg\"/> will have a cumulative\neffect with the initial modifications.</p>",
            "kind": "method",
            "name": "modify_style",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "style",
                    "direction": "in",
                    "type": "Gtk.RcStyle"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the text color for a widget in a particular state.</p><p>All other style values are left untouched.\nThe text color is the foreground color used along with the\nbase color (see <span data-xref=\"Gtk.Widget.modify_base\"/>) for widgets such\nas <span data-xref=\"Gtk.Entry\"/> and <span data-xref=\"Gtk.TextView\"/>.\nSee also <span data-xref=\"Gtk.Widget.modify_style\"/>.</p>",
            "kind": "method",
            "name": "modify_text",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "state",
                    "direction": "in",
                    "type": "Gtk.StateType"
                },
                {
                    "allow_none": true,
                    "argname": "color",
                    "direction": "in",
                    "type": "Gdk.Color"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the background color to use for a widget.</p><p>All other style values are left untouched.\nSee <span data-xref=\"Gtk.Widget.override_color\"/>.</p>",
            "kind": "method",
            "name": "override_background_color",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "state",
                    "direction": "in",
                    "type": "Gtk.StateFlags"
                },
                {
                    "allow_none": true,
                    "argname": "color",
                    "direction": "in",
                    "type": "Gdk.RGBA"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the color to use for a widget.</p><p>All other style values are left untouched.</p><p>This function does not act recursively. Setting the color of a\ncontainer does not affect its children. Note that some widgets that\nyou may not think of as containers, for instance #GtkButtons,\nare actually containers.</p><p>This API is mostly meant as a quick way for applications to\nchange a widget appearance. If you are developing a widgets\nlibrary and intend this change to be themeable, it is better\ndone by setting meaningful CSS classes and regions in your\nwidget/container implementation through <span data-xref=\"Gtk.StyleContext.add_class\"/>\nand <span data-xref=\"Gtk.StyleContext.add_region\"/>.</p><p>This way, your widget library can install a <span data-xref=\"Gtk.CssProvider\"/>\nwith the %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority in order\nto provide a default styling for those widgets that need so, and\nthis theming may fully overridden by the user\u2019s theme.</p><p>Note that for complex widgets this may bring in undesired\nresults (such as uniform background color everywhere), in\nthese cases it is better to fully style such widgets through a\n<span data-xref=\"Gtk.CssProvider\"/> with the %GTK_STYLE_PROVIDER_PRIORITY_APPLICATION\npriority.</p>",
            "kind": "method",
            "name": "override_color",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "state",
                    "direction": "in",
                    "type": "Gtk.StateFlags"
                },
                {
                    "allow_none": true,
                    "argname": "color",
                    "direction": "in",
                    "type": "Gdk.RGBA"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the cursor color to use in a widget, overriding the\ncursor-color and secondary-cursor-color\nstyle properties. All other style values are left untouched.\nSee also <span data-xref=\"Gtk.Widget.modify_style\"/>.</p><p>Note that the underlying properties have the <span data-xref=\"Gdk.Color\">Gdk.Color</span> type,\nso the alpha value in @primary and @secondary will be ignored.</p>",
            "kind": "method",
            "name": "override_cursor",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "cursor",
                    "direction": "in",
                    "type": "Gdk.RGBA"
                },
                {
                    "allow_none": true,
                    "argname": "secondary_cursor",
                    "direction": "in",
                    "type": "Gdk.RGBA"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the font to use for a widget. All other style values are\nleft untouched. See <span data-xref=\"Gtk.Widget.override_color\"/>.</p>",
            "kind": "method",
            "name": "override_font",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "font_desc",
                    "direction": "in",
                    "type": "Pango.FontDescription"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets a symbolic color for a widget.</p><p>All other style values are left untouched.\nSee <span data-xref=\"Gtk.Widget.override_color\"/> for overriding the foreground\nor background color.</p>",
            "kind": "method",
            "name": "override_symbolic_color",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "name",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": true,
                    "argname": "color",
                    "direction": "in",
                    "type": "Gdk.RGBA"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Obtains the full path to <code>widget</code>. The path is simply the name of a\nwidget and all its parents in the container hierarchy, separated by\nperiods. The name of a widget comes from\n<span data-xref=\"Gtk.Widget.get_name\"/>. Paths are used to apply styles to a widget\nin gtkrc configuration files. Widget names are the type of the\nwidget by default (e.g. \u201cGtkButton\u201d) or can be set to an\napplication-specific value with <span data-xref=\"Gtk.Widget.set_name\"/>. By setting\nthe name of a widget, you allow users or theme authors to apply\nstyles to that specific widget in their gtkrc\nfile. @path_reversed_p fills in the path in reverse order,\ni.e. starting with <code>widget</code>\u2019s name instead of starting with the name\nof <code>widget</code>\u2019s outermost ancestor.</p>",
            "kind": "method",
            "name": "path",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "path_length",
                    "direction": "out",
                    "type": "Number(guint)"
                },
                {
                    "allow_none": true,
                    "argname": "path",
                    "direction": "out",
                    "type": "String"
                },
                {
                    "allow_none": true,
                    "argname": "path_reversed",
                    "direction": "out",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Mark <code>widget</code> as needing to recompute its expand flags. Call\nthis function when setting legacy expand child properties\non the child of a container.</p><p>See <span data-xref=\"Gtk.Widget.compute_expand\"/>.</p>",
            "kind": "method",
            "name": "queue_compute_expand",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Equivalent to calling <span data-xref=\"Gtk.Widget.queue_draw_area\"/> for the\nentire area of a widget.</p>",
            "kind": "method",
            "name": "queue_draw",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Convenience function that calls <span data-xref=\"Gtk.Widget.queue_draw_region\"/> on\nthe region created from the given coordinates.</p><p>The region here is specified in widget coordinates.\nWidget coordinates are a bit odd; for historical reasons, they are\ndefined as <code>widget</code>-&gt;window coordinates for widgets that are not</p>\n<h1>GTK_NO_WINDOW widgets, and are relative to <code>widget</code>-&gt;allocation.x,</h1>\n<p><code>widget</code>-&gt;allocation.y for widgets that are #GTK_NO_WINDOW widgets.</p>",
            "kind": "method",
            "name": "queue_draw_area",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "x",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "y",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "width",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "height",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Invalidates the area of <code>widget</code> defined by <code>region</code> by calling\n<span data-xref=\"Gdk.Window.invalidate_region\">Gdk.Window.prototype.invalidate_region</span> on the widget\u2019s window and all its\nchild windows. Once the main loop becomes idle (after the current\nbatch of events has been processed, roughly), the window will\nreceive expose events for the union of all regions that have been\ninvalidated.</p><p>Normally you would only use this function in widget\nimplementations. You might also use it to schedule a redraw of a\n<span data-xref=\"Gtk.DrawingArea\"/> or some portion thereof.</p>",
            "kind": "method",
            "name": "queue_draw_region",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "region",
                    "direction": "in",
                    "type": "cairo.Region"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>This function is only for use in widget implementations.\nFlags a widget to have its size renegotiated; should\nbe called when a widget for some reason has a new size request.\nFor example, when you change the text in a <span data-xref=\"Gtk.Label\"/>, <span data-xref=\"Gtk.Label\"/>\nqueues a resize to ensure there\u2019s enough space for the new text.</p><p>Note that you cannot call <span data-xref=\"Gtk.Widget.queue_resize\"/> on a widget\nfrom inside its implementation of the GtkWidgetClass::size_allocate\nvirtual method. Calls to <span data-xref=\"Gtk.Widget.queue_resize\"/> from inside\nGtkWidgetClass::size_allocate will be silently ignored.</p>",
            "kind": "method",
            "name": "queue_resize",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>This function works like <span data-xref=\"Gtk.Widget.queue_resize\"/>,\nexcept that the widget is not invalidated.</p>",
            "kind": "method",
            "name": "queue_resize_no_redraw",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Creates the GDK (windowing system) resources associated with a\nwidget.  For example, <code>widget</code>-&gt;window will be created when a widget\nis realized.  Normally realization happens implicitly; if you show\na widget and all its parent containers, then the widget will be\nrealized and mapped automatically.</p><p>Realizing a widget requires all\nthe widget\u2019s parent widgets to be realized; calling\n<span data-xref=\"Gtk.Widget.realize\"/> realizes the widget\u2019s parents in addition to\n<code>widget</code> itself. If a widget is not yet inside a toplevel window\nwhen you realize it, bad things will happen.</p><p>This function is primarily used in widget implementations, and\nisn\u2019t very useful otherwise. Many times when you think you might\nneed it, a better approach is to connect to a signal that will be\ncalled after the widget is realized automatically, such as\n<span data-xref=\"Gtk.Widget-draw\"/>. Or simply g_signal_connect () to the\n<span data-xref=\"Gtk.Widget-realize\"/> signal.</p>",
            "kind": "method",
            "name": "realize",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Computes the intersection of a <code>widget</code>\u2019s area and <code>region</code>, returning\nthe intersection. The result may be empty, use cairo_region_is_empty() to\ncheck.</p>",
            "kind": "method",
            "name": "region_intersect",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "region",
                    "direction": "in",
                    "type": "cairo.Region"
                }
            ],
            "retval": {
                "type": "cairo.Region"
            }
        },
        {
            "doc": "<p>Registers a <span data-xref=\"Gdk.Window\">Gdk.Window</span> with the widget and sets it up so that\nthe widget receives events for it. Call <span data-xref=\"Gtk.Widget.unregister_window\"/>\nwhen destroying the window.</p><p>Before 3.8 you needed to call <span data-xref=\"Gdk.Window.set_user_data\">Gdk.Window.prototype.set_user_data</span> directly to set\nthis up. This is now deprecated and you should use <span data-xref=\"Gtk.Widget.register_window\"/>\ninstead. Old code will keep working as is, although some new features like\ntransparency might not work perfectly.</p>",
            "kind": "method",
            "name": "register_window",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "window",
                    "direction": "in",
                    "type": "Gdk.Window"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Removes an accelerator from <code>widget</code>, previously installed with\n<span data-xref=\"Gtk.Widget.add_accelerator\"/>.</p>",
            "kind": "method",
            "name": "remove_accelerator",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "accel_group",
                    "direction": "in",
                    "type": "Gtk.AccelGroup"
                },
                {
                    "allow_none": false,
                    "argname": "accel_key",
                    "direction": "in",
                    "type": "Number(guint)"
                },
                {
                    "allow_none": false,
                    "argname": "accel_mods",
                    "direction": "in",
                    "type": "Gdk.ModifierType"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Removes a widget from the list of mnemonic labels for\nthis widget. (See <span data-xref=\"Gtk.Widget.list_mnemonic_labels\"/>). The widget\nmust have previously been added to the list with\n<span data-xref=\"Gtk.Widget.add_mnemonic_label\"/>.</p>",
            "kind": "method",
            "name": "remove_mnemonic_label",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "label",
                    "direction": "in",
                    "type": "Gtk.Widget"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Removes a tick callback previously registered with\n<span data-xref=\"Gtk.Widget.add_tick_callback\"/>.</p>",
            "kind": "method",
            "name": "remove_tick_callback",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "id",
                    "direction": "in",
                    "type": "Number(guint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>A convenience function that uses the theme settings for <code>widget</code>\nto look up <code>stock_id</code> and render it to a pixbuf. <code>stock_id</code> should\nbe a stock icon ID such as #GTK_STOCK_OPEN or #GTK_STOCK_OK. <code>size</code>\nshould be a size such as #GTK_ICON_SIZE_MENU. <code>detail</code> should be a\nstring that identifies the widget or code doing the rendering, so\nthat theme engines can special-case rendering for that widget or\ncode.</p><p>The pixels in the returned <span data-xref=\"GdkPixbuf.Pixbuf\">GdkPixbuf.Pixbuf</span> are shared with the rest of\nthe application and should not be modified. The pixbuf should be\nfreed after use with <span data-xref=\"GObject.Object.unref\">GObject.Object.prototype.unref</span>.</p>",
            "kind": "method",
            "name": "render_icon",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "stock_id",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "size",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": true,
                    "argname": "detail",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "GdkPixbuf.Pixbuf"
            }
        },
        {
            "doc": "<p>A convenience function that uses the theme engine and style\nsettings for <code>widget</code> to look up <code>stock_id</code> and render it to\na pixbuf. <code>stock_id</code> should be a stock icon ID such as</p>\n<h1>GTK_STOCK_OPEN or #GTK_STOCK_OK. <code>size</code> should be a size</h1>\n<p>such as #GTK_ICON_SIZE_MENU.</p><p>The pixels in the returned <span data-xref=\"GdkPixbuf.Pixbuf\">GdkPixbuf.Pixbuf</span> are shared with the rest of\nthe application and should not be modified. The pixbuf should be freed\nafter use with <span data-xref=\"GObject.Object.unref\">GObject.Object.prototype.unref</span>.</p>",
            "kind": "method",
            "name": "render_icon_pixbuf",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "stock_id",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "size",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "GdkPixbuf.Pixbuf"
            }
        },
        {
            "doc": "<p>Moves a widget from one <span data-xref=\"Gtk.Container\"/> to another, handling reference\ncount issues to avoid destroying the widget.</p>",
            "kind": "method",
            "name": "reparent",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "new_parent",
                    "direction": "in",
                    "type": "Gtk.Widget"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Reset the styles of <code>widget</code> and all descendents, so when\nthey are looked up again, they get the correct values\nfor the currently loaded RC file settings.</p><p>This function is not useful for applications.</p>",
            "kind": "method",
            "name": "reset_rc_styles",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Updates the style context of <code>widget</code> and all descendents\nby updating its widget path. #GtkContainers may want\nto use this on a child when reordering it in a way that a different\nstyle might apply to it. See also <span data-xref=\"Gtk.Container.get_path_for_child\"/>.</p>",
            "kind": "method",
            "name": "reset_style",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Very rarely-used function. This function is used to emit\nan expose event on a widget. This function is not normally used\ndirectly. The only time it is used is when propagating an expose\nevent to a child %NO_WINDOW widget, and that is normally done\nusing <span data-xref=\"Gtk.Container.propagate_draw\"/>.</p><p>If you want to force an area of a window to be redrawn,\nuse <span data-xref=\"Gdk.Window.invalidate_rect\">Gdk.Window.prototype.invalidate_rect</span> or <span data-xref=\"Gdk.Window.invalidate_region\">Gdk.Window.prototype.invalidate_region</span>.\nTo cause the redraw to be done immediately, follow that call\nwith a call to <span data-xref=\"Gdk.Window.process_updates\">Gdk.Window.prototype.process_updates</span>.</p>",
            "kind": "method",
            "name": "send_expose",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.Event"
                }
            ],
            "retval": {
                "type": "Number(gint)"
            }
        },
        {
            "doc": "<p>Sends the focus change <code>event</code> to <code>widget</code></p><p>This function is not meant to be used by applications. The only time it\nshould be used is when it is necessary for a <span data-xref=\"Gtk.Widget\"/> to assign focus\nto a widget that is semantically owned by the first widget even though\nit\u2019s not a direct child - for instance, a search entry in a floating\nwindow similar to the quick search in <span data-xref=\"Gtk.TreeView\"/>.</p><p>An example of its usage is:</p><p>|[&lt;!-- language=\"C\" --&gt;\n  GdkEvent *fevent = gdk_event_new (GDK_FOCUS_CHANGE);</p><p>fevent-&gt;focus_change.type = GDK_FOCUS_CHANGE;\n  fevent-&gt;focus_change.in = TRUE;\n  fevent-&gt;focus_change.window = gtk_widget_get_window (widget);\n  if (fevent-&gt;focus_change.window != NULL)\n    g_object_ref (fevent-&gt;focus_change.window);</p><p>gtk_widget_send_focus_change (widget, fevent);</p><p>gdk_event_free (event);\n]|</p>",
            "kind": "method",
            "name": "send_focus_change",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.Event"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Given an accelerator group, <code>accel_group</code>, and an accelerator path,\n<code>accel_path</code>, sets up an accelerator in <code>accel_group</code> so whenever the\nkey binding that is defined for <code>accel_path</code> is pressed, <code>widget</code>\nwill be activated.  This removes any accelerators (for any\naccelerator group) installed by previous calls to\n<span data-xref=\"Gtk.Widget.set_accel_path\"/>. Associating accelerators with\npaths allows them to be modified by the user and the modifications\nto be saved for future use. (See <span data-xref=\"Gtk.AccelMap.save\"/>.)</p><p>This function is a low level function that would most likely\nbe used by a menu creation system like <span data-xref=\"Gtk.UIManager\"/>. If you\nuse <span data-xref=\"Gtk.UIManager\"/>, setting up accelerator paths will be done\nautomatically.</p><p>Even when you you aren\u2019t using <span data-xref=\"Gtk.UIManager\"/>, if you only want to\nset up accelerators on menu items <span data-xref=\"Gtk.MenuItem.set_accel_path\"/>\nprovides a somewhat more convenient interface.</p><p>Note that <code>accel_path</code> string will be stored in a <span data-xref=\"GLib.Quark\">GLib.Quark</span>. Therefore, if you\npass a static string, you can save some memory by interning it first with\n<span data-xref=\"GLib.intern_static_string\">GLib.intern_static_string</span>.</p>",
            "kind": "method",
            "name": "set_accel_path",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "accel_path",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": true,
                    "argname": "accel_group",
                    "direction": "in",
                    "type": "Gtk.AccelGroup"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the widget\u2019s allocation.  This should not be used\ndirectly, but from within a widget\u2019s size_allocate method.</p><p>The allocation set should be the \u201cadjusted\u201d or actual\nallocation. If you\u2019re implementing a <span data-xref=\"Gtk.Container\"/>, you want to use\n<span data-xref=\"Gtk.Widget.size_allocate\"/> instead of <span data-xref=\"Gtk.Widget.set_allocation\"/>.\nThe GtkWidgetClass::adjust_size_allocation virtual method adjusts the\nallocation inside <span data-xref=\"Gtk.Widget.size_allocate\"/> to create an adjusted\nallocation.</p>",
            "kind": "method",
            "name": "set_allocation",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "allocation",
                    "direction": "in",
                    "type": "Gtk.Allocation"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets whether the application intends to draw on the widget in\nan <span data-xref=\"Gtk.Widget-draw\"/> handler.</p><p>This is a hint to the widget and does not affect the behavior of\nthe GTK+ core; many widgets ignore this flag entirely. For widgets\nthat do pay attention to the flag, such as <span data-xref=\"Gtk.EventBox\"/> and <span data-xref=\"Gtk.Window\"/>,\nthe effect is to suppress default themed drawing of the widget's\nbackground. (Children of the widget will still be drawn.) The application\nis then entirely responsible for drawing the widget background.</p><p>Note that the background is still drawn when the widget is mapped.</p>",
            "kind": "method",
            "name": "set_app_paintable",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "app_paintable",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Specifies whether <code>widget</code> can be a default widget. See\n<span data-xref=\"Gtk.Widget.grab_default\"/> for details about the meaning of\n\u201cdefault\u201d.</p>",
            "kind": "method",
            "name": "set_can_default",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "can_default",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Specifies whether <code>widget</code> can own the input focus. See\n<span data-xref=\"Gtk.Widget.grab_focus\"/> for actually setting the input focus on a\nwidget.</p>",
            "kind": "method",
            "name": "set_can_focus",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "can_focus",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets whether <code>widget</code> should be mapped along with its when its parent\nis mapped and <code>widget</code> has been shown with <span data-xref=\"Gtk.Widget.show\"/>.</p><p>The child visibility can be set for widget before it is added to\na container with <span data-xref=\"Gtk.Widget.set_parent\"/>, to avoid mapping\nchildren unnecessary before immediately unmapping them. However\nit will be reset to its default state of <code>true</code> when the widget\nis removed from a container.</p><p>Note that changing the child visibility of a widget does not\nqueue a resize on the widget. Most of the time, the size of\na widget is computed from all visible children, whether or\nnot they are mapped. If this is not the case, the container\ncan queue a resize itself.</p><p>This function is only useful for container implementations and\nnever should be called by an application.</p>",
            "kind": "method",
            "name": "set_child_visible",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "is_visible",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets a widgets composite name. The widget must be\na composite child of its parent; see <span data-xref=\"Gtk.Widget.push_composite_child\"/>.</p>",
            "kind": "method",
            "name": "set_composite_name",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "name",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Enables or disables a <span data-xref=\"Gdk.Device\">Gdk.Device</span> to interact with <code>widget</code>\nand all its children.</p><p>It does so by descending through the <span data-xref=\"Gdk.Window\">Gdk.Window</span> hierarchy\nand enabling the same mask that is has for core events\n(i.e. the one that <span data-xref=\"Gdk.Window.get_events\">Gdk.Window.prototype.get_events</span> returns).</p>",
            "kind": "method",
            "name": "set_device_enabled",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "device",
                    "direction": "in",
                    "type": "Gdk.Device"
                },
                {
                    "allow_none": false,
                    "argname": "enabled",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the device event mask (see <span data-xref=\"Gdk.EventMask\">Gdk.EventMask</span>) for a widget. The event\nmask determines which events a widget will receive from <code>device</code>. Keep\nin mind that different widgets have different default event masks, and by\nchanging the event mask you may disrupt a widget\u2019s functionality,\nso be careful. This function must be called while a widget is\nunrealized. Consider <span data-xref=\"Gtk.Widget.add_device_events\"/> for widgets that are\nalready realized, or if you want to preserve the existing event\nmask. This function can\u2019t be used with #GTK_NO_WINDOW widgets;\nto get events on those widgets, place them inside a <span data-xref=\"Gtk.EventBox\"/>\nand receive events on the event box.</p>",
            "kind": "method",
            "name": "set_device_events",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "device",
                    "direction": "in",
                    "type": "Gdk.Device"
                },
                {
                    "allow_none": false,
                    "argname": "events",
                    "direction": "in",
                    "type": "Gdk.EventMask"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the reading direction on a particular widget. This direction\ncontrols the primary direction for widgets containing text,\nand also the direction in which the children of a container are\npacked. The ability to set the direction is present in order\nso that correct localization into languages with right-to-left\nreading directions can be done. Generally, applications will\nlet the default reading direction present, except for containers\nwhere the containers are arranged in an order that is explicitly\nvisual rather than logical (such as buttons for text justification).</p><p>If the direction is set to <span data-xref=\"Gtk.TextDirection\"/>.none, then the value\nset by <span data-xref=\"Gtk.Widget.set_default_direction\"/> will be used.</p>",
            "kind": "method",
            "name": "set_direction",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "dir",
                    "direction": "in",
                    "type": "Gtk.TextDirection"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Widgets are double buffered by default; you can use this function\nto turn off the buffering. \u201cDouble buffered\u201d simply means that\n<span data-xref=\"Gdk.Window.begin_paint_region\">Gdk.Window.prototype.begin_paint_region</span> and <span data-xref=\"Gdk.Window.end_paint\">Gdk.Window.prototype.end_paint</span> are called\nautomatically around expose events sent to the\nwidget. <span data-xref=\"Gdk.Window.begin_paint_region\">Gdk.Window.prototype.begin_paint_region</span> diverts all drawing to a widget's\nwindow to an offscreen buffer, and <span data-xref=\"Gdk.Window.end_paint\">Gdk.Window.prototype.end_paint</span> draws the\nbuffer to the screen. The result is that users see the window\nupdate in one smooth step, and don\u2019t see individual graphics\nprimitives being rendered.</p><p>In very simple terms, double buffered widgets don\u2019t flicker,\nso you would only use this function to turn off double buffering\nif you had special needs and really knew what you were doing.</p><p>Note: if you turn off double-buffering, you have to handle\nexpose events, since even the clearing to the background color or\npixmap will not happen automatically (as it is done in\n<span data-xref=\"Gdk.Window.begin_paint_region\">Gdk.Window.prototype.begin_paint_region</span>).</p><p>Since 3.10 this function only works for widgets with native\nwindows.</p>",
            "kind": "method",
            "name": "set_double_buffered",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "double_buffered",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the event mask (see <span data-xref=\"Gdk.EventMask\">Gdk.EventMask</span>) for a widget. The event\nmask determines which events a widget will receive. Keep in mind\nthat different widgets have different default event masks, and by\nchanging the event mask you may disrupt a widget\u2019s functionality,\nso be careful. This function must be called while a widget is\nunrealized. Consider <span data-xref=\"Gtk.Widget.add_events\"/> for widgets that are\nalready realized, or if you want to preserve the existing event\nmask. This function can\u2019t be used with widgets that have no window.\n(See <span data-xref=\"Gtk.Widget.get_has_window\"/>).  To get events on those widgets,\nplace them inside a <span data-xref=\"Gtk.EventBox\"/> and receive events on the event\nbox.</p>",
            "kind": "method",
            "name": "set_events",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "events",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the horizontal alignment of <code>widget</code>.\nSee the <span data-xref=\"Gtk.Widget-halign\"/> property.</p>",
            "kind": "method",
            "name": "set_halign",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "align",
                    "direction": "in",
                    "type": "Gtk.Align"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the has-tooltip property on <code>widget</code> to <code>has_tooltip</code>.  See\n<span data-xref=\"Gtk.Widget-has-tooltip\"/> for more information.</p>",
            "kind": "method",
            "name": "set_has_tooltip",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "has_tooltip",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Specifies whether <code>widget</code> has a <span data-xref=\"Gdk.Window\">Gdk.Window</span> of its own. Note that\nall realized widgets have a non-<code>null</code> \u201cwindow\u201d pointer\n(<span data-xref=\"Gtk.Widget.get_window\"/> never returns a <code>null</code> window when a widget\nis realized), but for many of them it\u2019s actually the <span data-xref=\"Gdk.Window\">Gdk.Window</span> of\none of its parent widgets. Widgets that do not create a %window for\nthemselves in <span data-xref=\"Gtk.Widget-realize\"/> must announce this by\ncalling this function with <code>has_window</code> = <code>false</code>.</p><p>This function should only be called by widget implementations,\nand they should call it in their init() function.</p>",
            "kind": "method",
            "name": "set_has_window",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "has_window",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets whether the widget would like any available extra horizontal\nspace. When a user resizes a <span data-xref=\"Gtk.Window\"/>, widgets with expand=TRUE\ngenerally receive the extra space. For example, a list or\nscrollable area or document in your window would often be set to\nexpand.</p><p>Call this function to set the expand flag if you would like your\nwidget to become larger horizontally when the window has extra\nroom.</p><p>By default, widgets automatically expand if any of their children\nwant to expand. (To see if a widget will automatically expand given\nits current children and state, call <span data-xref=\"Gtk.Widget.compute_expand\"/>. A\ncontainer can decide how the expandability of children affects the\nexpansion of the container by overriding the compute_expand virtual\nmethod on <span data-xref=\"Gtk.Widget\"/>.).</p><p>Setting hexpand explicitly with this function will override the\nautomatic expand behavior.</p><p>This function forces the widget to expand or not to expand,\nregardless of children.  The override occurs because\n<span data-xref=\"Gtk.Widget.set_hexpand\"/> sets the hexpand-set property (see\n<span data-xref=\"Gtk.Widget.set_hexpand_set\"/>) which causes the widget\u2019s hexpand\nvalue to be used, rather than looking at children and widget state.</p>",
            "kind": "method",
            "name": "set_hexpand",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "expand",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets whether the hexpand flag (see <span data-xref=\"Gtk.Widget.get_hexpand\"/>) will\nbe used.</p><p>The hexpand-set property will be set automatically when you call\n<span data-xref=\"Gtk.Widget.set_hexpand\"/> to set hexpand, so the most likely\nreason to use this function would be to unset an explicit expand\nflag.</p><p>If hexpand is set, then it overrides any computed\nexpand value based on child widgets. If hexpand is not\nset, then the expand value depends on whether any\nchildren of the widget would like to expand.</p><p>There are few reasons to use this function, but it\u2019s here\nfor completeness and consistency.</p>",
            "kind": "method",
            "name": "set_hexpand_set",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "set",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Marks the widget as being realized.</p><p>This function should only ever be called in a derived widget's\n\u201cmap\u201d or \u201cunmap\u201d implementation.</p>",
            "kind": "method",
            "name": "set_mapped",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "mapped",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the bottom margin of <code>widget</code>.\nSee the <span data-xref=\"Gtk.Widget-margin-bottom\"/> property.</p>",
            "kind": "method",
            "name": "set_margin_bottom",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "margin",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the end margin of <code>widget</code>.\nSee the <span data-xref=\"Gtk.Widget-margin-end\"/> property.</p>",
            "kind": "method",
            "name": "set_margin_end",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "margin",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the left margin of <code>widget</code>.\nSee the <span data-xref=\"Gtk.Widget-margin-left\"/> property.</p>",
            "kind": "method",
            "name": "set_margin_left",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "margin",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the right margin of <code>widget</code>.\nSee the <span data-xref=\"Gtk.Widget-margin-right\"/> property.</p>",
            "kind": "method",
            "name": "set_margin_right",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "margin",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the start margin of <code>widget</code>.\nSee the <span data-xref=\"Gtk.Widget-margin-start\"/> property.</p>",
            "kind": "method",
            "name": "set_margin_start",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "margin",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the top margin of <code>widget</code>.\nSee the <span data-xref=\"Gtk.Widget-margin-top\"/> property.</p>",
            "kind": "method",
            "name": "set_margin_top",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "margin",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Widgets can be named, which allows you to refer to them from a\nCSS file. You can apply a style to widgets with a particular name\nin the CSS file. See the documentation for the CSS syntax (on the\nsame page as the docs for <span data-xref=\"Gtk.StyleContext\"/>).</p><p>Note that the CSS syntax has certain special characters to delimit\nand represent elements in a selector (period, #, &gt;, *...), so using\nthese will make your widget impossible to match by name. Any combination\nof alphanumeric symbols, dashes and underscores will suffice.</p>",
            "kind": "method",
            "name": "set_name",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "name",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the <span data-xref=\"Gtk.Widget-no-show-all\"/> property, which determines whether\ncalls to <span data-xref=\"Gtk.Widget.show_all\"/> will affect this widget.</p><p>This is mostly for use in constructing widget hierarchies with externally\ncontrolled visibility, see <span data-xref=\"Gtk.UIManager\"/>.</p>",
            "kind": "method",
            "name": "set_no_show_all",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "no_show_all",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Request the <code>widget</code> to be rendered partially transparent,\nwith opacity 0 being fully transparent and 1 fully opaque. (Opacity values\nare clamped to the [0,1] range.).\nThis works on both toplevel widget, and child widgets, although there\nare some limitations:</p><p>For toplevel widgets this depends on the capabilities of the windowing\nsystem. On X11 this has any effect only on X screens with a compositing manager\nrunning. See <span data-xref=\"Gtk.Widget.is_composited\"/>. On Windows it should work\nalways, although setting a window\u2019s opacity after the window has been\nshown causes it to flicker once on Windows.</p><p>For child widgets it doesn\u2019t work if any affected widget has a native window, or\ndisables double buffering.</p>",
            "kind": "method",
            "name": "set_opacity",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "opacity",
                    "direction": "in",
                    "type": "Number(gdouble)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>This function is useful only when implementing subclasses of\n<span data-xref=\"Gtk.Container\"/>.\nSets the container as the parent of <code>widget</code>, and takes care of\nsome details such as updating the state and style of the child\nto reflect its new location. The opposite function is\n<span data-xref=\"Gtk.Widget.unparent\"/>.</p>",
            "kind": "method",
            "name": "set_parent",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "parent",
                    "direction": "in",
                    "type": "Gtk.Widget"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets a non default parent window for <code>widget</code>.</p><p>For <span data-xref=\"Gtk.Window\"/> classes, setting a <code>parent_window</code> effects whether\nthe window is a toplevel window or can be embedded into other\nwidgets.</p><p>For <span data-xref=\"Gtk.Window\"/> classes, this needs to be called before the\nwindow is realized.</p>",
            "kind": "method",
            "name": "set_parent_window",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "parent_window",
                    "direction": "in",
                    "type": "Gdk.Window"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Marks the widget as being realized. This function must only be\ncalled after all #GdkWindows for the <code>widget</code> have been created\nand registered.</p><p>This function should only ever be called in a derived widget's\n\u201crealize\u201d or \u201cunrealize\u201d implementation.</p>",
            "kind": "method",
            "name": "set_realized",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "realized",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Specifies whether <code>widget</code> will be treated as the default widget\nwithin its toplevel when it has the focus, even if another widget\nis the default.</p><p>See <span data-xref=\"Gtk.Widget.grab_default\"/> for details about the meaning of\n\u201cdefault\u201d.</p>",
            "kind": "method",
            "name": "set_receives_default",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "receives_default",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets whether the entire widget is queued for drawing when its size\nallocation changes. By default, this setting is <code>true</code> and\nthe entire widget is redrawn on every size change. If your widget\nleaves the upper left unchanged when made bigger, turning this\nsetting off will improve performance.</p><p>Note that for widgets where <span data-xref=\"Gtk.Widget.get_has_window\"/> is <code>false</code>\nsetting this flag to <code>false</code> turns off all allocation on resizing:\nthe widget will not even redraw if its position changes; this is to\nallow containers that don\u2019t draw anything to avoid excess\ninvalidations. If you set this flag on a widget with no window that\ndoes draw on <code>widget</code>-&gt;window, you are\nresponsible for invalidating both the old and new allocation of the\nwidget when the widget is moved and responsible for invalidating\nregions newly when the widget increases size.</p>",
            "kind": "method",
            "name": "set_redraw_on_allocate",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "redraw_on_allocate",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the sensitivity of a widget. A widget is sensitive if the user\ncan interact with it. Insensitive widgets are \u201cgrayed out\u201d and the\nuser can\u2019t interact with them. Insensitive widgets are known as\n\u201cinactive\u201d, \u201cdisabled\u201d, or \u201cghosted\u201d in some other toolkits.</p>",
            "kind": "method",
            "name": "set_sensitive",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "sensitive",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the minimum size of a widget; that is, the widget\u2019s size\nrequest will be at least <code>width</code> by <code>height</code>. You can use this\nfunction to force a widget to be larger than it normally would be.</p><p>In most cases, <span data-xref=\"Gtk.Window.set_default_size\"/> is a better choice for\ntoplevel windows than this function; setting the default size will\nstill allow users to shrink the window. Setting the size request\nwill force them to leave the window at least as large as the size\nrequest. When dealing with window sizes,\n<span data-xref=\"Gtk.Window.set_geometry_hints\"/> can be a useful function as well.</p><p>Note the inherent danger of setting any fixed size - themes,\ntranslations into other languages, different fonts, and user action\ncan all change the appropriate size for a given widget. So, it's\nbasically impossible to hardcode a size that will always be\ncorrect.</p><p>The size request of a widget is the smallest size a widget can\naccept while still functioning well and drawing itself correctly.\nHowever in some strange cases a widget may be allocated less than\nits requested size, and in many cases a widget may be allocated more\nspace than it requested.</p><p>If the size request in a given direction is -1 (unset), then\nthe \u201cnatural\u201d size request of the widget will be used instead.</p><p>The size request set here does not include any margin from the\n<span data-xref=\"Gtk.Widget\"/> properties margin-left, margin-right, margin-top, and\nmargin-bottom, but it does include pretty much all other padding\nor border properties set by any subclass of <span data-xref=\"Gtk.Widget\"/>.</p>",
            "kind": "method",
            "name": "set_size_request",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "width",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "height",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>This function is for use in widget implementations. Sets the state\nof a widget (insensitive, prelighted, etc.) Usually you should set\nthe state using wrapper functions such as <span data-xref=\"Gtk.Widget.set_sensitive\"/>.</p>",
            "kind": "method",
            "name": "set_state",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "state",
                    "direction": "in",
                    "type": "Gtk.StateType"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>This function is for use in widget implementations. Turns on flag\nvalues in the current widget state (insensitive, prelighted, etc.).</p><p>This function accepts the values <span data-xref=\"Gtk.StateFlags\"/>.dir_ltr and\n<span data-xref=\"Gtk.StateFlags\"/>.dir_rtl but ignores them. If you want to set the widget's\ndirection, use <span data-xref=\"Gtk.Widget.set_direction\"/>.</p><p>It is worth mentioning that any other state than <span data-xref=\"Gtk.StateFlags\"/>.insensitive,\nwill be propagated down to all non-internal children if <code>widget</code> is a\n<span data-xref=\"Gtk.Container\"/>, while <span data-xref=\"Gtk.StateFlags\"/>.insensitive itself will be propagated\ndown to all <span data-xref=\"Gtk.Container\"/> children by different means than turning on the\nstate flag down the hierarchy, both <span data-xref=\"Gtk.Widget.get_state_flags\"/> and\n<span data-xref=\"Gtk.Widget.is_sensitive\"/> will make use of these.</p>",
            "kind": "method",
            "name": "set_state_flags",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "flags",
                    "direction": "in",
                    "type": "Gtk.StateFlags"
                },
                {
                    "allow_none": false,
                    "argname": "clear",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Used to set the <span data-xref=\"Gtk.Style\"/> for a widget (<code>widget</code>-&gt;style). Since\nGTK 3, this function does nothing, the passed in style is ignored.</p>",
            "kind": "method",
            "name": "set_style",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "style",
                    "direction": "in",
                    "type": "Gtk.Style"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Enables or disables multiple pointer awareness. If this setting is <code>true</code>,\n<code>widget</code> will start receiving multiple, per device enter/leave events. Note\nthat if custom #GdkWindows are created in <span data-xref=\"Gtk.Widget-realize\"/>,\n<span data-xref=\"Gdk.Window.set_support_multidevice\">Gdk.Window.prototype.set_support_multidevice</span> will have to be called manually on them.</p>",
            "kind": "method",
            "name": "set_support_multidevice",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "support_multidevice",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets <code>markup</code> as the contents of the tooltip, which is marked up with\n the [Pango text markup language][PangoMarkupFormat].</p><p>This function will take care of setting <span data-xref=\"Gtk.Widget-has-tooltip\"/> to <code>true</code>\nand of the default handler for the <span data-xref=\"Gtk.Widget-query-tooltip\"/> signal.</p><p>See also the <span data-xref=\"Gtk.Widget-tooltip-markup\"/> property and\n<span data-xref=\"Gtk.Tooltip.set_markup\"/>.</p>",
            "kind": "method",
            "name": "set_tooltip_markup",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "markup",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets <code>text</code> as the contents of the tooltip. This function will take\ncare of setting <span data-xref=\"Gtk.Widget-has-tooltip\"/> to <code>true</code> and of the default\nhandler for the <span data-xref=\"Gtk.Widget-query-tooltip\"/> signal.</p><p>See also the <span data-xref=\"Gtk.Widget-tooltip-text\"/> property and <span data-xref=\"Gtk.Tooltip.set_text\"/>.</p>",
            "kind": "method",
            "name": "set_tooltip_text",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "text",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Replaces the default, usually yellow, window used for displaying\ntooltips with <code>custom_window</code>. GTK+ will take care of showing and\nhiding <code>custom_window</code> at the right moment, to behave likewise as\nthe default tooltip window. If <code>custom_window</code> is <code>null</code>, the default\ntooltip window will be used.</p><p>If the custom window should have the default theming it needs to\nhave the name \u201cgtk-tooltip\u201d, see <span data-xref=\"Gtk.Widget.set_name\"/>.</p>",
            "kind": "method",
            "name": "set_tooltip_window",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "custom_window",
                    "direction": "in",
                    "type": "Gtk.Window"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the vertical alignment of <code>widget</code>.\nSee the <span data-xref=\"Gtk.Widget-valign\"/> property.</p>",
            "kind": "method",
            "name": "set_valign",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "align",
                    "direction": "in",
                    "type": "Gtk.Align"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets whether the widget would like any available extra vertical\nspace.</p><p>See <span data-xref=\"Gtk.Widget.set_hexpand\"/> for more detail.</p>",
            "kind": "method",
            "name": "set_vexpand",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "expand",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets whether the vexpand flag (see <span data-xref=\"Gtk.Widget.get_vexpand\"/>) will\nbe used.</p><p>See <span data-xref=\"Gtk.Widget.set_hexpand_set\"/> for more detail.</p>",
            "kind": "method",
            "name": "set_vexpand_set",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "set",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the visibility state of <code>widget</code>. Note that setting this to\n<code>true</code> doesn\u2019t mean the widget is actually viewable, see\n<span data-xref=\"Gtk.Widget.get_visible\"/>.</p><p>This function simply calls <span data-xref=\"Gtk.Widget.show\"/> or <span data-xref=\"Gtk.Widget.hide\"/>\nbut is nicer to use when the visibility of the widget depends on\nsome condition.</p>",
            "kind": "method",
            "name": "set_visible",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "visible",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the visual that should be used for by widget and its children for\ncreating #GdkWindows. The visual must be on the same <span data-xref=\"Gdk.Screen\">Gdk.Screen</span> as\nreturned by <span data-xref=\"Gtk.Widget.get_screen\"/>, so handling the\n<span data-xref=\"Gtk.Widget-screen-changed\"/> signal is necessary.</p><p>Setting a new <code>visual</code> will not cause <code>widget</code> to recreate its windows,\nso you should call this function before <code>widget</code> is realized.</p>",
            "kind": "method",
            "name": "set_visual",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "visual",
                    "direction": "in",
                    "type": "Gdk.Visual"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets a widget\u2019s window. This function should only be used in a\nwidget\u2019s <span data-xref=\"Gtk.Widget-realize\"/> implementation. The %window passed is\nusually either new window created with <span data-xref=\"Gdk.Window.new\">Gdk.Window.new</span>, or the\nwindow of its parent widget as returned by\n<span data-xref=\"Gtk.Widget.get_parent_window\"/>.</p><p>Widgets must indicate whether they will create their own <span data-xref=\"Gdk.Window\">Gdk.Window</span>\nby calling <span data-xref=\"Gtk.Widget.set_has_window\"/>. This is usually done in the\nwidget\u2019s init() function.</p><p>Note that this function does not add any reference to <code>window</code>.</p>",
            "kind": "method",
            "name": "set_window",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "window",
                    "direction": "in",
                    "type": "Gdk.Window"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets a shape for this widget\u2019s GDK window. This allows for\ntransparent windows etc., see <span data-xref=\"Gdk.Window.shape_combine_region\">Gdk.Window.prototype.shape_combine_region</span>\nfor more information.</p>",
            "kind": "method",
            "name": "shape_combine_region",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "region",
                    "direction": "in",
                    "type": "cairo.Region"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Flags a widget to be displayed. Any widget that isn\u2019t shown will\nnot appear on the screen. If you want to show all the widgets in a\ncontainer, it\u2019s easier to call <span data-xref=\"Gtk.Widget.show_all\"/> on the\ncontainer, instead of individually showing the widgets.</p><p>Remember that you have to show the containers containing a widget,\nin addition to the widget itself, before it will appear onscreen.</p><p>When a toplevel container is shown, it is immediately realized and\nmapped; other shown widgets are realized and mapped when their\ntoplevel container is realized and mapped.</p>",
            "kind": "method",
            "name": "show",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Recursively shows a widget, and any child widgets (if the widget is\na container).</p>",
            "kind": "method",
            "name": "show_all",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Shows a widget. If the widget is an unmapped toplevel widget\n(i.e. a <span data-xref=\"Gtk.Window\"/> that has not yet been shown), enter the main\nloop and wait for the window to actually be mapped. Be careful;\nbecause the main loop is running, anything can happen during\nthis function.</p>",
            "kind": "method",
            "name": "show_now",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>This function is only used by <span data-xref=\"Gtk.Container\"/> subclasses, to assign a size\nand position to their child widgets.</p><p>In this function, the allocation may be adjusted. It will be forced\nto a 1x1 minimum size, and the adjust_size_allocation virtual\nmethod on the child will be used to adjust the allocation. Standard\nadjustments include removing the widget\u2019s margins, and applying the\nwidget\u2019s <span data-xref=\"Gtk.Widget-halign\"/> and <span data-xref=\"Gtk.Widget-valign\"/> properties.</p><p>For baseline support in containers you need to use <span data-xref=\"Gtk.Widget.size_allocate_with_baseline\"/>\ninstead.</p>",
            "kind": "method",
            "name": "size_allocate",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "allocation",
                    "direction": "in",
                    "type": "Gtk.Allocation"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>This function is only used by <span data-xref=\"Gtk.Container\"/> subclasses, to assign a size,\nposition and (optionally) baseline to their child widgets.</p><p>In this function, the allocation and baseline may be adjusted. It\nwill be forced to a 1x1 minimum size, and the\nadjust_size_allocation virtual and adjust_baseline_allocation\nmethods on the child will be used to adjust the allocation and\nbaseline. Standard adjustments include removing the widget's\nmargins, and applying the widget\u2019s <span data-xref=\"Gtk.Widget-halign\"/> and\n<span data-xref=\"Gtk.Widget-valign\"/> properties.</p><p>If the child widget does not have a valign of <span data-xref=\"Gtk.Align\"/>.baseline the\nbaseline argument is ignored and -1 is used instead.</p>",
            "kind": "method",
            "name": "size_allocate_with_baseline",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "allocation",
                    "direction": "in",
                    "type": "Gtk.Allocation"
                },
                {
                    "allow_none": false,
                    "argname": "baseline",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>This function is typically used when implementing a <span data-xref=\"Gtk.Container\"/>\nsubclass.  Obtains the preferred size of a widget. The container\nuses this information to arrange its child widgets and decide what\nsize allocations to give them with <span data-xref=\"Gtk.Widget.size_allocate\"/>.</p><p>You can also call this function from an application, with some\ncaveats. Most notably, getting a size request requires the widget\nto be associated with a screen, because font information may be\nneeded. Multihead-aware applications should keep this in mind.</p><p>Also remember that the size request is not necessarily the size\na widget will actually be allocated.</p>",
            "kind": "method",
            "name": "size_request",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "requisition",
                    "direction": "out",
                    "type": "Gtk.Requisition"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>This function attaches the widget\u2019s <span data-xref=\"Gtk.Style\"/> to the widget's\n<span data-xref=\"Gdk.Window\">Gdk.Window</span>. It is a replacement for</p><p>|[\nwidget-&gt;style = gtk_style_attach (widget-&gt;style, widget-&gt;window);\n]|</p><p>and should only ever be called in a derived widget\u2019s \u201crealize\u201d\nimplementation which does not chain up to its parent class'\n\u201crealize\u201d implementation, because one of the parent classes\n(finally <span data-xref=\"Gtk.Widget\"/>) would attach the style itself.</p>",
            "kind": "method",
            "name": "style_attach",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Gets the values of a multiple style properties of <code>widget</code>.</p>",
            "kind": "method",
            "name": "style_get",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "first_property_name",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "...",
                    "direction": "in",
                    "type": "<varargs>"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Gets the value of a style property of <code>widget</code>.</p>",
            "kind": "method",
            "name": "style_get_property",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "property_name",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "value",
                    "direction": "in",
                    "type": "Any"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Non-vararg variant of <span data-xref=\"Gtk.Widget.style_get\"/>. Used primarily by language\nbindings.</p>",
            "kind": "method",
            "name": "style_get_valist",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "first_property_name",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "var_args",
                    "direction": "in",
                    "type": "va_list"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Reverts the effect of a previous call to <span data-xref=\"Gtk.Widget.freeze_child_notify\"/>.\nThis causes all queued <span data-xref=\"Gtk.Widget-child-notify\"/> signals on <code>widget</code> to be\nemitted.</p>",
            "kind": "method",
            "name": "thaw_child_notify",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Translate coordinates relative to <code>src_widget</code>\u2019s allocation to coordinates\nrelative to <code>dest_widget</code>\u2019s allocations. In order to perform this\noperation, both widgets must be realized, and must share a common\ntoplevel.</p>",
            "kind": "method",
            "name": "translate_coordinates",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "dest_widget",
                    "direction": "in",
                    "type": "Gtk.Widget"
                },
                {
                    "allow_none": false,
                    "argname": "src_x",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "src_y",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "dest_x",
                    "direction": "out",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "dest_y",
                    "direction": "out",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Triggers a tooltip query on the display where the toplevel of <code>widget</code>\nis located. See <span data-xref=\"Gtk.Tooltip.trigger_tooltip_query\"/> for more\ninformation.</p>",
            "kind": "method",
            "name": "trigger_tooltip_query",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>This function is only for use in widget implementations. Causes\na widget to be unmapped if it\u2019s currently mapped.</p>",
            "kind": "method",
            "name": "unmap",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>This function is only for use in widget implementations.\nShould be called by implementations of the remove method\non <span data-xref=\"Gtk.Container\"/>, to dissociate a child from the container.</p>",
            "kind": "method",
            "name": "unparent",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>This function is only useful in widget implementations.\nCauses a widget to be unrealized (frees all GDK resources\nassociated with the widget, such as <code>widget</code>-&gt;window).</p>",
            "kind": "method",
            "name": "unrealize",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Unregisters a <span data-xref=\"Gdk.Window\">Gdk.Window</span> from the widget that was previously set up with\n<span data-xref=\"Gtk.Widget.register_window\"/>. You need to call this when the window is\nno longer used by the widget, such as when you destroy it.</p>",
            "kind": "method",
            "name": "unregister_window",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "window",
                    "direction": "in",
                    "type": "Gdk.Window"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>This function is for use in widget implementations. Turns off flag\nvalues for the current widget state (insensitive, prelighted, etc.).\nSee <span data-xref=\"Gtk.Widget.set_state_flags\"/>.</p>",
            "kind": "method",
            "name": "unset_state_flags",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "flags",
                    "direction": "in",
                    "type": "Gtk.StateFlags"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        [
            {
                "doc": "<p>Obtains the current default reading direction. See\n<span data-xref=\"Gtk.Widget.set_default_direction\"/>.</p>",
                "kind": "function",
                "name": "get_default_direction",
                "parameters": [],
                "retval": {
                    "type": "Gtk.TextDirection"
                }
            },
            {
                "doc": "<p>Returns the default style used by all widgets initially.</p>",
                "kind": "function",
                "name": "get_default_style",
                "parameters": [],
                "retval": {
                    "type": "Gtk.Style"
                }
            },
            {
                "doc": "<p>Cancels the effect of a previous call to <span data-xref=\"Gtk.Widget.push_composite_child\"/>.</p>",
                "kind": "function",
                "name": "pop_composite_child",
                "parameters": [],
                "retval": {
                    "type": "void"
                }
            },
            {
                "doc": "<p>Makes all newly-created widgets as composite children until\nthe corresponding <span data-xref=\"Gtk.Widget.pop_composite_child\"/> call.</p><p>A composite child is a child that\u2019s an implementation detail of the\ncontainer it\u2019s inside and should not be visible to people using the\ncontainer. Composite children aren\u2019t treated differently by GTK (but\nsee <span data-xref=\"Gtk.Container.foreach\"/> vs. <span data-xref=\"Gtk.Container.forall\"/>), but e.g. GUI\nbuilders might want to treat them in a different way.</p>",
                "kind": "function",
                "name": "push_composite_child",
                "parameters": [],
                "retval": {
                    "type": "void"
                }
            },
            {
                "doc": "<p>Sets the default reading direction for widgets where the\ndirection has not been explicitly set by <span data-xref=\"Gtk.Widget.set_direction\"/>.</p>",
                "kind": "function",
                "name": "set_default_direction",
                "parameters": [
                    {
                        "allow_none": false,
                        "argname": "dir",
                        "direction": "in",
                        "type": "Gtk.TextDirection"
                    }
                ],
                "retval": {
                    "type": "void"
                }
            }
        ]
    ],
    "name": "Widget",
    "properties": [
        {
            "doc": "",
            "kind": "property",
            "name": "app-paintable",
            "type": "Boolean"
        },
        {
            "doc": "",
            "kind": "property",
            "name": "can-default",
            "type": "Boolean"
        },
        {
            "doc": "",
            "kind": "property",
            "name": "can-focus",
            "type": "Boolean"
        },
        {
            "doc": "",
            "kind": "property",
            "name": "composite-child",
            "type": "Boolean"
        },
        {
            "doc": "<p>Whether the widget is double buffered.</p>",
            "kind": "property",
            "name": "double-buffered",
            "type": "Boolean"
        },
        {
            "doc": "",
            "kind": "property",
            "name": "events",
            "type": "Gdk.EventMask"
        },
        {
            "doc": "<p>Whether to expand in both directions. Setting this sets both <span data-xref=\"Gtk.Widget-hexpand\"/> and <span data-xref=\"Gtk.Widget-vexpand\"/></p>",
            "kind": "property",
            "name": "expand",
            "type": "Boolean"
        },
        {
            "doc": "<p>How to distribute horizontal space if widget gets extra space, see <span data-xref=\"Gtk.Align\"/></p>",
            "kind": "property",
            "name": "halign",
            "type": "Gtk.Align"
        },
        {
            "doc": "",
            "kind": "property",
            "name": "has-default",
            "type": "Boolean"
        },
        {
            "doc": "",
            "kind": "property",
            "name": "has-focus",
            "type": "Boolean"
        },
        {
            "doc": "<p>Enables or disables the emission of <span data-xref=\"Gtk.Widget-query-tooltip\"/> on @widget.\nA value of <code>true</code> indicates that @widget can have a tooltip, in this case\nthe widget will be queried using <span data-xref=\"Gtk.Widget-query-tooltip\"/> to determine\nwhether it will provide a tooltip or not.</p><p>Note that setting this property to <code>true</code> for the first time will change\nthe event masks of the GdkWindows of this widget to include leave-notify\nand motion-notify events.  This cannot and will not be undone when the\nproperty is set to <code>false</code> again.</p>",
            "kind": "property",
            "name": "has-tooltip",
            "type": "Boolean"
        },
        {
            "doc": "",
            "kind": "property",
            "name": "height-request",
            "type": "Number(gint)"
        },
        {
            "doc": "<p>Whether to expand horizontally. See <span data-xref=\"Gtk.Widget.set_hexpand\"/>.</p>",
            "kind": "property",
            "name": "hexpand",
            "type": "Boolean"
        },
        {
            "doc": "<p>Whether to use the <span data-xref=\"Gtk.Widget-hexpand\"/> property. See <span data-xref=\"Gtk.Widget.get_hexpand_set\"/>.</p>",
            "kind": "property",
            "name": "hexpand-set",
            "type": "Boolean"
        },
        {
            "doc": "",
            "kind": "property",
            "name": "is-focus",
            "type": "Boolean"
        },
        {
            "doc": "<p>Sets all four sides' margin at once. If read, returns max\nmargin on any side.</p>",
            "kind": "property",
            "name": "margin",
            "type": "Number(gint)"
        },
        {
            "doc": "<p>Margin on bottom side of widget.</p><p>This property adds margin outside of the widget's normal size\nrequest, the margin will be added in addition to the size from\n<span data-xref=\"Gtk.Widget.set_size_request\"/> for example.</p>",
            "kind": "property",
            "name": "margin-bottom",
            "type": "Number(gint)"
        },
        {
            "doc": "<p>Margin on end of widget.</p><p>This property adds margin outside of the widget's normal size\nrequest, the margin will be added in addition to the size from\n<span data-xref=\"Gtk.Widget.set_size_request\"/> for example.</p>",
            "kind": "property",
            "name": "margin-end",
            "type": "Number(gint)"
        },
        {
            "doc": "<p>Margin on left side of widget.</p><p>This property adds margin outside of the widget's normal size\nrequest, the margin will be added in addition to the size from\n<span data-xref=\"Gtk.Widget.set_size_request\"/> for example.</p>",
            "kind": "property",
            "name": "margin-left",
            "type": "Number(gint)"
        },
        {
            "doc": "<p>Margin on right side of widget.</p><p>This property adds margin outside of the widget's normal size\nrequest, the margin will be added in addition to the size from\n<span data-xref=\"Gtk.Widget.set_size_request\"/> for example.</p>",
            "kind": "property",
            "name": "margin-right",
            "type": "Number(gint)"
        },
        {
            "doc": "<p>Margin on start of widget.</p><p>This property adds margin outside of the widget's normal size\nrequest, the margin will be added in addition to the size from\n<span data-xref=\"Gtk.Widget.set_size_request\"/> for example.</p>",
            "kind": "property",
            "name": "margin-start",
            "type": "Number(gint)"
        },
        {
            "doc": "<p>Margin on top side of widget.</p><p>This property adds margin outside of the widget's normal size\nrequest, the margin will be added in addition to the size from\n<span data-xref=\"Gtk.Widget.set_size_request\"/> for example.</p>",
            "kind": "property",
            "name": "margin-top",
            "type": "Number(gint)"
        },
        {
            "doc": "",
            "kind": "property",
            "name": "name",
            "type": "String"
        },
        {
            "doc": "",
            "kind": "property",
            "name": "no-show-all",
            "type": "Boolean"
        },
        {
            "doc": "<p>The requested opacity of the widget. See <span data-xref=\"Gtk.Widget.set_opacity\"/> for\nmore details about window opacity.</p><p>Before 3.8 this was only available in GtkWindow</p>",
            "kind": "property",
            "name": "opacity",
            "type": "Number(gdouble)"
        },
        {
            "doc": "",
            "kind": "property",
            "name": "parent",
            "type": "Gtk.Container"
        },
        {
            "doc": "",
            "kind": "property",
            "name": "receives-default",
            "type": "Boolean"
        },
        {
            "doc": "<p>The scale factor of the widget. See <span data-xref=\"Gtk.Widget.get_scale_factor\"/> for\nmore details about widget scaling.</p>",
            "kind": "property",
            "name": "scale-factor",
            "type": "Number(gint)"
        },
        {
            "doc": "",
            "kind": "property",
            "name": "sensitive",
            "type": "Boolean"
        },
        {
            "doc": "",
            "kind": "property",
            "name": "style",
            "type": "Gtk.Style"
        },
        {
            "doc": "<p>Sets the text of tooltip to be the given string, which is marked up\nwith the [Pango text markup language][PangoMarkupFormat].\nAlso see <span data-xref=\"Gtk.Tooltip.set_markup\"/>.</p><p>This is a convenience property which will take care of getting the\ntooltip shown if the given string is not <code>null</code>: <span data-xref=\"Gtk.Widget-has-tooltip\"/>\nwill automatically be set to <code>true</code> and there will be taken care of\n<span data-xref=\"Gtk.Widget-query-tooltip\"/> in the default signal handler.</p>",
            "kind": "property",
            "name": "tooltip-markup",
            "type": "String"
        },
        {
            "doc": "<p>Sets the text of tooltip to be the given string.</p><p>Also see <span data-xref=\"Gtk.Tooltip.set_text\"/>.</p><p>This is a convenience property which will take care of getting the\ntooltip shown if the given string is not <code>null</code>: <span data-xref=\"Gtk.Widget-has-tooltip\"/>\nwill automatically be set to <code>true</code> and there will be taken care of\n<span data-xref=\"Gtk.Widget-query-tooltip\"/> in the default signal handler.</p>",
            "kind": "property",
            "name": "tooltip-text",
            "type": "String"
        },
        {
            "doc": "<p>How to distribute vertical space if widget gets extra space, see <span data-xref=\"Gtk.Align\"/></p>",
            "kind": "property",
            "name": "valign",
            "type": "Gtk.Align"
        },
        {
            "doc": "<p>Whether to expand vertically. See <span data-xref=\"Gtk.Widget.set_vexpand\"/>.</p>",
            "kind": "property",
            "name": "vexpand",
            "type": "Boolean"
        },
        {
            "doc": "<p>Whether to use the <span data-xref=\"Gtk.Widget-vexpand\"/> property. See <span data-xref=\"Gtk.Widget.get_vexpand_set\"/>.</p>",
            "kind": "property",
            "name": "vexpand-set",
            "type": "Boolean"
        },
        {
            "doc": "",
            "kind": "property",
            "name": "visible",
            "type": "Boolean"
        },
        {
            "doc": "",
            "kind": "property",
            "name": "width-request",
            "type": "Number(gint)"
        },
        {
            "doc": "<p>The widget's window if it is realized, <code>null</code> otherwise.</p>",
            "kind": "property",
            "name": "window",
            "type": "Gdk.Window"
        }
    ],
    "signals": [
        {
            "doc": "",
            "kind": "signal",
            "name": "accel-closures-changed",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::button-press-event signal will be emitted when a button\n(typically from a mouse) is pressed.</p><p>To receive this signal, the <span data-xref=\"Gdk.Window\">Gdk.Window</span> associated to the\nwidget needs to enable the #GDK_BUTTON_PRESS_MASK mask.</p><p>This signal will be sent to the grab widget if there is one.</p>",
            "kind": "signal",
            "name": "button-press-event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventButton"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>The ::button-release-event signal will be emitted when a button\n(typically from a mouse) is released.</p><p>To receive this signal, the <span data-xref=\"Gdk.Window\">Gdk.Window</span> associated to the\nwidget needs to enable the #GDK_BUTTON_RELEASE_MASK mask.</p><p>This signal will be sent to the grab widget if there is one.</p>",
            "kind": "signal",
            "name": "button-release-event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventButton"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Determines whether an accelerator that activates the signal\nidentified by <code>signal_id</code> can currently be activated.\nThis signal is present to allow applications and derived\nwidgets to override the default <span data-xref=\"Gtk.Widget\"/> handling\nfor determining whether an accelerator can be activated.</p>",
            "kind": "signal",
            "name": "can-activate-accel",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "signal_id",
                    "direction": "in",
                    "type": "Number(guint)"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>The ::child-notify signal is emitted for each\n[child property][child-properties]  that has\nchanged on an object. The signal's detail holds the property name.</p>",
            "kind": "signal",
            "name": "child-notify",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "child_property",
                    "direction": "in",
                    "type": "GObject.ParamSpec"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::composited-changed signal is emitted when the composited\nstatus of @widgets screen changes.\nSee <span data-xref=\"Gdk.Screen.is_composited\">Gdk.Screen.prototype.is_composited</span>.</p>",
            "kind": "signal",
            "name": "composited-changed",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::configure-event signal will be emitted when the size, position or\nstacking of the @widget's window has changed.</p><p>To receive this signal, the <span data-xref=\"Gdk.Window\">Gdk.Window</span> associated to the widget needs\nto enable the #GDK_STRUCTURE_MASK mask. GDK will enable this mask\nautomatically for all new windows.</p>",
            "kind": "signal",
            "name": "configure-event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventConfigure"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Emitted when a redirected window belonging to @widget gets drawn into.\nThe region/area members of the event shows what area of the redirected\ndrawable was drawn into.</p>",
            "kind": "signal",
            "name": "damage-event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventExpose"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>The ::delete-event signal is emitted if a user requests that\na toplevel window is closed. The default handler for this signal\ndestroys the window. Connecting <span data-xref=\"Gtk.Widget.hide_on_delete\"/> to\nthis signal will cause the window to be hidden instead, so that\nit can later be shown again without reconstructing it.</p>",
            "kind": "signal",
            "name": "delete-event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.Event"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Signals that all holders of a reference to the widget should release\nthe reference that they hold. May result in finalization of the widget\nif all references are released.</p>",
            "kind": "signal",
            "name": "destroy",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::destroy-event signal is emitted when a <span data-xref=\"Gdk.Window\">Gdk.Window</span> is destroyed.\nYou rarely get this signal, because most widgets disconnect themselves\nfrom their window before they destroy it, so no widget owns the\nwindow at destroy time.</p><p>To receive this signal, the <span data-xref=\"Gdk.Window\">Gdk.Window</span> associated to the widget needs\nto enable the #GDK_STRUCTURE_MASK mask. GDK will enable this mask\nautomatically for all new windows.</p>",
            "kind": "signal",
            "name": "destroy-event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.Event"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>The ::direction-changed signal is emitted when the text direction\nof a widget changes.</p>",
            "kind": "signal",
            "name": "direction-changed",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "previous_direction",
                    "direction": "in",
                    "type": "Gtk.TextDirection"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::drag-begin signal is emitted on the drag source when a drag is\nstarted. A typical reason to connect to this signal is to set up a\ncustom drag icon with e.g. <span data-xref=\"Gtk.Widget.drag_source_set_icon_pixbuf\"/>.</p><p>Note that some widgets set up a drag icon in the default handler of\nthis signal, so you may have to use g_signal_connect_after() to\noverride what the default handler did.</p>",
            "kind": "signal",
            "name": "drag-begin",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "context",
                    "direction": "in",
                    "type": "Gdk.DragContext"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::drag-data-delete signal is emitted on the drag source when a drag\nwith the action <span data-xref=\"Gdk.DragAction\">Gdk.DragAction</span>.move is successfully completed. The signal\nhandler is responsible for deleting the data that has been dropped. What\n\"delete\" means depends on the context of the drag operation.</p>",
            "kind": "signal",
            "name": "drag-data-delete",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "context",
                    "direction": "in",
                    "type": "Gdk.DragContext"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::drag-data-get signal is emitted on the drag source when the drop\nsite requests the data which is dragged. It is the responsibility of\nthe signal handler to fill <code>data</code> with the data in the format which\nis indicated by <code>info</code>. See <span data-xref=\"Gtk.SelectionData.set\"/> and\n<span data-xref=\"Gtk.SelectionData.set_text\"/>.</p>",
            "kind": "signal",
            "name": "drag-data-get",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "context",
                    "direction": "in",
                    "type": "Gdk.DragContext"
                },
                {
                    "allow_none": false,
                    "argname": "data",
                    "direction": "in",
                    "type": "Gtk.SelectionData"
                },
                {
                    "allow_none": false,
                    "argname": "info",
                    "direction": "in",
                    "type": "Number(guint)"
                },
                {
                    "allow_none": false,
                    "argname": "time",
                    "direction": "in",
                    "type": "Number(guint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::drag-data-received signal is emitted on the drop site when the\ndragged data has been received. If the data was received in order to\ndetermine whether the drop will be accepted, the handler is expected\nto call <span data-xref=\"Gdk.drag_status\">Gdk.drag_status</span> and not finish the drag.\nIf the data was received in response to a <span data-xref=\"Gtk.Widget-drag-drop\"/> signal\n(and this is the last target to be received), the handler for this\nsignal is expected to process the received data and then call\n<span data-xref=\"Gtk.drag_finish\"/>, setting the @success parameter depending on\nwhether the data was processed successfully.</p><p>Applications must create some means to determine why the signal was emitted\nand therefore whether to call <span data-xref=\"Gdk.drag_status\">Gdk.drag_status</span> or <span data-xref=\"Gtk.drag_finish\"/>.</p><p>The handler may inspect the selected action with\n<span data-xref=\"Gdk.DragContext.get_selected_action\">Gdk.DragContext.prototype.get_selected_action</span> before calling\n<span data-xref=\"Gtk.drag_finish\"/>, e.g. to implement <span data-xref=\"Gdk.DragAction\">Gdk.DragAction</span>.ask as\nshown in the following example:\n|[&lt;!-- language=\"C\" --&gt;\nvoid\ndrag_data_received (GtkWidget          <em>widget,\n                    GdkDragContext     </em>context,\n                    gint                x,\n                    gint                y,\n                    GtkSelectionData   *data,\n                    guint               info,\n                    guint               time)\n{\n  if ((data-&gt;length &gt;= 0) &amp;&amp; (data-&gt;format == 8))\n    {\n      GdkDragAction action;</p><pre><code>  // handle data here\n</code></pre><pre><code>  action = gdk_drag_context_get_selected_action (context);\n  if (action == GDK_ACTION_ASK)\n    {\n      GtkWidget *dialog;\n      gint response;\n</code></pre><pre><code>      dialog = gtk_message_dialog_new (NULL,\n                                       GTK_DIALOG_MODAL |\n                                       GTK_DIALOG_DESTROY_WITH_PARENT,\n                                       GTK_MESSAGE_INFO,\n                                       GTK_BUTTONS_YES_NO,\n                                       \"Move the data ?\\n\");\n      response = gtk_dialog_run (GTK_DIALOG (dialog));\n      gtk_widget_destroy (dialog);\n</code></pre><pre><code>      if (response == GTK_RESPONSE_YES)\n        action = GDK_ACTION_MOVE;\n      else\n        action = GDK_ACTION_COPY;\n     }\n</code></pre><pre><code>  gtk_drag_finish (context, TRUE, action == GDK_ACTION_MOVE, time);\n}\n</code></pre>\n<p>else\n    gtk_drag_finish (context, FALSE, FALSE, time);\n }\n]|</p>",
            "kind": "signal",
            "name": "drag-data-received",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "context",
                    "direction": "in",
                    "type": "Gdk.DragContext"
                },
                {
                    "allow_none": false,
                    "argname": "x",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "y",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "data",
                    "direction": "in",
                    "type": "Gtk.SelectionData"
                },
                {
                    "allow_none": false,
                    "argname": "info",
                    "direction": "in",
                    "type": "Number(guint)"
                },
                {
                    "allow_none": false,
                    "argname": "time",
                    "direction": "in",
                    "type": "Number(guint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::drag-drop signal is emitted on the drop site when the user drops\nthe data onto the widget. The signal handler must determine whether\nthe cursor position is in a drop zone or not. If it is not in a drop\nzone, it returns <code>false</code> and no further processing is necessary.\nOtherwise, the handler returns <code>true</code>. In this case, the handler must\nensure that <span data-xref=\"Gtk.drag_finish\"/> is called to let the source know that\nthe drop is done. The call to <span data-xref=\"Gtk.drag_finish\"/> can be done either\ndirectly or in a <span data-xref=\"Gtk.Widget-drag-data-received\"/> handler which gets\ntriggered by calling <span data-xref=\"Gtk.Widget.drag_get_data\"/> to receive the data for one\nor more of the supported targets.</p>",
            "kind": "signal",
            "name": "drag-drop",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "context",
                    "direction": "in",
                    "type": "Gdk.DragContext"
                },
                {
                    "allow_none": false,
                    "argname": "x",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "y",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "time",
                    "direction": "in",
                    "type": "Number(guint)"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>The ::drag-end signal is emitted on the drag source when a drag is\nfinished.  A typical reason to connect to this signal is to undo\nthings done in <span data-xref=\"Gtk.Widget-drag-begin\"/>.</p>",
            "kind": "signal",
            "name": "drag-end",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "context",
                    "direction": "in",
                    "type": "Gdk.DragContext"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::drag-failed signal is emitted on the drag source when a drag has\nfailed. The signal handler may hook custom code to handle a failed DND\noperation based on the type of error, it returns <code>true</code> is the failure has\nbeen already handled (not showing the default \"drag operation failed\"\nanimation), otherwise it returns <code>false</code>.</p>",
            "kind": "signal",
            "name": "drag-failed",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "context",
                    "direction": "in",
                    "type": "Gdk.DragContext"
                },
                {
                    "allow_none": false,
                    "argname": "result",
                    "direction": "in",
                    "type": "Gtk.DragResult"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>The ::drag-leave signal is emitted on the drop site when the cursor\nleaves the widget. A typical reason to connect to this signal is to\nundo things done in <span data-xref=\"Gtk.Widget-drag-motion\"/>, e.g. undo highlighting\nwith <span data-xref=\"Gtk.Widget.drag_unhighlight\"/>.</p><p>Likewise, the <span data-xref=\"Gtk.Widget-drag-leave\"/> signal is also emitted before the\n::drag-drop signal, for instance to allow cleaning up of a preview item\ncreated in the <span data-xref=\"Gtk.Widget-drag-motion\"/> signal handler.</p>",
            "kind": "signal",
            "name": "drag-leave",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "context",
                    "direction": "in",
                    "type": "Gdk.DragContext"
                },
                {
                    "allow_none": false,
                    "argname": "time",
                    "direction": "in",
                    "type": "Number(guint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::drag-motion signal is emitted on the drop site when the user\nmoves the cursor over the widget during a drag. The signal handler\nmust determine whether the cursor position is in a drop zone or not.\nIf it is not in a drop zone, it returns <code>false</code> and no further processing\nis necessary. Otherwise, the handler returns <code>true</code>. In this case, the\nhandler is responsible for providing the necessary information for\ndisplaying feedback to the user, by calling <span data-xref=\"Gdk.drag_status\">Gdk.drag_status</span>.</p><p>If the decision whether the drop will be accepted or rejected can't be\nmade based solely on the cursor position and the type of the data, the\nhandler may inspect the dragged data by calling <span data-xref=\"Gtk.Widget.drag_get_data\"/> and\ndefer the <span data-xref=\"Gdk.drag_status\">Gdk.drag_status</span> call to the <span data-xref=\"Gtk.Widget-drag-data-received\"/>\nhandler. Note that you cannot not pass #GTK_DEST_DEFAULT_DROP,</p>\n<h1>GTK_DEST_DEFAULT_MOTION or #GTK_DEST_DEFAULT_ALL to <span data-xref=\"Gtk.Widget.drag_dest_set\"/></h1>\n<p>when using the drag-motion signal that way.</p><p>Also note that there is no drag-enter signal. The drag receiver has to\nkeep track of whether he has received any drag-motion signals since the\nlast <span data-xref=\"Gtk.Widget-drag-leave\"/> and if not, treat the drag-motion signal as\nan \"enter\" signal. Upon an \"enter\", the handler will typically highlight\nthe drop site with <span data-xref=\"Gtk.Widget.drag_highlight\"/>.\n|[&lt;!-- language=\"C\" --&gt;\nstatic void\ndrag_motion (GtkWidget      <em>widget,\n             GdkDragContext </em>context,\n             gint            x,\n             gint            y,\n             guint           time)\n{\n  GdkAtom target;</p><p>PrivateData *private_data = GET_PRIVATE_DATA (widget);</p><p>if (!private_data-&gt;drag_highlight)\n   {\n     private_data-&gt;drag_highlight = 1;\n     gtk_drag_highlight (widget);\n   }</p><p>target = gtk_drag_dest_find_target (widget, context, NULL);\n  if (target == GDK_NONE)\n    gdk_drag_status (context, 0, time);\n  else\n   {\n     private_data-&gt;pending_status\n        = gdk_drag_context_get_suggested_action (context);\n     gtk_drag_get_data (widget, context, target, time);\n   }</p><p>return TRUE;\n}</p><p>static void\ndrag_data_received (GtkWidget        <em>widget,\n                    GdkDragContext   </em>context,\n                    gint              x,\n                    gint              y,\n                    GtkSelectionData <em>selection_data,\n                    guint             info,\n                    guint             time)\n{\n  PrivateData </em>private_data = GET_PRIVATE_DATA (widget);</p><p>if (private_data-&gt;suggested_action)\n   {\n     private_data-&gt;suggested_action = 0;</p><pre><code> // We are getting this data due to a request in drag_motion,\n // rather than due to a request in drag_drop, so we are just\n // supposed to call &lt;span data-xref=\"Gdk.drag_status\"&gt;Gdk.drag_status&lt;/span&gt;, not actually paste in\n // the data.\n</code></pre><pre><code> str = gtk_selection_data_get_text (selection_data);\n if (!data_is_acceptable (str))\n   gdk_drag_status (context, 0, time);\n else\n   gdk_drag_status (context,\n                    private_data-&amp;gt;suggested_action,\n                    time);\n</code></pre>\n<p>}\n  else\n   {\n     // accept the drop\n   }\n}\n]|</p>",
            "kind": "signal",
            "name": "drag-motion",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "context",
                    "direction": "in",
                    "type": "Gdk.DragContext"
                },
                {
                    "allow_none": false,
                    "argname": "x",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "y",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "time",
                    "direction": "in",
                    "type": "Number(guint)"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>This signal is emitted when a widget is supposed to render itself.\nThe @widget's top left corner must be painted at the origin of\nthe passed in context and be sized to the values returned by\n<span data-xref=\"Gtk.Widget.get_allocated_width\"/> and\n<span data-xref=\"Gtk.Widget.get_allocated_height\"/>.</p><p>Signal handlers connected to this signal can modify the cairo\ncontext passed as <code>cr</code> in any way they like and don't need to\nrestore it. The signal emission takes care of calling cairo_save()\nbefore and cairo_restore() after invoking the handler.</p><p>The signal handler will get a <code>cr</code> with a clip region already set to the\nwidget's dirty region, i.e. to the area that needs repainting.  Complicated\nwidgets that want to avoid redrawing themselves completely can get the full\nextents of the clip region with <span data-xref=\"Gdk.cairo_get_clip_rectangle\">Gdk.cairo_get_clip_rectangle</span>, or they can\nget a finer-grained representation of the dirty region with\ncairo_copy_clip_rectangle_list().</p>",
            "kind": "signal",
            "name": "draw",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "cr",
                    "direction": "in",
                    "type": "cairo.Context"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>The ::enter-notify-event will be emitted when the pointer enters\nthe @widget's window.</p><p>To receive this signal, the <span data-xref=\"Gdk.Window\">Gdk.Window</span> associated to the widget needs\nto enable the #GDK_ENTER_NOTIFY_MASK mask.</p><p>This signal will be sent to the grab widget if there is one.</p>",
            "kind": "signal",
            "name": "enter-notify-event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventCrossing"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>The GTK+ main loop will emit three signals for each GDK event delivered\nto a widget: one generic ::event signal, another, more specific,\nsignal that matches the type of event delivered (e.g.\n<span data-xref=\"Gtk.Widget-key-press-event\"/>) and finally a generic\n<span data-xref=\"Gtk.Widget-event-after\"/> signal.</p>",
            "kind": "signal",
            "name": "event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.Event"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>After the emission of the <span data-xref=\"Gtk.Widget-event\"/> signal and (optionally)\nthe second more specific signal, ::event-after will be emitted\nregardless of the previous two signals handlers return values.</p>",
            "kind": "signal",
            "name": "event-after",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.Event"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "signal",
            "name": "focus",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "direction",
                    "direction": "in",
                    "type": "Gtk.DirectionType"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>The ::focus-in-event signal will be emitted when the keyboard focus\nenters the @widget's window.</p><p>To receive this signal, the <span data-xref=\"Gdk.Window\">Gdk.Window</span> associated to the widget needs\nto enable the #GDK_FOCUS_CHANGE_MASK mask.</p>",
            "kind": "signal",
            "name": "focus-in-event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventFocus"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>The ::focus-out-event signal will be emitted when the keyboard focus\nleaves the @widget's window.</p><p>To receive this signal, the <span data-xref=\"Gdk.Window\">Gdk.Window</span> associated to the widget needs\nto enable the #GDK_FOCUS_CHANGE_MASK mask.</p>",
            "kind": "signal",
            "name": "focus-out-event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventFocus"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Emitted when a pointer or keyboard grab on a window belonging\nto @widget gets broken.</p><p>On X11, this happens when the grab window becomes unviewable\n(i.e. it or one of its ancestors is unmapped), or if the same\napplication grabs the pointer or keyboard again.</p>",
            "kind": "signal",
            "name": "grab-broken-event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventGrabBroken"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "signal",
            "name": "grab-focus",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::grab-notify signal is emitted when a widget becomes\nshadowed by a GTK+ grab (not a pointer or keyboard grab) on\nanother widget, or when it becomes unshadowed due to a grab\nbeing removed.</p><p>A widget is shadowed by a <span data-xref=\"Gtk.Widget.grab_add\"/> when the topmost\ngrab widget in the grab stack of its window group is not\nits ancestor.</p>",
            "kind": "signal",
            "name": "grab-notify",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "was_grabbed",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::hide signal is emitted when @widget is hidden, for example with\n<span data-xref=\"Gtk.Widget.hide\"/>.</p>",
            "kind": "signal",
            "name": "hide",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::hierarchy-changed signal is emitted when the\nanchored state of a widget changes. A widget is\n\u201canchored\u201d when its toplevel\nancestor is a <span data-xref=\"Gtk.Window\"/>. This signal is emitted when\na widget changes from un-anchored to anchored or vice-versa.</p>",
            "kind": "signal",
            "name": "hierarchy-changed",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "previous_toplevel",
                    "direction": "in",
                    "type": "Gtk.Widget"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::key-press-event signal is emitted when a key is pressed. The signal\nemission will reoccur at the key-repeat rate when the key is kept pressed.</p><p>To receive this signal, the <span data-xref=\"Gdk.Window\">Gdk.Window</span> associated to the widget needs\nto enable the #GDK_KEY_PRESS_MASK mask.</p><p>This signal will be sent to the grab widget if there is one.</p>",
            "kind": "signal",
            "name": "key-press-event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventKey"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>The ::key-release-event signal is emitted when a key is released.</p><p>To receive this signal, the <span data-xref=\"Gdk.Window\">Gdk.Window</span> associated to the widget needs\nto enable the #GDK_KEY_RELEASE_MASK mask.</p><p>This signal will be sent to the grab widget if there is one.</p>",
            "kind": "signal",
            "name": "key-release-event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventKey"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Gets emitted if keyboard navigation fails.\nSee <span data-xref=\"Gtk.Widget.keynav_failed\"/> for details.</p>",
            "kind": "signal",
            "name": "keynav-failed",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "direction",
                    "direction": "in",
                    "type": "Gtk.DirectionType"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>The ::leave-notify-event will be emitted when the pointer leaves\nthe @widget's window.</p><p>To receive this signal, the <span data-xref=\"Gdk.Window\">Gdk.Window</span> associated to the widget needs\nto enable the #GDK_LEAVE_NOTIFY_MASK mask.</p><p>This signal will be sent to the grab widget if there is one.</p>",
            "kind": "signal",
            "name": "leave-notify-event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventCrossing"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>The ::map signal is emitted when @widget is going to be mapped, that is\nwhen the widget is visible (which is controlled with\n<span data-xref=\"Gtk.Widget.set_visible\"/>) and all its parents up to the toplevel widget\nare also visible. Once the map has occurred, <span data-xref=\"Gtk.Widget-map-event\"/> will\nbe emitted.</p><p>The ::map signal can be used to determine whether a widget will be drawn,\nfor instance it can resume an animation that was stopped during the\nemission of <span data-xref=\"Gtk.Widget-unmap\"/>.</p>",
            "kind": "signal",
            "name": "map",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::map-event signal will be emitted when the @widget's window is\nmapped. A window is mapped when it becomes visible on the screen.</p><p>To receive this signal, the <span data-xref=\"Gdk.Window\">Gdk.Window</span> associated to the widget needs\nto enable the #GDK_STRUCTURE_MASK mask. GDK will enable this mask\nautomatically for all new windows.</p>",
            "kind": "signal",
            "name": "map-event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventAny"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "signal",
            "name": "mnemonic-activate",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "arg1",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>The ::motion-notify-event signal is emitted when the pointer moves\nover the widget's <span data-xref=\"Gdk.Window\">Gdk.Window</span>.</p><p>To receive this signal, the <span data-xref=\"Gdk.Window\">Gdk.Window</span> associated to the widget\nneeds to enable the #GDK_POINTER_MOTION_MASK mask.</p><p>This signal will be sent to the grab widget if there is one.</p>",
            "kind": "signal",
            "name": "motion-notify-event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventMotion"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "signal",
            "name": "move-focus",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "direction",
                    "direction": "in",
                    "type": "Gtk.DirectionType"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::parent-set signal is emitted when a new parent\nhas been set on a widget.</p>",
            "kind": "signal",
            "name": "parent-set",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "old_parent",
                    "direction": "in",
                    "type": "Gtk.Widget"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>This signal gets emitted whenever a widget should pop up a context\nmenu. This usually happens through the standard key binding mechanism;\nby pressing a certain key while a widget is focused, the user can cause\nthe widget to pop up a menu.  For example, the <span data-xref=\"Gtk.Entry\"/> widget creates\na menu with clipboard commands. See the\n[Popup Menu Migration Checklist][checklist-popup-menu]\nfor an example of how to use this signal.</p>",
            "kind": "signal",
            "name": "popup-menu",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>The ::property-notify-event signal will be emitted when a property on\nthe @widget's window has been changed or deleted.</p><p>To receive this signal, the <span data-xref=\"Gdk.Window\">Gdk.Window</span> associated to the widget needs\nto enable the #GDK_PROPERTY_CHANGE_MASK mask.</p>",
            "kind": "signal",
            "name": "property-notify-event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventProperty"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>To receive this signal the <span data-xref=\"Gdk.Window\">Gdk.Window</span> associated to the widget needs\nto enable the #GDK_PROXIMITY_IN_MASK mask.</p><p>This signal will be sent to the grab widget if there is one.</p>",
            "kind": "signal",
            "name": "proximity-in-event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventProximity"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>To receive this signal the <span data-xref=\"Gdk.Window\">Gdk.Window</span> associated to the widget needs\nto enable the #GDK_PROXIMITY_OUT_MASK mask.</p><p>This signal will be sent to the grab widget if there is one.</p>",
            "kind": "signal",
            "name": "proximity-out-event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventProximity"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Emitted when <span data-xref=\"Gtk.Widget-has-tooltip\"/> is <code>true</code> and the hover timeout\nhas expired with the cursor hovering \"above\" @widget; or emitted when @widget got\nfocus in keyboard mode.</p><p>Using the given coordinates, the signal handler should determine\nwhether a tooltip should be shown for @widget. If this is the case\n<code>true</code> should be returned, <code>false</code> otherwise.  Note that if\n<code>keyboard_mode</code> is <code>true</code>, the values of <code>x</code> and <code>y</code> are undefined and\nshould not be used.</p><p>The signal handler is free to manipulate <code>tooltip</code> with the therefore\ndestined function calls.</p>",
            "kind": "signal",
            "name": "query-tooltip",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "x",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "y",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "keyboard_mode",
                    "direction": "in",
                    "type": "Boolean"
                },
                {
                    "allow_none": false,
                    "argname": "tooltip",
                    "direction": "in",
                    "type": "Gtk.Tooltip"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>The ::realize signal is emitted when @widget is associated with a\n<span data-xref=\"Gdk.Window\">Gdk.Window</span>, which means that <span data-xref=\"Gtk.Widget.realize\"/> has been called or the\nwidget has been mapped (that is, it is going to be drawn).</p>",
            "kind": "signal",
            "name": "realize",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::screen-changed signal gets emitted when the\nscreen of a widget has changed.</p>",
            "kind": "signal",
            "name": "screen-changed",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "previous_screen",
                    "direction": "in",
                    "type": "Gdk.Screen"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::scroll-event signal is emitted when a button in the 4 to 7\nrange is pressed. Wheel mice are usually configured to generate\nbutton press events for buttons 4 and 5 when the wheel is turned.</p><p>To receive this signal, the <span data-xref=\"Gdk.Window\">Gdk.Window</span> associated to the widget needs\nto enable the #GDK_SCROLL_MASK mask.</p><p>This signal will be sent to the grab widget if there is one.</p>",
            "kind": "signal",
            "name": "scroll-event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventScroll"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>The ::selection-clear-event signal will be emitted when the\nthe @widget's window has lost ownership of a selection.</p>",
            "kind": "signal",
            "name": "selection-clear-event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventSelection"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "signal",
            "name": "selection-get",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "data",
                    "direction": "in",
                    "type": "Gtk.SelectionData"
                },
                {
                    "allow_none": false,
                    "argname": "info",
                    "direction": "in",
                    "type": "Number(guint)"
                },
                {
                    "allow_none": false,
                    "argname": "time",
                    "direction": "in",
                    "type": "Number(guint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "signal",
            "name": "selection-notify-event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventSelection"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "signal",
            "name": "selection-received",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "data",
                    "direction": "in",
                    "type": "Gtk.SelectionData"
                },
                {
                    "allow_none": false,
                    "argname": "time",
                    "direction": "in",
                    "type": "Number(guint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::selection-request-event signal will be emitted when\nanother client requests ownership of the selection owned by\nthe @widget's window.</p>",
            "kind": "signal",
            "name": "selection-request-event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventSelection"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>The ::show signal is emitted when @widget is shown, for example with\n<span data-xref=\"Gtk.Widget.show\"/>.</p>",
            "kind": "signal",
            "name": "show",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "signal",
            "name": "show-help",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "help_type",
                    "direction": "in",
                    "type": "Gtk.WidgetHelpType"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "signal",
            "name": "size-allocate",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "allocation",
                    "direction": "in",
                    "type": "cairo.RectangleInt"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::state-changed signal is emitted when the widget state changes.\nSee <span data-xref=\"Gtk.Widget.get_state\"/>.</p>",
            "kind": "signal",
            "name": "state-changed",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "state",
                    "direction": "in",
                    "type": "Gtk.StateType"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::state-flags-changed signal is emitted when the widget state\nchanges, see <span data-xref=\"Gtk.Widget.get_state_flags\"/>.</p>",
            "kind": "signal",
            "name": "state-flags-changed",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "flags",
                    "direction": "in",
                    "type": "Gtk.StateFlags"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::style-set signal is emitted when a new style has been set\non a widget. Note that style-modifying functions like\n<span data-xref=\"Gtk.Widget.modify_base\"/> also cause this signal to be emitted.</p><p>Note that this signal is emitted for changes to the deprecated\n<span data-xref=\"Gtk.Style\"/>. To track changes to the <span data-xref=\"Gtk.StyleContext\"/> associated\nwith a widget, use the <span data-xref=\"Gtk.Widget-style-updated\"/> signal.</p>",
            "kind": "signal",
            "name": "style-set",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "previous_style",
                    "direction": "in",
                    "type": "Gtk.Style"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::style-updated signal is emitted when the <span data-xref=\"Gtk.StyleContext\"/>\nof a widget is changed. Note that style-modifying functions like\n<span data-xref=\"Gtk.Widget.override_color\"/> also cause this signal to be emitted.</p>",
            "kind": "signal",
            "name": "style-updated",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "signal",
            "name": "touch-event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "object",
                    "direction": "in",
                    "type": "Gdk.Event"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>The ::unmap signal is emitted when @widget is going to be unmapped, which\nmeans that either it or any of its parents up to the toplevel widget have\nbeen set as hidden.</p><p>As ::unmap indicates that a widget will not be shown any longer, it can be\nused to, for example, stop an animation on the widget.</p>",
            "kind": "signal",
            "name": "unmap",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::unmap-event signal will be emitted when the @widget's window is\nunmapped. A window is unmapped when it becomes invisible on the screen.</p><p>To receive this signal, the <span data-xref=\"Gdk.Window\">Gdk.Window</span> associated to the widget needs\nto enable the #GDK_STRUCTURE_MASK mask. GDK will enable this mask\nautomatically for all new windows.</p>",
            "kind": "signal",
            "name": "unmap-event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventAny"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>The ::unrealize signal is emitted when the <span data-xref=\"Gdk.Window\">Gdk.Window</span> associated with\n@widget is destroyed, which means that <span data-xref=\"Gtk.Widget.unrealize\"/> has been\ncalled or the widget has been unmapped (that is, it is going to be\nhidden).</p>",
            "kind": "signal",
            "name": "unrealize",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::visibility-notify-event will be emitted when the @widget's\nwindow is obscured or unobscured.</p><p>To receive this signal the <span data-xref=\"Gdk.Window\">Gdk.Window</span> associated to the widget needs\nto enable the #GDK_VISIBILITY_NOTIFY_MASK mask.</p>",
            "kind": "signal",
            "name": "visibility-notify-event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventVisibility"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>The ::window-state-event will be emitted when the state of the\ntoplevel window associated to the @widget changes.</p><p>To receive this signal the <span data-xref=\"Gdk.Window\">Gdk.Window</span> associated to the widget\nneeds to enable the #GDK_STRUCTURE_MASK mask. GDK will enable\nthis mask automatically for all new windows.</p>",
            "kind": "signal",
            "name": "window-state-event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventWindowState"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        }
    ],
    "vfuncs": [
        {
            "doc": "",
            "kind": "vfunc",
            "name": "adjust_baseline_allocation",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "baseline",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "adjust_baseline_request",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "minimum_baseline",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "natural_baseline",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "adjust_size_allocation",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "orientation",
                    "direction": "in",
                    "type": "Gtk.Orientation"
                },
                {
                    "allow_none": false,
                    "argname": "minimum_size",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "natural_size",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "allocated_pos",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "allocated_size",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "adjust_size_request",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "orientation",
                    "direction": "in",
                    "type": "Gtk.Orientation"
                },
                {
                    "allow_none": false,
                    "argname": "minimum_size",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "natural_size",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "button_press_event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventButton"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "button_release_event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventButton"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Determines whether an accelerator that activates the signal\nidentified by <code>signal_id</code> can currently be activated.\nThis is done by emitting the <span data-xref=\"Gtk.Widget-can-activate-accel\"/>\nsignal on <code>widget</code>; if the signal isn\u2019t overridden by a\nhandler or in a derived widget, then the default check is\nthat the widget must be sensitive, and the widget and all\nits ancestors mapped.</p>",
            "kind": "vfunc",
            "name": "can_activate_accel",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "signal_id",
                    "direction": "in",
                    "type": "Number(guint)"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Emits a <span data-xref=\"Gtk.Widget-child-notify\"/> signal for the\n[child property][child-properties] <code>child_property</code>\non <code>widget</code>.</p><p>This is the analogue of <span data-xref=\"GObject.Object.notify\">GObject.Object.prototype.notify</span> for child properties.</p><p>Also see <span data-xref=\"Gtk.Container.child_notify\"/>.</p>",
            "kind": "vfunc",
            "name": "child_notify",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "child_property",
                    "direction": "in",
                    "type": "GObject.ParamSpec"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "composited_changed",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "compute_expand",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "hexpand_p",
                    "direction": "in",
                    "type": "Boolean"
                },
                {
                    "allow_none": false,
                    "argname": "vexpand_p",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "configure_event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventConfigure"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "damage_event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventExpose"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "delete_event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventAny"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Destroys a widget.</p><p>When a widget is\ndestroyed, it will break any references it holds to other objects.\nIf the widget is inside a container, the widget will be removed\nfrom the container. If the widget is a toplevel (derived from\n<span data-xref=\"Gtk.Window\"/>), it will be removed from the list of toplevels, and the\nreference GTK+ holds to it will be removed. Removing a\nwidget from its container or the list of toplevels results in the\nwidget being finalized, unless you\u2019ve added additional references\nto the widget with <span data-xref=\"GObject.Object.ref\">GObject.Object.prototype.ref</span>.</p><p>In most cases, only toplevel widgets (windows) require explicit\ndestruction, because when you destroy a toplevel its children will\nbe destroyed as well.</p>",
            "kind": "vfunc",
            "name": "destroy",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "destroy_event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventAny"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "direction_changed",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "previous_direction",
                    "direction": "in",
                    "type": "Gtk.TextDirection"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "dispatch_child_properties_changed",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "n_pspecs",
                    "direction": "in",
                    "type": "Number(guint)"
                },
                {
                    "allow_none": false,
                    "argname": "pspecs",
                    "direction": "in",
                    "type": "GObject.ParamSpec"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "drag_begin",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "context",
                    "direction": "in",
                    "type": "Gdk.DragContext"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "drag_data_delete",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "context",
                    "direction": "in",
                    "type": "Gdk.DragContext"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "drag_data_get",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "context",
                    "direction": "in",
                    "type": "Gdk.DragContext"
                },
                {
                    "allow_none": false,
                    "argname": "selection_data",
                    "direction": "in",
                    "type": "Gtk.SelectionData"
                },
                {
                    "allow_none": false,
                    "argname": "info",
                    "direction": "in",
                    "type": "Number(guint)"
                },
                {
                    "allow_none": false,
                    "argname": "time_",
                    "direction": "in",
                    "type": "Number(guint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "drag_data_received",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "context",
                    "direction": "in",
                    "type": "Gdk.DragContext"
                },
                {
                    "allow_none": false,
                    "argname": "x",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "y",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "selection_data",
                    "direction": "in",
                    "type": "Gtk.SelectionData"
                },
                {
                    "allow_none": false,
                    "argname": "info",
                    "direction": "in",
                    "type": "Number(guint)"
                },
                {
                    "allow_none": false,
                    "argname": "time_",
                    "direction": "in",
                    "type": "Number(guint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "drag_drop",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "context",
                    "direction": "in",
                    "type": "Gdk.DragContext"
                },
                {
                    "allow_none": false,
                    "argname": "x",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "y",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "time_",
                    "direction": "in",
                    "type": "Number(guint)"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "drag_end",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "context",
                    "direction": "in",
                    "type": "Gdk.DragContext"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "drag_failed",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "context",
                    "direction": "in",
                    "type": "Gdk.DragContext"
                },
                {
                    "allow_none": false,
                    "argname": "result",
                    "direction": "in",
                    "type": "Gtk.DragResult"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "drag_leave",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "context",
                    "direction": "in",
                    "type": "Gdk.DragContext"
                },
                {
                    "allow_none": false,
                    "argname": "time_",
                    "direction": "in",
                    "type": "Number(guint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "drag_motion",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "context",
                    "direction": "in",
                    "type": "Gdk.DragContext"
                },
                {
                    "allow_none": false,
                    "argname": "x",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "y",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "time_",
                    "direction": "in",
                    "type": "Number(guint)"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "draw",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "cr",
                    "direction": "in",
                    "type": "cairo.Context"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "enter_notify_event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventCrossing"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Rarely-used function. This function is used to emit\nthe event signals on a widget (those signals should never\nbe emitted without using this function to do so).\nIf you want to synthesize an event though, don\u2019t use this function;\ninstead, use <span data-xref=\"Gtk.main_do_event\"/> so the event will behave as if\nit were in the event queue. Don\u2019t synthesize expose events; instead,\nuse <span data-xref=\"Gdk.Window.invalidate_rect\">Gdk.Window.prototype.invalidate_rect</span> to invalidate a region of the\nwindow.</p>",
            "kind": "vfunc",
            "name": "event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.Event"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "focus",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "direction",
                    "direction": "in",
                    "type": "Gtk.DirectionType"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "focus_in_event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventFocus"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "focus_out_event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventFocus"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Returns the accessible object that describes the widget to an\nassistive technology.</p><p>If accessibility support is not available, this <span data-xref=\"Atk.Object\">Atk.Object</span>\ninstance may be a no-op. Likewise, if no class-specific <span data-xref=\"Atk.Object\">Atk.Object</span>\nimplementation is available for the widget instance in question,\nit will inherit an <span data-xref=\"Atk.Object\">Atk.Object</span> implementation from the first ancestor\nclass for which such an implementation is defined.</p><p>The documentation of the\n<a href=\"http://developer.gnome.org/atk/stable/\">ATK</a>\nlibrary contains more information about accessible objects and their uses.</p>",
            "kind": "vfunc",
            "name": "get_accessible",
            "parameters": [],
            "retval": {
                "type": "Atk.Object"
            }
        },
        {
            "doc": "<p>Retrieves a widget\u2019s initial minimum and natural height.</p><p>This call is specific to width-for-height requests.</p><p>The returned request will be modified by the\nGtkWidgetClass::adjust_size_request virtual method and by any</p>\n<h1>GtkSizeGroups that have been applied. That is, the returned request</h1>\n<p>is the one that should be used for layout, not necessarily the one\nreturned by the widget itself.</p>",
            "kind": "vfunc",
            "name": "get_preferred_height",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "minimum_height",
                    "direction": "out",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": true,
                    "argname": "natural_height",
                    "direction": "out",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Retrieves a widget\u2019s minimum and natural height and the corresponding baselines if it would be given\nthe specified <code>width</code>, or the default height if <code>width</code> is -1. The baselines may be -1 which means\nthat no baseline is requested for this widget.</p><p>The returned request will be modified by the\nGtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods\nand by any #GtkSizeGroups that have been applied. That is, the returned request\nis the one that should be used for layout, not necessarily the one\nreturned by the widget itself.</p>",
            "kind": "vfunc",
            "name": "get_preferred_height_and_baseline_for_width",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "width",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": true,
                    "argname": "minimum_height",
                    "direction": "out",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": true,
                    "argname": "natural_height",
                    "direction": "out",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": true,
                    "argname": "minimum_baseline",
                    "direction": "out",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": true,
                    "argname": "natural_baseline",
                    "direction": "out",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Retrieves a widget\u2019s minimum and natural height if it would be given\nthe specified <code>width</code>.</p><p>The returned request will be modified by the\nGtkWidgetClass::adjust_size_request virtual method and by any</p>\n<h1>GtkSizeGroups that have been applied. That is, the returned request</h1>\n<p>is the one that should be used for layout, not necessarily the one\nreturned by the widget itself.</p>",
            "kind": "vfunc",
            "name": "get_preferred_height_for_width",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "width",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": true,
                    "argname": "minimum_height",
                    "direction": "out",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": true,
                    "argname": "natural_height",
                    "direction": "out",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Retrieves a widget\u2019s initial minimum and natural width.</p><p>This call is specific to height-for-width requests.</p><p>The returned request will be modified by the\nGtkWidgetClass::adjust_size_request virtual method and by any</p>\n<h1>GtkSizeGroups that have been applied. That is, the returned request</h1>\n<p>is the one that should be used for layout, not necessarily the one\nreturned by the widget itself.</p>",
            "kind": "vfunc",
            "name": "get_preferred_width",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "minimum_width",
                    "direction": "out",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": true,
                    "argname": "natural_width",
                    "direction": "out",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Retrieves a widget\u2019s minimum and natural width if it would be given\nthe specified <code>height</code>.</p><p>The returned request will be modified by the\nGtkWidgetClass::adjust_size_request virtual method and by any</p>\n<h1>GtkSizeGroups that have been applied. That is, the returned request</h1>\n<p>is the one that should be used for layout, not necessarily the one\nreturned by the widget itself.</p>",
            "kind": "vfunc",
            "name": "get_preferred_width_for_height",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "height",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": true,
                    "argname": "minimum_width",
                    "direction": "out",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": true,
                    "argname": "natural_width",
                    "direction": "out",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Gets whether the widget prefers a height-for-width layout\nor a width-for-height layout.</p><p><span data-xref=\"Gtk.Bin\"/> widgets generally propagate the preference of\ntheir child, container widgets need to request something either in\ncontext of their children or in context of their allocation\ncapabilities.</p>",
            "kind": "vfunc",
            "name": "get_request_mode",
            "parameters": [],
            "retval": {
                "type": "Gtk.SizeRequestMode"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "grab_broken_event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventGrabBroken"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Causes <code>widget</code> to have the keyboard focus for the <span data-xref=\"Gtk.Window\"/> it's\ninside. <code>widget</code> must be a focusable widget, such as a <span data-xref=\"Gtk.Entry\"/>;\nsomething like <span data-xref=\"Gtk.Frame\"/> won\u2019t work.</p><p>More precisely, it must have the %GTK_CAN_FOCUS flag set. Use\n<span data-xref=\"Gtk.Widget.set_can_focus\"/> to modify that flag.</p><p>The widget also needs to be realized and mapped. This is indicated by the\nrelated signals. Grabbing the focus immediately after creating the widget\nwill likely fail and cause critical warnings.</p>",
            "kind": "vfunc",
            "name": "grab_focus",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "grab_notify",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "was_grabbed",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Reverses the effects of <span data-xref=\"Gtk.Widget.show\"/>, causing the widget to be\nhidden (invisible to the user).</p>",
            "kind": "vfunc",
            "name": "hide",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "hierarchy_changed",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "previous_toplevel",
                    "direction": "in",
                    "type": "Gtk.Widget"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "key_press_event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventKey"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "key_release_event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventKey"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>This function should be called whenever keyboard navigation within\na single widget hits a boundary. The function emits the\n<span data-xref=\"Gtk.Widget-keynav-failed\"/> signal on the widget and its return\nvalue should be interpreted in a way similar to the return value of\n<span data-xref=\"Gtk.Widget.child_focus\"/>:</p><p>When <code>true</code> is returned, stay in the widget, the failed keyboard\nnavigation is Ok and/or there is nowhere we can/should move the\nfocus to.</p><p>When <code>false</code> is returned, the caller should continue with keyboard\nnavigation outside the widget, e.g. by calling\n<span data-xref=\"Gtk.Widget.child_focus\"/> on the widget\u2019s toplevel.</p><p>The default ::keynav-failed handler returns <code>true</code> for\n<span data-xref=\"Gtk.DirectionType\"/>.tab_forward and <span data-xref=\"Gtk.DirectionType\"/>.tab_backward. For the other\nvalues of <span data-xref=\"Gtk.DirectionType\"/> it returns <code>false</code>.</p><p>Whenever the default handler returns <code>true</code>, it also calls\n<span data-xref=\"Gtk.Widget.error_bell\"/> to notify the user of the failed keyboard\nnavigation.</p><p>A use case for providing an own implementation of ::keynav-failed\n(either by connecting to it or by overriding it) would be a row of\n<span data-xref=\"Gtk.Entry\"/> widgets where the user should be able to navigate the\nentire row with the cursor keys, as e.g. known from user interfaces\nthat require entering license keys.</p>",
            "kind": "vfunc",
            "name": "keynav_failed",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "direction",
                    "direction": "in",
                    "type": "Gtk.DirectionType"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "leave_notify_event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventCrossing"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>This function is only for use in widget implementations. Causes\na widget to be mapped if it isn\u2019t already.</p>",
            "kind": "vfunc",
            "name": "map",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "map_event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventAny"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Emits the <span data-xref=\"Gtk.Widget-mnemonic-activate\"/> signal.</p><p>The default handler for this signal activates the <code>widget</code> if\n<code>group_cycling</code> is <code>false</code>, and just grabs the focus if <code>group_cycling</code>\nis <code>true</code>.</p>",
            "kind": "vfunc",
            "name": "mnemonic_activate",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "group_cycling",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "motion_notify_event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventMotion"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "move_focus",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "direction",
                    "direction": "in",
                    "type": "Gtk.DirectionType"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "parent_set",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "previous_parent",
                    "direction": "in",
                    "type": "Gtk.Widget"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "popup_menu",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "property_notify_event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventProperty"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "proximity_in_event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventProximity"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "proximity_out_event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventProximity"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "query_tooltip",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "x",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "y",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "keyboard_tooltip",
                    "direction": "in",
                    "type": "Boolean"
                },
                {
                    "allow_none": false,
                    "argname": "tooltip",
                    "direction": "in",
                    "type": "Gtk.Tooltip"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Invalidates the area of <code>widget</code> defined by <code>region</code> by calling\n<span data-xref=\"Gdk.Window.invalidate_region\">Gdk.Window.prototype.invalidate_region</span> on the widget\u2019s window and all its\nchild windows. Once the main loop becomes idle (after the current\nbatch of events has been processed, roughly), the window will\nreceive expose events for the union of all regions that have been\ninvalidated.</p><p>Normally you would only use this function in widget\nimplementations. You might also use it to schedule a redraw of a\n<span data-xref=\"Gtk.DrawingArea\"/> or some portion thereof.</p>",
            "kind": "vfunc",
            "name": "queue_draw_region",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "region",
                    "direction": "in",
                    "type": "cairo.Region"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Creates the GDK (windowing system) resources associated with a\nwidget.  For example, <code>widget</code>-&gt;window will be created when a widget\nis realized.  Normally realization happens implicitly; if you show\na widget and all its parent containers, then the widget will be\nrealized and mapped automatically.</p><p>Realizing a widget requires all\nthe widget\u2019s parent widgets to be realized; calling\n<span data-xref=\"Gtk.Widget.realize\"/> realizes the widget\u2019s parents in addition to\n<code>widget</code> itself. If a widget is not yet inside a toplevel window\nwhen you realize it, bad things will happen.</p><p>This function is primarily used in widget implementations, and\nisn\u2019t very useful otherwise. Many times when you think you might\nneed it, a better approach is to connect to a signal that will be\ncalled after the widget is realized automatically, such as\n<span data-xref=\"Gtk.Widget-draw\"/>. Or simply g_signal_connect () to the\n<span data-xref=\"Gtk.Widget-realize\"/> signal.</p>",
            "kind": "vfunc",
            "name": "realize",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "screen_changed",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "previous_screen",
                    "direction": "in",
                    "type": "Gdk.Screen"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "scroll_event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventScroll"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "selection_clear_event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventSelection"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "selection_get",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "selection_data",
                    "direction": "in",
                    "type": "Gtk.SelectionData"
                },
                {
                    "allow_none": false,
                    "argname": "info",
                    "direction": "in",
                    "type": "Number(guint)"
                },
                {
                    "allow_none": false,
                    "argname": "time_",
                    "direction": "in",
                    "type": "Number(guint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "selection_notify_event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventSelection"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "selection_received",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "selection_data",
                    "direction": "in",
                    "type": "Gtk.SelectionData"
                },
                {
                    "allow_none": false,
                    "argname": "time_",
                    "direction": "in",
                    "type": "Number(guint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "selection_request_event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventSelection"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Flags a widget to be displayed. Any widget that isn\u2019t shown will\nnot appear on the screen. If you want to show all the widgets in a\ncontainer, it\u2019s easier to call <span data-xref=\"Gtk.Widget.show_all\"/> on the\ncontainer, instead of individually showing the widgets.</p><p>Remember that you have to show the containers containing a widget,\nin addition to the widget itself, before it will appear onscreen.</p><p>When a toplevel container is shown, it is immediately realized and\nmapped; other shown widgets are realized and mapped when their\ntoplevel container is realized and mapped.</p>",
            "kind": "vfunc",
            "name": "show",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Recursively shows a widget, and any child widgets (if the widget is\na container).</p>",
            "kind": "vfunc",
            "name": "show_all",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "show_help",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "help_type",
                    "direction": "in",
                    "type": "Gtk.WidgetHelpType"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>This function is only used by <span data-xref=\"Gtk.Container\"/> subclasses, to assign a size\nand position to their child widgets.</p><p>In this function, the allocation may be adjusted. It will be forced\nto a 1x1 minimum size, and the adjust_size_allocation virtual\nmethod on the child will be used to adjust the allocation. Standard\nadjustments include removing the widget\u2019s margins, and applying the\nwidget\u2019s <span data-xref=\"Gtk.Widget-halign\"/> and <span data-xref=\"Gtk.Widget-valign\"/> properties.</p><p>For baseline support in containers you need to use <span data-xref=\"Gtk.Widget.size_allocate_with_baseline\"/>\ninstead.</p>",
            "kind": "vfunc",
            "name": "size_allocate",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "allocation",
                    "direction": "in",
                    "type": "Gtk.Allocation"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "state_changed",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "previous_state",
                    "direction": "in",
                    "type": "Gtk.StateType"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "state_flags_changed",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "previous_state_flags",
                    "direction": "in",
                    "type": "Gtk.StateFlags"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "style_set",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "previous_style",
                    "direction": "in",
                    "type": "Gtk.Style"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "style_updated",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "touch_event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventTouch"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>This function is only for use in widget implementations. Causes\na widget to be unmapped if it\u2019s currently mapped.</p>",
            "kind": "vfunc",
            "name": "unmap",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "unmap_event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventAny"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>This function is only useful in widget implementations.\nCauses a widget to be unrealized (frees all GDK resources\nassociated with the widget, such as <code>widget</code>-&gt;window).</p>",
            "kind": "vfunc",
            "name": "unrealize",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "visibility_notify_event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventVisibility"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "window_state_event",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "event",
                    "direction": "in",
                    "type": "Gdk.EventWindowState"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        }
    ]
}