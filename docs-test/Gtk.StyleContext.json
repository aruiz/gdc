{
    "constructors": [
        {
            "doc": "<p>Creates a standalone <span data-xref=\"Gtk.StyleContext\"/>, this style context\nwon\u2019t be attached to any widget, so you may want\nto call <span data-xref=\"Gtk.StyleContext.set_path\"/> yourself.</p><p>This function is only useful when using the theming layer\nseparated from GTK+, if you are using <span data-xref=\"Gtk.StyleContext\"/> to\ntheme #GtkWidgets, use <span data-xref=\"Gtk.Widget.get_style_context\"/>\nin order to get a style context ready to theme the widget.</p>",
            "kind": "constructor",
            "name": "new",
            "parameters": [],
            "retval": {
                "type": "Gtk.StyleContext"
            }
        }
    ],
    "doc": "<p><span data-xref=\"Gtk.StyleContext\"/> is an object that stores styling information affecting\na widget defined by <span data-xref=\"Gtk.WidgetPath\"/>.</p><p>In order to construct the final style information, <span data-xref=\"Gtk.StyleContext\"/>\nqueries information from all attached #GtkStyleProviders. Style providers\ncan be either attached explicitly to the context through\n<span data-xref=\"Gtk.StyleContext.add_provider\"/>, or to the screen through\n<span data-xref=\"Gtk.StyleContext.add_provider_for_screen\"/>. The resulting style is a\ncombination of all providers\u2019 information in priority order.</p><p>For GTK+ widgets, any <span data-xref=\"Gtk.StyleContext\"/> returned by\n<span data-xref=\"Gtk.Widget.get_style_context\"/> will already have a <span data-xref=\"Gtk.WidgetPath\"/>, a\n<span data-xref=\"Gdk.Screen\">Gdk.Screen</span> and RTL/LTR information set. The style context will be also\nupdated automatically if any of these settings change on the widget.</p><p>If you are using the theming layer standalone, you will need to set a\nwidget path and a screen yourself to the created style context through\n<span data-xref=\"Gtk.StyleContext.set_path\"/> and <span data-xref=\"Gtk.StyleContext.set_screen\"/>, as well\nas updating the context yourself using <span data-xref=\"Gtk.StyleContext.invalidate\"/>\nwhenever any of the conditions change, such as a change in the\n<span data-xref=\"Gtk.Settings-gtk-theme-name\"/> setting or a hierarchy change in the rendered\nwidget.</p><h1>Transition Animations</h1><p><span data-xref=\"Gtk.StyleContext\"/> has built-in support for state change transitions.\nNote that these animations respect the <span data-xref=\"Gtk.Settings-gtk-enable-animations\"/>\nsetting.</p><p>For simple widgets where state changes affect the whole widget area,\ncalling <span data-xref=\"Gtk.StyleContext.notify_state_change\"/> with a <code>null</code> region\nis sufficient to trigger the transition animation. And GTK+ already\ndoes that when <span data-xref=\"Gtk.Widget.set_state\"/> or <span data-xref=\"Gtk.Widget.set_state_flags\"/>\nare called.</p><p>If a widget needs to declare several animatable regions (i.e. not\naffecting the whole widget area), its <span data-xref=\"Gtk.Widget-draw\"/> signal handler\nneeds to wrap the render operations for the different regions with\ncalls to <span data-xref=\"Gtk.StyleContext.push_animatable_region\"/> and\n<span data-xref=\"Gtk.StyleContext.pop_animatable_region\"/>. These functions take an\nidentifier for the region which must be unique within the style context.\nFor simple widgets with a fixed set of animatable regions, using an\nenumeration works well:</p><p>An example for Using an enumeration to identify animatable regions:</p><p>|[&lt;!-- language=\"C\" --&gt;\nenum {\n  REGION_ENTRY,\n  REGION_BUTTON_UP,\n  REGION_BUTTON_DOWN\n};</p><p>...</p><p>gboolean\nspin_button_draw (GtkWidget <em>widget,\n                  cairo_t   </em>cr)\n{\n  GtkStyleContext *context;</p><p>context = gtk_widget_get_style_context (widget);</p><p>gtk_style_context_push_animatable_region (context,\n                                            GUINT_TO_POINTER (REGION_ENTRY));</p><p>gtk_render_background (cr, 0, 0, 100, 30);\n  gtk_render_frame (cr, 0, 0, 100, 30);</p><p>gtk_style_context_pop_animatable_region (context);</p><p>...\n}\n]|</p><p>For complex widgets with an arbitrary number of animatable regions, it\nis up to the implementation to come up with a way to uniquely identify\neach animatable region. Using pointers to internal structs is one way\nto achieve this:</p><p>An example for using struct pointers to identify animatable regions:\n|[&lt;!-- language=\"C\" --&gt;\nvoid\nnotebook_draw_tab (GtkWidget    <em>widget,\n                   NotebookPage </em>page,\n                   cairo_t      *cr)\n{\n  gtk_style_context_push_animatable_region (context, page);\n  gtk_render_extension (cr, page-&gt;x, page-&gt;y, page-&gt;width, page-&gt;height);\n  gtk_style_context_pop_animatable_region (context);\n}\n]|</p><p>The widget also needs to notify the style context about a state change\nfor a given animatable region so the animation is triggered.</p><p>An example for triggering a state change animation on a region:\n|[&lt;!-- language=\"C\" --&gt;\ngboolean\nnotebook_motion_notify (GtkWidget      <em>widget,\n                        GdkEventMotion </em>event)\n{\n  GtkStyleContext <em>context;\n  NotebookPage </em>page;</p><p>context = gtk_widget_get_style_context (widget);\n  page = find_page_under_pointer (widget, event);\n  gtk_style_context_notify_state_change (context,\n                                         gtk_widget_get_window (widget),\n                                         page,\n                                         GTK_STATE_PRELIGHT,\n                                         TRUE);\n  ...\n}\n]|</p><p><span data-xref=\"Gtk.StyleContext.notify_state_change\"/> accepts <code>null</code> region IDs as a\nspecial value, in this case, the whole widget area will be updated\nby the animation.</p><h1>Style Classes and Regions # {#gtkstylecontext-classes}</h1><p>Widgets can add style classes to their context, which can be used\nto associate different styles by class\n(see [Selectors][gtkcssprovider-selectors]).\nTheme engines can also use style classes to vary their rendering.</p><p>Widgets can also add regions with flags to their context.</p><p>The regions used by GTK+ widgets are:</p><h2>row</h2>\n<p>Used by <span data-xref=\"Gtk.TreeView\"/>. Can be used with the flags: <code>even</code>, <code>odd</code>.</p><h2>column</h2>\n<p>Used by <span data-xref=\"Gtk.TreeView\"/>. Can be used with the flags: <code>first</code>, <code>last</code>, <code>sorted</code>.</p><h2>column-header</h2>\n<p>Used by <span data-xref=\"Gtk.TreeView\"/>.</p><h2>tab</h2>\n<p>Used by <span data-xref=\"Gtk.Notebook\"/>. Can be used with the flags: <code>even</code>, <code>odd</code>, <code>first</code>, <code>last</code>.</p><h1>Custom styling in UI libraries and applications</h1><p>If you are developing a library with custom #GtkWidgets that\nrender differently than standard components, you may need to add a\n<span data-xref=\"Gtk.StyleProvider\"/> yourself with the %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK\npriority, either a <span data-xref=\"Gtk.CssProvider\"/> or a custom object implementing the\n<span data-xref=\"Gtk.StyleProvider\"/> interface. This way theming engines may still attempt\nto style your UI elements in a different way if needed so.</p><p>If you are using custom styling on an applications, you probably want then\nto make your style information prevail to the theme\u2019s, so you must use\na <span data-xref=\"Gtk.StyleProvider\"/> with the %GTK_STYLE_PROVIDER_PRIORITY_APPLICATION\npriority, keep in mind that the user settings in\n<code>XDG_CONFIG_HOME/gtk-3.0/gtk.css</code> will\nstill take precedence over your changes, as it uses the\n%GTK_STYLE_PROVIDER_PRIORITY_USER priority.</p><p>If a custom theming engine is needed, you probably want to implement a\n<span data-xref=\"Gtk.StyleProvider\"/> yourself so it points to your <span data-xref=\"Gtk.ThemingEngine\"/>\nimplementation, as <span data-xref=\"Gtk.CssProvider\"/> uses <span data-xref=\"Gtk.ThemingEngine.load\"/>\nwhich loads the theming engine module from the standard paths.</p>",
    "fields": [
        {
            "doc": "",
            "kind": "field",
            "name": "parent_object"
        },
        {
            "doc": "",
            "kind": "field",
            "name": "priv"
        }
    ],
    "kind": "class",
    "methods": [
        {
            "doc": "<p>Adds a style class to <code>context</code>, so posterior calls to\n<span data-xref=\"Gtk.StyleContext.get\"/> or any of the gtk_render_*()\nfunctions will make use of this new class for styling.</p><p>In the CSS file format, a <span data-xref=\"Gtk.Entry\"/> defining an \u201centry\u201d\nclass, would be matched by:</p><p>|[\nGtkEntry.entry { ... }\n]|</p><p>While any widget defining an \u201centry\u201d class would be\nmatched by:\n|[\n.entry { ... }\n]|</p>",
            "kind": "method",
            "name": "add_class",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "class_name",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Adds a style provider to <code>context</code>, to be used in style construction.\nNote that a style provider added by this function only affects\nthe style of the widget to which <code>context</code> belongs. If you want\nto affect the style of all widgets, use\n<span data-xref=\"Gtk.StyleContext.add_provider_for_screen\"/>.</p><p>Note: If both priorities are the same, a <span data-xref=\"Gtk.StyleProvider\"/>\nadded through this function takes precedence over another added\nthrough <span data-xref=\"Gtk.StyleContext.add_provider_for_screen\"/>.</p>",
            "kind": "method",
            "name": "add_provider",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "provider",
                    "direction": "in",
                    "type": "Gtk.StyleProvider"
                },
                {
                    "allow_none": false,
                    "argname": "priority",
                    "direction": "in",
                    "type": "Number(guint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Adds a region to <code>context</code>, so posterior calls to\n<span data-xref=\"Gtk.StyleContext.get\"/> or any of the gtk_render_*()\nfunctions will make use of this new region for styling.</p><p>In the CSS file format, a <span data-xref=\"Gtk.TreeView\"/> defining a \u201crow\u201d\nregion, would be matched by:</p><p>|[\nGtkTreeView row { ... }\n]|</p><p>Pseudo-classes are used for matching <code>flags</code>, so the two\nfollowing rules:\n|[\nGtkTreeView row:nth-child(even) { ... }\nGtkTreeView row:nth-child(odd) { ... }\n]|</p><p>would apply to even and odd rows, respectively.</p><p>Region names must only contain lowercase letters\nand \u201c-\u201d, starting always with a lowercase letter.</p>",
            "kind": "method",
            "name": "add_region",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "region_name",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "flags",
                    "direction": "in",
                    "type": "Gtk.RegionFlags"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Stops all running animations for <code>region_id</code> and all animatable\nregions underneath.</p><p>A <code>null</code> <code>region_id</code> will stop all ongoing animations in <code>context</code>,\nwhen dealing with a <span data-xref=\"Gtk.StyleContext\"/> obtained through\n<span data-xref=\"Gtk.Widget.get_style_context\"/>, this is normally done for you\nin all circumstances you would expect all widget to be stopped,\nso this should be only used in complex widgets with different\nanimatable regions.</p>",
            "kind": "method",
            "name": "cancel_animations",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "region_id",
                    "direction": "in",
                    "type": "void"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Retrieves several style property values from <code>context</code> for a\ngiven state.</p>",
            "kind": "method",
            "name": "get",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "state",
                    "direction": "in",
                    "type": "Gtk.StateFlags"
                },
                {
                    "allow_none": false,
                    "argname": "...",
                    "direction": "in",
                    "type": "<varargs>"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Gets the background color for a given state.</p>",
            "kind": "method",
            "name": "get_background_color",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "state",
                    "direction": "in",
                    "type": "Gtk.StateFlags"
                },
                {
                    "allow_none": false,
                    "argname": "color",
                    "direction": "out",
                    "type": "Gdk.RGBA"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Gets the border for a given state as a <span data-xref=\"Gtk.Border\"/>.\nSee %GTK_STYLE_PROPERTY_BORDER_WIDTH.</p>",
            "kind": "method",
            "name": "get_border",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "state",
                    "direction": "in",
                    "type": "Gtk.StateFlags"
                },
                {
                    "allow_none": false,
                    "argname": "border",
                    "direction": "out",
                    "type": "Gtk.Border"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Gets the border color for a given state.</p>",
            "kind": "method",
            "name": "get_border_color",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "state",
                    "direction": "in",
                    "type": "Gtk.StateFlags"
                },
                {
                    "allow_none": false,
                    "argname": "color",
                    "direction": "out",
                    "type": "Gdk.RGBA"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Gets the foreground color for a given state.</p>",
            "kind": "method",
            "name": "get_color",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "state",
                    "direction": "in",
                    "type": "Gtk.StateFlags"
                },
                {
                    "allow_none": false,
                    "argname": "color",
                    "direction": "out",
                    "type": "Gdk.RGBA"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Returns the widget direction used for rendering.</p>",
            "kind": "method",
            "name": "get_direction",
            "parameters": [],
            "retval": {
                "type": "Gtk.TextDirection"
            }
        },
        {
            "doc": "<p>Returns the font description for a given state. The returned\nobject is const and will remain valid until the\n<span data-xref=\"Gtk.StyleContext-changed\"/> signal happens.</p>",
            "kind": "method",
            "name": "get_font",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "state",
                    "direction": "in",
                    "type": "Gtk.StateFlags"
                }
            ],
            "retval": {
                "type": "Pango.FontDescription"
            }
        },
        {
            "doc": "<p>Returns the <span data-xref=\"Gdk.FrameClock\">Gdk.FrameClock</span> to which <code>context</code> is attached.</p>",
            "kind": "method",
            "name": "get_frame_clock",
            "parameters": [],
            "retval": {
                "type": "Gdk.FrameClock"
            }
        },
        {
            "doc": "<p>Returns the sides where rendered elements connect visually with others.</p>",
            "kind": "method",
            "name": "get_junction_sides",
            "parameters": [],
            "retval": {
                "type": "Gtk.JunctionSides"
            }
        },
        {
            "doc": "<p>Gets the margin for a given state as a <span data-xref=\"Gtk.Border\"/>.\nSee %GTK_STYLE_PROPERTY_MARGIN.</p>",
            "kind": "method",
            "name": "get_margin",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "state",
                    "direction": "in",
                    "type": "Gtk.StateFlags"
                },
                {
                    "allow_none": false,
                    "argname": "margin",
                    "direction": "out",
                    "type": "Gtk.Border"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Gets the padding for a given state as a <span data-xref=\"Gtk.Border\"/>.\nSee %GTK_STYLE_PROPERTY_PADDING.</p>",
            "kind": "method",
            "name": "get_padding",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "state",
                    "direction": "in",
                    "type": "Gtk.StateFlags"
                },
                {
                    "allow_none": false,
                    "argname": "padding",
                    "direction": "out",
                    "type": "Gtk.Border"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Gets the parent context set via <span data-xref=\"Gtk.StyleContext.set_parent\"/>.\nSee that function for details.</p>",
            "kind": "method",
            "name": "get_parent",
            "parameters": [],
            "retval": {
                "type": "Gtk.StyleContext"
            }
        },
        {
            "doc": "<p>Returns the widget path used for style matching.</p>",
            "kind": "method",
            "name": "get_path",
            "parameters": [],
            "retval": {
                "type": "Gtk.WidgetPath"
            }
        },
        {
            "doc": "<p>Gets a style property from <code>context</code> for the given state.</p><p>When <code>value</code> is no longer needed, <span data-xref=\"GObject.Value.unset\">GObject.Value.prototype.unset</span> must be called\nto free any allocated memory.</p>",
            "kind": "method",
            "name": "get_property",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "property",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "state",
                    "direction": "in",
                    "type": "Gtk.StateFlags"
                },
                {
                    "allow_none": false,
                    "argname": "value",
                    "direction": "out",
                    "type": "Any"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Returns the scale used for assets.</p>",
            "kind": "method",
            "name": "get_scale",
            "parameters": [],
            "retval": {
                "type": "Number(gint)"
            }
        },
        {
            "doc": "<p>Returns the <span data-xref=\"Gdk.Screen\">Gdk.Screen</span> to which <code>context</code> is attached.</p>",
            "kind": "method",
            "name": "get_screen",
            "parameters": [],
            "retval": {
                "type": "Gdk.Screen"
            }
        },
        {
            "doc": "<p>Queries the location in the CSS where <code>property</code> was defined for the\ncurrent <code>context</code>. Note that the state to be queried is taken from\n<span data-xref=\"Gtk.StyleContext.get_state\"/>.</p><p>If the location is not available, <code>null</code> will be returned. The\nlocation might not be available for various reasons, such as the\nproperty being overridden, <code>property</code> not naming a supported CSS\nproperty or tracking of definitions being disabled for performance\nreasons.</p><p>Shorthand CSS properties cannot be queried for a location and will\nalways return <code>null</code>.</p>",
            "kind": "method",
            "name": "get_section",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "property",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "Gtk.CssSection"
            }
        },
        {
            "doc": "<p>Returns the state used when rendering.</p>",
            "kind": "method",
            "name": "get_state",
            "parameters": [],
            "retval": {
                "type": "Gtk.StateFlags"
            }
        },
        {
            "doc": "<p>Retrieves several widget style properties from <code>context</code> according to the\ncurrent style.</p>",
            "kind": "method",
            "name": "get_style",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "...",
                    "direction": "in",
                    "type": "<varargs>"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Gets the value for a widget style property.</p><p>When <code>value</code> is no longer needed, <span data-xref=\"GObject.Value.unset\">GObject.Value.prototype.unset</span> must be called\nto free any allocated memory.</p>",
            "kind": "method",
            "name": "get_style_property",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "property_name",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "value",
                    "direction": "in",
                    "type": "Any"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Retrieves several widget style properties from <code>context</code> according to the\ncurrent style.</p>",
            "kind": "method",
            "name": "get_style_valist",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "args",
                    "direction": "in",
                    "type": "va_list"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Retrieves several style property values from <code>context</code> for a given state.</p>",
            "kind": "method",
            "name": "get_valist",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "state",
                    "direction": "in",
                    "type": "Gtk.StateFlags"
                },
                {
                    "allow_none": false,
                    "argname": "args",
                    "direction": "in",
                    "type": "va_list"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Returns <code>true</code> if <code>context</code> currently has defined the\ngiven class name</p>",
            "kind": "method",
            "name": "has_class",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "class_name",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Returns <code>true</code> if <code>context</code> has the region defined.\nIf <code>flags_return</code> is not <code>null</code>, it is set to the flags\naffecting the region.</p>",
            "kind": "method",
            "name": "has_region",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "region_name",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": true,
                    "argname": "flags_return",
                    "direction": "out",
                    "type": "Gtk.RegionFlags"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Invalidates <code>context</code> style information, so it will be reconstructed\nagain. It is useful if you modify the <code>context</code> and need the new\ninformation immediately.</p>",
            "kind": "method",
            "name": "invalidate",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Returns the list of classes currently defined in <code>context</code>.</p>",
            "kind": "method",
            "name": "list_classes",
            "parameters": [],
            "retval": {
                "type": "Array(String)"
            }
        },
        {
            "doc": "<p>Returns the list of regions currently defined in <code>context</code>.</p>",
            "kind": "method",
            "name": "list_regions",
            "parameters": [],
            "retval": {
                "type": "Array(String)"
            }
        },
        {
            "doc": "<p>Looks up and resolves a color name in the <code>context</code> color map.</p>",
            "kind": "method",
            "name": "lookup_color",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "color_name",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "color",
                    "direction": "out",
                    "type": "Gdk.RGBA"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Looks up <code>stock_id</code> in the icon factories associated to <code>context</code> and\nthe default icon factory, returning an icon set if found, otherwise\n<code>null</code>.</p>",
            "kind": "method",
            "name": "lookup_icon_set",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "stock_id",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "Gtk.IconSet"
            }
        },
        {
            "doc": "<p>Notifies a state change on <code>context</code>, so if the current style makes use\nof transition animations, one will be started so all rendered elements\nunder <code>region_id</code> are animated for state <code>state</code> being set to value\n<code>state_value</code>.</p><p>The <code>window</code> parameter is used in order to invalidate the rendered area\nas the animation runs, so make sure it is the same window that is being\nrendered on by the gtk_render_*() functions.</p><p>If <code>region_id</code> is <code>null</code>, all rendered elements using <code>context</code> will be\naffected by this state transition.</p><p>As a practical example, a <span data-xref=\"Gtk.Button\"/> notifying a state transition on\nthe prelight state:\n|[&lt;!-- language=\"C\" --&gt;\ngtk_style_context_notify_state_change (context,\n                                       gtk_widget_get_window (widget),\n                                       NULL,\n                                       GTK_STATE_PRELIGHT,\n                                       button-&gt;in_button);\n]|</p><p>Can be handled in the CSS file like this:\n|[\nGtkButton {\n    background-color: #f00\n}</p><p>GtkButton:hover {\n    background-color: #fff;\n    transition: 200ms linear\n}\n]|</p><p>This combination will animate the button background from red to white\nif a pointer enters the button, and back to red if the pointer leaves\nthe button.</p><p>Note that <code>state</code> is used when finding the transition parameters, which\nis why the style places the transition under the :hover pseudo-class.</p>",
            "kind": "method",
            "name": "notify_state_change",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "window",
                    "direction": "in",
                    "type": "Gdk.Window"
                },
                {
                    "allow_none": true,
                    "argname": "region_id",
                    "direction": "in",
                    "type": "void"
                },
                {
                    "allow_none": false,
                    "argname": "state",
                    "direction": "in",
                    "type": "Gtk.StateType"
                },
                {
                    "allow_none": false,
                    "argname": "state_value",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Pops an animatable region from <code>context</code>.\nSee <span data-xref=\"Gtk.StyleContext.push_animatable_region\"/>.</p>",
            "kind": "method",
            "name": "pop_animatable_region",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Pushes an animatable region, so all further gtk_render_*() calls between\nthis call and the following <span data-xref=\"Gtk.StyleContext.pop_animatable_region\"/>\nwill potentially show transition animations for this region if\n<span data-xref=\"Gtk.StyleContext.notify_state_change\"/> is called for a given state,\nand the current theme/style defines transition animations for state\nchanges.</p><p>The <code>region_id</code> used must be unique in <code>context</code> so the theming engine\ncan uniquely identify rendered elements subject to a state transition.</p>",
            "kind": "method",
            "name": "push_animatable_region",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "region_id",
                    "direction": "in",
                    "type": "void"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Removes <code>class_name</code> from <code>context</code>.</p>",
            "kind": "method",
            "name": "remove_class",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "class_name",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Removes <code>provider</code> from the style providers list in <code>context</code>.</p>",
            "kind": "method",
            "name": "remove_provider",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "provider",
                    "direction": "in",
                    "type": "Gtk.StyleProvider"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Removes a region from <code>context</code>.</p>",
            "kind": "method",
            "name": "remove_region",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "region_name",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Restores <code>context</code> state to a previous stage.\nSee <span data-xref=\"Gtk.StyleContext.save\"/>.</p>",
            "kind": "method",
            "name": "restore",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Saves the <code>context</code> state, so all modifications done through\n<span data-xref=\"Gtk.StyleContext.add_class\"/>, <span data-xref=\"Gtk.StyleContext.remove_class\"/>,\n<span data-xref=\"Gtk.StyleContext.add_region\"/>, <span data-xref=\"Gtk.StyleContext.remove_region\"/>\nor <span data-xref=\"Gtk.StyleContext.set_junction_sides\"/> can be reverted in one\ngo through <span data-xref=\"Gtk.StyleContext.restore\"/>.</p>",
            "kind": "method",
            "name": "save",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>This function is analogous to <span data-xref=\"Gdk.Window.scroll\">Gdk.Window.prototype.scroll</span>, and\nshould be called together with it so the invalidation\nareas for any ongoing animation are scrolled together\nwith it.</p>",
            "kind": "method",
            "name": "scroll_animations",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "window",
                    "direction": "in",
                    "type": "Gdk.Window"
                },
                {
                    "allow_none": false,
                    "argname": "dx",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "dy",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the background of <code>window</code> to the background pattern or\ncolor specified in <code>context</code> for its current state.</p>",
            "kind": "method",
            "name": "set_background",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "window",
                    "direction": "in",
                    "type": "Gdk.Window"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the reading direction for rendering purposes.</p><p>If you are using a <span data-xref=\"Gtk.StyleContext\"/> returned from\n<span data-xref=\"Gtk.Widget.get_style_context\"/>, you do not need to\ncall this yourself.</p>",
            "kind": "method",
            "name": "set_direction",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "direction",
                    "direction": "in",
                    "type": "Gtk.TextDirection"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Attaches <code>context</code> to the given frame clock.</p><p>The frame clock is used for the timing of animations.</p><p>If you are using a <span data-xref=\"Gtk.StyleContext\"/> returned from\n<span data-xref=\"Gtk.Widget.get_style_context\"/>, you do not need to\ncall this yourself.</p>",
            "kind": "method",
            "name": "set_frame_clock",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "frame_clock",
                    "direction": "in",
                    "type": "Gdk.FrameClock"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the sides where rendered elements (mostly through\n<span data-xref=\"Gtk.render_frame\"/>) will visually connect with other visual elements.</p><p>This is merely a hint that may or may not be honored\nby theming engines.</p><p>Container widgets are expected to set junction hints as appropriate\nfor their children, so it should not normally be necessary to call\nthis function manually.</p>",
            "kind": "method",
            "name": "set_junction_sides",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "sides",
                    "direction": "in",
                    "type": "Gtk.JunctionSides"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the parent style context for <code>context</code>. The parent style\ncontext is used to implement\n<a href=\"http://www.w3.org/TR/css3-cascade/#inheritance\">inheritance</a>\nof properties.</p><p>If you are using a <span data-xref=\"Gtk.StyleContext\"/> returned from\n<span data-xref=\"Gtk.Widget.get_style_context\"/>, the parent will be set for you.</p>",
            "kind": "method",
            "name": "set_parent",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "parent",
                    "direction": "in",
                    "type": "Gtk.StyleContext"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the <span data-xref=\"Gtk.WidgetPath\"/> used for style matching. As a\nconsequence, the style will be regenerated to match\nthe new given path.</p><p>If you are using a <span data-xref=\"Gtk.StyleContext\"/> returned from\n<span data-xref=\"Gtk.Widget.get_style_context\"/>, you do not need to call\nthis yourself.</p>",
            "kind": "method",
            "name": "set_path",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "path",
                    "direction": "in",
                    "type": "Gtk.WidgetPath"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the scale to use when getting image assets for the style .</p>",
            "kind": "method",
            "name": "set_scale",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "scale",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Attaches <code>context</code> to the given screen.</p><p>The screen is used to add style information from \u201cglobal\u201d style\nproviders, such as the screens <span data-xref=\"Gtk.Settings\"/> instance.</p><p>If you are using a <span data-xref=\"Gtk.StyleContext\"/> returned from\n<span data-xref=\"Gtk.Widget.get_style_context\"/>, you do not need to\ncall this yourself.</p>",
            "kind": "method",
            "name": "set_screen",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "screen",
                    "direction": "in",
                    "type": "Gdk.Screen"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the state to be used when rendering with any\nof the gtk_render_*() functions.</p>",
            "kind": "method",
            "name": "set_state",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "flags",
                    "direction": "in",
                    "type": "Gtk.StateFlags"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Returns <code>true</code> if there is a transition animation running for the\ncurrent region (see <span data-xref=\"Gtk.StyleContext.push_animatable_region\"/>).</p><p>If <code>progress</code> is not <code>null</code>, the animation progress will be returned\nthere, 0.0 means the state is closest to being unset, while 1.0 means\nit\u2019s closest to being set. This means transition animation will\nrun from 0 to 1 when <code>state</code> is being set and from 1 to 0 when\nit\u2019s being unset.</p>",
            "kind": "method",
            "name": "state_is_running",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "state",
                    "direction": "in",
                    "type": "Gtk.StateType"
                },
                {
                    "allow_none": false,
                    "argname": "progress",
                    "direction": "out",
                    "type": "Number(gdouble)"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        [
            {
                "doc": "<p>Adds a global style provider to <code>screen</code>, which will be used\nin style construction for all #GtkStyleContexts under <code>screen</code>.</p><p>GTK+ uses this to make styling information from <span data-xref=\"Gtk.Settings\"/>\navailable.</p><p>Note: If both priorities are the same, A <span data-xref=\"Gtk.StyleProvider\"/>\nadded through <span data-xref=\"Gtk.StyleContext.add_provider\"/> takes precedence\nover another added through this function.</p>",
                "kind": "function",
                "name": "add_provider_for_screen",
                "parameters": [
                    {
                        "allow_none": false,
                        "argname": "screen",
                        "direction": "in",
                        "type": "Gdk.Screen"
                    },
                    {
                        "allow_none": false,
                        "argname": "provider",
                        "direction": "in",
                        "type": "Gtk.StyleProvider"
                    },
                    {
                        "allow_none": false,
                        "argname": "priority",
                        "direction": "in",
                        "type": "Number(guint)"
                    }
                ],
                "retval": {
                    "type": "void"
                }
            },
            {
                "doc": "<p>Removes <code>provider</code> from the global style providers list in <code>screen</code>.</p>",
                "kind": "function",
                "name": "remove_provider_for_screen",
                "parameters": [
                    {
                        "allow_none": false,
                        "argname": "screen",
                        "direction": "in",
                        "type": "Gdk.Screen"
                    },
                    {
                        "allow_none": false,
                        "argname": "provider",
                        "direction": "in",
                        "type": "Gtk.StyleProvider"
                    }
                ],
                "retval": {
                    "type": "void"
                }
            },
            {
                "doc": "<p>This function recomputes the styles for all widgets under a particular\n<span data-xref=\"Gdk.Screen\">Gdk.Screen</span>. This is useful when some global parameter has changed that\naffects the appearance of all widgets, because when a widget gets a new\nstyle, it will both redraw and recompute any cached information about\nits appearance. As an example, it is used when the color scheme changes\nin the related <span data-xref=\"Gtk.Settings\"/> object.</p>",
                "kind": "function",
                "name": "reset_widgets",
                "parameters": [
                    {
                        "allow_none": false,
                        "argname": "screen",
                        "direction": "in",
                        "type": "Gdk.Screen"
                    }
                ],
                "retval": {
                    "type": "void"
                }
            }
        ]
    ],
    "name": "StyleContext",
    "properties": [
        {
            "doc": "",
            "kind": "property",
            "name": "direction",
            "type": "Gtk.TextDirection"
        },
        {
            "doc": "",
            "kind": "property",
            "name": "paint-clock",
            "type": "Gdk.FrameClock"
        },
        {
            "doc": "<p>Sets or gets the style context\u2019s parent. See <span data-xref=\"Gtk.StyleContext.set_parent\"/>\nfor details.</p>",
            "kind": "property",
            "name": "parent",
            "type": "Gtk.StyleContext"
        },
        {
            "doc": "",
            "kind": "property",
            "name": "screen",
            "type": "Gdk.Screen"
        }
    ],
    "signals": [
        {
            "doc": "",
            "kind": "signal",
            "name": "changed",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        }
    ],
    "vfuncs": [
        {
            "doc": "",
            "kind": "vfunc",
            "name": "changed",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        }
    ]
}