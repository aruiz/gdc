{
    "constructors": [
        {
            "doc": "<p>Returns a newly created <span data-xref=\"Gtk.CssProvider\"/>.</p>",
            "kind": "constructor",
            "name": "new",
            "parameters": [],
            "retval": {
                "type": "Gtk.CssProvider"
            }
        }
    ],
    "doc": "<p>GtkCssProvider is an object implementing the <span data-xref=\"Gtk.StyleProvider\"/> interface.\nIt is able to parse <a href=\"http://www.w3.org/TR/CSS2\">CSS-like</a>\ninput in order to style widgets.</p><h2>Default files</h2><p>An application can cause GTK+ to parse a specific CSS style sheet by\ncalling <span data-xref=\"Gtk.CssProvider.load_from_file\"/> and adding the provider with\n<span data-xref=\"Gtk.StyleContext.add_provider\"/> or <span data-xref=\"Gtk.StyleContext.add_provider_for_screen\"/>.\nIn addition, certain files will be read when GTK+ is initialized. First,\nthe file <code>$XDG_CONFIG_HOME/gtk-3.0/gtk.css</code>\nis loaded if it exists. Then, GTK+ tries to load\n<code>$HOME/.themes/theme-name/gtk-3.0/gtk.css</code>,\nfalling back to\n<code>datadir/share/themes/theme-name/gtk-3.0/gtk.css</code>,\nwhere theme-name is the name of the current theme\n(see the <span data-xref=\"Gtk.Settings-gtk-theme-name\"/> setting) and datadir\nis the prefix configured when GTK+ was compiled, unless overridden by the\n<code>GTK_DATA_PREFIX</code> environment variable.</p><h1>Style sheets</h1><p>The basic structure of the style sheets understood by this provider is\na series of statements, which are either rule sets or \u201c@-rules\u201d, separated\nby whitespace.</p><p>A rule set consists of a selector and a declaration block, which is\na series of declarations enclosed in curly braces ({ and }). The\ndeclarations are separated by semicolons (;). Multiple selectors can\nshare the same declaration block, by putting all the separators in\nfront of the block, separated by commas.</p><p>An example of a rule set with two selectors:\n|[\nGtkButton, GtkEntry {\n    color: #ff00ea;\n    font: Comic Sans 12\n}\n]|</p><h1>Selectors # {#gtkcssprovider-selectors}</h1><p>Selectors work very similar to the way they do in CSS, with widget class\nnames taking the role of element names, and widget names taking the role\nof IDs. When used in a selector, widget names must be prefixed with a\n'#' character. The \u201c*\u201d character represents the so-called universal\nselector, which matches any widget.</p><p>To express more complicated situations, selectors can be combined in\nvarious ways:\n- To require that a widget satisfies several conditions,\n  combine several selectors into one by concatenating them. E.g.\n  <code>GtkButton#button1</code> matches a GtkButton widget\n  with the name button1.\n- To only match a widget when it occurs inside some other\n  widget, write the two selectors after each other, separated by whitespace.\n  E.g. <code>GtkToolBar GtkButton</code> matches GtkButton widgets\n  that occur inside a GtkToolBar.\n- In the previous example, the GtkButton is matched even\n  if it occurs deeply nested inside the toolbar. To restrict the match\n  to direct children of the parent widget, insert a \u201c&gt;\u201d character between\n  the two selectors. E.g. <code>GtkNotebook &amp;gt; GtkLabel</code> matches\n  GtkLabel widgets that are direct children of a GtkNotebook.</p><h2>Examples of widget classes and names in selectors</h2><p>Theme labels that are descendants of a window:\n|[\nGtkWindow GtkLabel {\n    background-color: #898989\n}\n]|</p><p>Theme notebooks, and anything that\u2019s within these:\n|[\nGtkNotebook {\n    background-color: #a939f0\n}\n]|</p><p>Theme combo boxes, and entries that are direct children of a notebook:\n|[\nGtkComboBox,\nGtkNotebook &gt; GtkEntry {\n    color: @fg_color;\n    background-color: #1209a2\n}\n]|</p><p>Theme any widget within a GtkBin:\n|[\nGtkBin * {\n    font: Sans 20\n}\n]|</p><p>Theme a label named title-label:\n|[\nGtkLabel#title-label {\n    font: Sans 15\n}\n]|</p><p>Theme any widget named main-entry:\n|[</p>\n<h1>main-entry {</h1>\n<pre><code>background-color: #f0a810\n</code></pre>\n<p>}\n]|</p><p>Widgets may also define style classes, which can be used for matching.\nWhen used in a selector, style classes must be prefixed with a \u201c.\u201d\ncharacter.</p><p>Refer to the documentation of individual widgets to learn which\nstyle classes they define and see\n[Style Classes and Regions][gtkstylecontext-classes]\nfor a list of all style classes used by GTK+ widgets.</p><p>Note that there is some ambiguity in the selector syntax when it comes\nto differentiation widget class names from regions. GTK+ currently treats\na string as a widget class name if it contains any uppercase characters\n(which should work for more widgets with names like GtkLabel).</p><h2>Examples for style classes in selectors</h2><p>Theme all widgets defining the class entry:\n|[\n.entry {\n    color: #39f1f9;\n}\n]|</p><p>Theme spinbuttons\u2019 entry:\n|[\nGtkSpinButton.entry {\n    color: #900185\n}\n]|</p><p>In complicated widgets like e.g. a GtkNotebook, it may be desirable\nto style different parts of the widget differently. To make this\npossible, container widgets may define regions, whose names\nmay be used for matching in selectors.</p><p>Some containers allow to further differentiate between regions by\napplying so-called pseudo-classes to the region. For example, the\ntab region in GtkNotebook allows to single out the first or last\ntab by using the :first-child or :last-child pseudo-class.\nWhen used in selectors, pseudo-classes must be prefixed with a\n':' character.</p><p>Refer to the documentation of individual widgets to learn which\nregions and pseudo-classes they define and see\n[Style Classes and Regions][gtkstylecontext-classes]\nfor a list of all regions\nused by GTK+ widgets.</p><h2>Examples for regions in selectors</h2><p>Theme any label within a notebook:\n|[\nGtkNotebook GtkLabel {\n    color: #f90192;\n}\n]|</p><p>Theme labels within notebook tabs:\n|[\nGtkNotebook tab GtkLabel {\n    color: #703910;\n}\n]|</p><p>Theme labels in the any first notebook tab, both selectors are\nequivalent:\n|[\nGtkNotebook tab:nth-child(first) GtkLabel,\nGtkNotebook tab:first-child GtkLabel {\n    color: #89d012;\n}\n]|</p><p>Another use of pseudo-classes is to match widgets depending on their\nstate. This is conceptually similar to the :hover, :active or :focus\npseudo-classes in CSS. The available pseudo-classes for widget states\nare :active, :prelight (or :hover), :insensitive, :selected, :focused\nand :inconsistent.</p><h2>Examples for styling specific widget states</h2><p>Theme active (pressed) buttons:\n|[\nGtkButton:active {\n    background-color: #0274d9;\n}\n]|</p><p>Theme buttons with the mouse pointer on it, both are equivalent:\n|[\nGtkButton:hover,\nGtkButton:prelight {\n    background-color: #3085a9;\n}\n]|</p><p>Theme insensitive widgets, both are equivalent:\n|[\n:insensitive,\n*:insensitive {\n    background-color: #320a91;\n}\n]|</p><p>Theme selection colors in entries:\n|[\nGtkEntry:selected {\n    background-color: #56f9a0;\n}\n]|</p><p>Theme focused labels:\n|[\nGtkLabel:focused {\n    background-color: #b4940f;\n}\n]|</p><p>Theme inconsistent checkbuttons:\n|[\nGtkCheckButton:inconsistent {\n    background-color: #20395a;\n}\n]|</p><p>Widget state pseudoclasses may only apply to the last element\nin a selector.</p><p>To determine the effective style for a widget, all the matching rule\nsets are merged. As in CSS, rules apply by specificity, so the rules\nwhose selectors more closely match a widget path will take precedence\nover the others.</p><h1>@ Rules</h1><p>GTK+\u2019s CSS supports the \\@import rule, in order to load another\nCSS style sheet in addition to the currently parsed one.</p><p>An example for using the \\@import rule:\n|[\n@import url (\"path/to/common.css\");\n]|</p><p>In order to extend key bindings affecting different widgets, GTK+\nsupports the \\@binding-set rule to parse a set of bind/unbind\ndirectives, see <span data-xref=\"Gtk.BindingSet\"/> for the supported syntax. Note that\nthe binding sets defined in this way must be associated with rule sets\nby setting the gtk-key-bindings style property.</p><p>Customized key bindings are typically defined in a separate\n<code>gtk-keys.css</code> CSS file and GTK+ loads this file\naccording to the current key theme, which is defined by the\n<span data-xref=\"Gtk.Settings-gtk-key-theme-name\"/> setting.</p><p>An example for using the \\@binding rule:\n|[\n@binding-set binding-set1 {\n  bind \"&lt;alt&gt;Left\" { \"move-cursor\" (visual-positions, -3, 0) };\n  unbind \"End\";\n};</p><p>@binding-set binding-set2 {\n  bind \"&lt;alt&gt;Right\" { \"move-cursor\" (visual-positions, 3, 0) };\n  bind \"&lt;alt&gt;KP_space\" { \"delete-from-cursor\" (whitespace, 1)\n                         \"insert-at-cursor\" (\" \") };\n};</p><p>GtkEntry {\n  gtk-key-bindings: binding-set1, binding-set2;\n}\n]|</p><p>GTK+ also supports an additional \\@define-color rule, in order\nto define a color name which may be used instead of color numeric\nrepresentations. Also see the <span data-xref=\"Gtk.Settings-gtk-color-scheme\"/> setting\nfor a way to override the values of these named colors.</p><p>An example for defining colors:\n|[\n@define-color bg_color #f9a039;</p><ul>\n<li>{\n    background-color: @bg_color;\n}\n]|</li>\n</ul><h1>Symbolic colors</h1><p>Besides being able to define color names, the CSS parser is also able\nto read different color expressions, which can also be nested, providing\na rich language to define colors which are derived from a set of base\ncolors.</p><p>An example for using symbolic colors:\n|[\n@define-color entry-color shade (@bg_color, 0.7);</p><p>GtkEntry {\n    background-color: @entry-color;\n}</p><p>GtkEntry:focused {\n    background-color: mix (@entry-color,\n                           shade (#fff, 0.5),\n                           0.8);\n}\n]|</p><h1>Specifying Colors # {#specifying-colors}</h1>\n<p>There are various ways to express colors in GTK+ CSS.</p><h2>rgb(r, g, b)</h2><p>An opaque color.</p><ul>\n<li><code>r</code>, <code>g</code>, <code>b</code> can be either integers between 0 and 255, or percentages.</li>\n</ul><p>|[\n  color: rgb(128, 10, 54);\n  background-color: rgb(20%, 30%, 0%);\n]|</p><h2>rgba(r, g, b, a)</h2><p>A translucent color.</p><ul>\n<li><code>r</code>, <code>g</code>, <code>b</code> can be either integers between 0 and 255, or percentages.</li>\n<li><code>a</code> is a floating point number between 0 and 1.</li>\n</ul><p>|[\n  color: rgb(128, 10, 54, 0.5);\n]|</p><h2>#xxyyzz</h2><p>An opaque color.</p><ul>\n<li><code>xx</code>, <code>yy</code>, <code>zz</code> are hexadecimal numbers specifying <code>r</code>, <code>g</code>, <code>b</code>\n  variants with between 1 and 4 hexadecimal digits per component.</li>\n</ul><p>|[\n  color: #f0c;\n  background-color: #ff00cc;\n  border-color: #ffff0000cccc;\n]|</p><h2>\\@name</h2><p>Reference to a color that has been defined with \\@define-color</p><p>|[\n  color: @bg_color;\n]|</p><h2>mix(color1, color2, factor)</h2><p>A linear combination of <code>color1</code> and <code>color2</code>.</p><ul>\n<li><code>factor</code> is a floating point number between 0 and 1.</li>\n</ul><p>|[\n  color: mix(#ff1e0a, @bg_color, 0.8);\n]|</p><h2>shade(color, factor)</h2><p>A lighter or darker variant of <code>color</code>.</p><ul>\n<li><code>factor</code> is a floating point number.</li>\n</ul><p>|[\n  color: shade(@fg_color, 0.5);\n]|</p><h2>lighter(color)</h2><p>A lighter variant of <code>color</code>.</p><p>|[\n  color: lighter(@fg_color);\n]|</p><h2>darker(color)</h2><p>A darker variant of <code>color</code>.</p><p>|[\n  color: darker(@bg_color);\n]|</p><h2>alpha(color, factor)</h2><p>Modifies passed color\u2019s alpha by a factor.</p><ul>\n<li><code>factor</code> is a floating point number. <code>factor</code> &lt; 1.0 results in a more\n  transparent color while <code>factor</code> &gt; 1.0 results in a more opaque color.</li>\n</ul><p>|[\n  color: alpha(@fg_color, 0.5);\n]|</p><h1>Gradients</h1><p>Linear or radial gradients can be used as background images.</p><h2>Linear Gradients</h2><p>A linear gradient along the line from (<code>start_x</code>, <code>start_y</code>) to\n(<code>end_x</code>, <code>end_y</code>) is specified using the following syntax:</p><p>&gt; <code>-gtk-gradient (linear, start_x start_y, end_x end_y, color-stop (position, color), ...)</code></p><ul>\n<li><code>start_x</code> and <code>end_x</code> can be either a floating point number between\n0 and 1, or one of the special values: \u201cleft\u201d, \u201cright\u201d, or \u201ccenter\u201d.</li>\n<li><code>start_y</code> and <code>end_y</code> can be either a floating point number between 0 and 1, or one\nof the special values: \u201ctop\u201d, \u201cbottom\u201d or \u201ccenter\u201d.</li>\n<li><code>position</code> is a floating point number between 0 and 1.</li>\n<li><code>color</code> is a color expression (see above).</li>\n</ul><p>The color-stop can be repeated multiple times to add more than one color\nstop. \u201cfrom (color)\u201d and \u201cto (color)\u201d can be used as abbreviations for\ncolor stops with position 0 and 1, respectively.</p><h2>Example: Linear Gradient</h2>\n<p><img alt=\"\" src=\"gradient1.png\" />\n|[\n-gtk-gradient (linear,\n               left top, right bottom,\n               from(@yellow), to(@blue));\n]|</p><h2>Example: Linear Gradient 2</h2>\n<p><img alt=\"\" src=\"gradient2.png\" />\n|[\n-gtk-gradient (linear,\n               0 0, 0 1,\n               color-stop(0, @yellow),\n               color-stop(0.2, @blue),\n               color-stop(1, #0f0))\n]|</p><h2>Radial Gradients</h2><p>A radial gradient along the two circles defined by (<code>start_x</code>,\n<code>start_y</code>, <code>start_radius</code>) and (<code>end_x</code>, <code>end_y</code>, <code>end_radius</code>) is\nspecified using the following syntax:</p><p>&gt; <code>-gtk-gradient (radial, start_x start_y, start_radius, end_x end_y, end_radius, color-stop (position, color), ...)</code></p><p>where <code>start_radius</code> and <code>end_radius</code> are floating point numbers\nand the other parameters are as before.</p><h2>Example: Radial Gradient</h2>\n<p><img alt=\"\" src=\"gradient3.png\" />\n|[\n-gtk-gradient (radial,\n               center center, 0,\n               center center, 1,\n               from(@yellow), to(@green))\n]|</p><h2>Example: Radial Gradient 2</h2>\n<p><img alt=\"\" src=\"gradient4.png\" />\n|[\n-gtk-gradient (radial,\n               0.4 0.4, 0.1,\n               0.6 0.6, 0.7,\n               color-stop (0, #f00),\n               color-stop (0.1, #a0f),\n               color-stop (0.2, @yellow),\n               color-stop (1, @green))\n]|</p><h1>Border images # {#border-images}</h1><p>Images and gradients can also be used in slices for the purpose of creating\nscalable borders.\nFor more information, see the <a href=\"http://www.w3.org/TR/css3-background/#border-images\">CSS3 documentation for the border-image property</a>.</p><p><img alt=\"\" src=\"slices.png\" /></p><p>The parameters of the slicing process are controlled by four\nseparate properties.</p><ul>\n<li>Image Source</li>\n<li>Image Slice</li>\n<li>Image Width</li>\n<li>Image Repeat</li>\n</ul><p>Note that you can use the <code>border-image</code> shorthand property to set\nvalues for the properties at the same time.</p><h2>Image Source</h2><p>The border image source can be specified either as a\nURL or a gradient:\n|[\n  border-image-source: url(path);\n]|\nor\n|[\n  border-image-source: -gtk-gradient(...);\n]|</p><h2>Image Slice</h2><p>|[\n  border-image-slice: top right bottom left;\n]|</p><p>The sizes specified by the <code>top</code>, <code>right</code>, <code>bottom</code>, and <code>left</code> parameters\nare the offsets (in pixels) from the relevant edge where the image\nshould be \u201ccut off\u201d to build the slices used for the rendering\nof the border.</p><h2>Image Width</h2><p>|[\n  border-image-width: top right bottom left;\n]|</p><p>The sizes specified by the @top, @right, @bottom and @left parameters\nare inward distances from the border box edge, used to specify the\nrendered size of each slice determined by border-image-slice.\nIf this property is not specified, the values of border-width will\nbe used as a fallback.</p><h2>Image Repeat</h2><p>Specifies how the image slices should be rendered in the area\noutlined by border-width.</p><p>|[\n  border-image-repeat: [stretch|repeat|round|space];\n]|\nor\n|[\n  border-image-repeat: [stretch|repeat|round|space] [stretch|repeat|round|space];\n]|</p><ul>\n<li>The default (stretch) is to resize the slice to fill in the\nwhole allocated area.</li>\n</ul><ul>\n<li>If the value of this property is \u201crepeat\u201d, the image slice will\nbe tiled to fill the area.</li>\n</ul><ul>\n<li>If the value of this property is \u201cround\u201d, the image slice will be\ntiled to fill the area, and scaled to fit it exactly a whole number\nof times.</li>\n</ul><ul>\n<li>If the value of this property is \u201cspace\u201d, the image slice will be\ntiled to fill the area, and if it doesn\u2019t fit it exactly a whole\nnumber of times, the extra space is distributed as padding around\nthe slices.</li>\n</ul><ul>\n<li>If two options are specified, the first one affects the\nhorizontal behaviour and the second one the vertical behaviour.  If\nonly one option is specified, it affects both.</li>\n</ul><h2>Example: Border Image</h2>\n<p><img alt=\"\" src=\"border1.png\" />\n|[\nborder-image: url(\"gradient1.png\") 10 10 10 10;\n]|</p><h2>Example: Repeating Border Image</h2>\n<p><img alt=\"\" src=\"border2.png\" />\n|[\nborder-image: url(\"gradient1.png\") 10 10 10 10 repeat;\n]|</p><h2>Example: Stetched Border Image</h2>\n<p><img alt=\"\" src=\"border3.png\" />\n|[\nborder-image: url(\"gradient1.png\") 10 10 10 10 stretch;\n]|</p><h1>Supported Properties</h1><p>Properties are the part that differ the most to common CSS, not all\nproperties are supported (some are planned to be supported\neventually, some others are meaningless or don't map intuitively in\na widget based environment).</p><p>The currently supported properties are:</p><h2>engine: [name|none];</h2><ul>\n<li><code>none</code> means to use the default (ie. builtin engine)\n|[\n engine: clearlooks;\n]|</li>\n</ul><h2>background-color: [color|transparent];</h2><ul>\n<li><code>color</code>: See [Specifying Colors][specifying-colors]\n|[\n background-color: shade (@color1, 0.5);\n]|</li>\n</ul><h2>color: [color|transparent];</h2><ul>\n<li><code>color</code>: See [Specifying Colors][specifying-colors]\n|[\n color: #fff;\n]|</li>\n</ul><h2>border-color: [color|transparent]{1,4};</h2><ul>\n<li><code>color</code>: See [Specifying Colors][specifying-colors]</li>\n<li>Four values used to specify: top right bottom left</li>\n<li>Three values used to specify: top vertical bottom</li>\n<li>Two values used to specify: horizontal vertical</li>\n<li>One value used to specify: color\n|[\n border-color: red green blue;\n]|</li>\n</ul><h2>border-top-color: [color|transparent];</h2><ul>\n<li><code>color</code>: See [Specifying Colors][specifying-colors]\n|[\n border-top-color: @borders;\n]|</li>\n</ul><h2>border-right-color: [color|transparent];</h2><ul>\n<li><code>color</code>: See [Specifying Colors][specifying-colors]\n|[\n border-right-color: @borders;\n]|</li>\n</ul><h2>border-bottom-color: [color|transparent];</h2><ul>\n<li><code>color</code>: See [Specifying Colors][specifying-colors]\n|[\n border-bottom-color: @borders;\n]|</li>\n</ul><h2>border-left-color: [color|transparent];</h2><ul>\n<li><code>color</code>: See [Specifying Colors][specifying-colors]\n|[\n border-left-color: @borders;\n]|</li>\n</ul><h2>font-family: name;</h2><p>The name of the font family or font name to use.</p><ul>\n<li>Note: unlike the CSS2 Specification this does not support using a\n  prioritized list of font family names and/or generic family\n  names.</li>\n</ul><p>|[\n font-family: Sans, Cantarell;\n]|</p><h2>font-style: [normal|oblique|italic];</h2><p>Selects between normal, italic and oblique faces within a font family.</p><p>|[\n font-style: italic;\n]|</p><h2>font-variant: [normal|small-caps];</h2><p>In a small-caps font the lower case letters look similar to the\nuppercase ones, but in a smaller size and with slightly different\nproportions.</p><p>|[\n font-variant: normal;\n]|</p><h2>font-weight: [normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900];</h2><p>Selects the weight of the font. The values '100' to '900' form an\nordered sequence, where each number indicates a weight that is at\nleast as dark as its predecessor. The keyword 'normal' is\nsynonymous with '400', and 'bold' is synonymous with\n'700'. Keywords other than 'normal' and 'bold' have been shown to\nbe often confused with font names and a numerical scale was\ntherefore chosen for the 9-value list.\n- Maps to #PANGO_TYPE_WEIGHT\n|[\n font-weight: bold;\n]|</p><h2>font-size: [absolute-size|relative-size|percentage];</h2><ul>\n<li><code>absolute-size</code>: The size in normal size units like <code>px</code>, <code>pt</code>,\n   and <code>em</code>. Or symbolic sizes like <code>xx-small</code>, <code>x-small</code>, <code>small</code>,\n   <code>medium</code>, <code>large</code>, <code>x-large</code>, <code>xx-large</code>.</li>\n<li><code>relative-size</code>: <code>larger</code> or <code>smaller</code> relative to the parent.</li>\n<li><code>percentage</code>: A percentage difference from the nominal size.\n|[\n font-size: 12px;\n]|</li>\n</ul><h2>font: [family] [style] [variant] [size];</h2><p>A shorthand for setting a few font properties at once.\n- Supports any format accepted by <span data-xref=\"Pango.font_description_from_string\">Pango.font_description_from_string</span>\n- Note: this is somewhat different from the CSS2 Specification for this property.\n|[\n font: Bold 11;\n]|</p><h2>margin: [length|percentage]{1,4};</h2><p>A shorthand for setting the margin space required on all sides of\nan element.\n- Four values used to specify: top right bottom left\n- Three values used to specify: top horizontal bottom\n- Two values used to specify: vertical horizontal\n- One value used to specify: margin\n|[\n margin: 1em 2em 4em;\n]|</p><h2>margin-top: [length|percentage];</h2><p>Sets the margin space required on the top of an element.\n|[\n margin-top: 10px;\n]|</p><h2>margin-right: [length|percentage];</h2><p>Sets the margin space required on the right of an element.\n|[\n margin-right: 0px;\n]|</p><h2>margin-bottom: [length|percentage];</h2><p>Sets the margin space required on the bottom of an element.\n|[\n margin-bottom: 10px;\n]|</p><h2>margin-left: [length|percentage];</h2><p>Sets the margin space required on the left of an element.\n|[\n margin-left: 1em;\n]|</p><h2>padding: [length|percentage]{1,4};</h2><p>A shorthand for setting the padding space required on all sides of\nan element. The padding area is the space between the content of\nthe element and its border.\n- Four values used to specify: top right bottom left\n- Three values used to specify: top horizontal bottom\n- Two values used to specify: vertical horizontal\n- One value used to specify: padding\n|[\n padding: 1em 2em 4em;\n]|</p><h2>padding-top: [length|percentage];</h2><p>Sets the padding space required on the top of an element.\n|[\n padding-top: 10px;\n]|</p><h2>padding-right: [length|percentage];</h2><p>Sets the padding space required on the right of an element.\n|[\n padding-right: 0px;\n]|</p><h2>padding-bottom: [length|percentage];</h2><p>Sets the padding space required on the bottom of an element.\n|[\n padding-bottom: 10px;\n]|</p><h2>padding-left: [length|percentage];</h2><p>Sets the padding space required on the left of an element.\n|[\n padding-left: 1em;\n]|</p><h2>border-width: [width]{1,4};</h2><p>A shorthand for setting the border width on all sides of\nan element.\n- Four values used to specify: top right bottom left\n- Three values used to specify: top vertical bottom\n- Two values used to specify: horizontal vertical\n- One value used to specify: width\n|[\n border-width: 1px 2px 4px;\n]|</p><h2>border-top-width: [width];</h2><p>Sets the border width required on the top of an element.\n|[\n border-top: 10px;\n]|</p><h2>border-right-width: [width];</h2><p>Sets the border width required on the right of an element.\n|[\n border-right: 0px;\n]|</p><h2>border-bottom-width: [width];</h2><p>Sets the border width required on the bottom of an element.\n|[\n border-bottom: 10px;\n]|</p><h2>border-left-width: [width];</h2><p>Sets the border width required on the left of an element.\n|[\n border-left: 1em;\n]|</p><h2>border-radius: [length|percentage]{1,4};</h2><p>Allows setting how rounded all border corners are.\n- Four values used to specify: top-left top-right bottom-right bottom-left\n- Three values used to specify: top-left top-right-and-bottom-left bottom-right\n- Two values used to specify: top-left-and-bottom-right top-right-and-bottom-left\n- One value used to specify: radius on all sides\n|[\n border-radius: 8px\n]|</p><h2>border-style: [none|solid|inset|outset]{1,4};</h2><p>A shorthand property for setting the line style for all four sides\nof the elements border.\n- Four values used to specify: top right bottom left;\n- Three values used to specify: top horizontal bottom\n- Two values used to specify: vertical horizontal\n- One value used to specify: style\n|[\n border-style: solid;\n]|</p><h2>border-image: [source] [slice] [ / width ] [repeat]; A shorthand</h2>\n<p>for setting an image on the borders of elements. See [Border\nImages][border-images].\n|[\n border-image: url(\"/path/to/image.png\") 3 4 4 3 repeat stretch;\n]|</p><h2>border-image-source: [none|url|linear-gradient]{1,4};</h2><p>Defines the image to use instead of the style of the border. If\nthis property is set to none, the style defined by border-style is\nused instead.\n|[\n border-image-source: url(\"/path/to/image.png\");\n]|</p><h2>border-image-slice: [number|percentage]{1,4};</h2><p>Divides the image specified by border-image-source in nine regions:\nthe four corners, the four edges and the middle. It does this by\nspecifying 4 inwards offsets.\n- Four values used to specify: top right bottom left;\n- Three values used to specify: top vertical bottom\n- Two values used to specify: horizontal vertical\n- One value used to specify: slice\n|[\n border-image-slice: 3 3 4 3;\n]|</p><h2>border-image-width: [length|percentage]{1,4};</h2><p>Defines the offset to use for dividing the border image in nine\nparts, the top-left corner, central top edge, top-right-corner,\ncentral right edge, bottom-right corner, central bottom edge,\nbottom-left corner, and central right edge. They represent inward\ndistance from the top, right, bottom, and left edges.\n- Four values used to specify: top right bottom left;\n- Three values used to specify: top horizontal bottom\n- Two values used to specify: vertical horizontal\n- One value used to specify: width\n|[\n border-image-width: 4px 0 4px 0;\n]|</p><h2>border-image-repeat: [none|url|linear-gradient]{1,4};</h2><p>Defines how the middle part of a border image is handled to match\nthe size of the border. It has a one-value syntax which describes\nthe behavior for all sides, and a two-value syntax that sets a\ndifferent value for the horizontal and vertical behavior.\n- Two values used to specify: horizontal vertical\n- One value used to specify: repeat\n|[\n border-image-repeat: stretch;\n]|</p><h2>background-image: [none|url|linear-gradient], ...</h2>\n<p>Sets one or several background images for an element. The images\nare drawn on successive stacking context layers, with the first\nspecified being drawn as if it is the closest to the user. The\nborders of the element are then drawn on top of them, and the\nbackground-color is drawn beneath them.\n- There can be several sources listed, separated by commas.\n|[\n background-image: gtk-gradient (linear,\n                                 left top, right top,\n                                 from (#fff), to (#000));\n]|</p><h2>background-repeat: [repeat|no-repeat|space|round|repeat-x|repeat-y];</h2><p>Defines how background images are repeated. A background image can\nbe repeated along the horizontal axis, the vertical axis, both, or\nnot repeated at all.\n- <code>repeat</code>: The image is repeated in the given direction as much as\n   needed to cover the whole background image painting area. The\n   last image may be clipped if the whole thing won't fit in the\n   remaining area.\n- <code>space</code>: The image is repeated in the given direction as much as\n   needed to cover most of the background image painting area,\n   without clipping an image. The remaining non-covered space is\n   spaced out evenly between the images. The first and last images\n   touches the edge of the element. The value of the\n   background-position CSS property is ignored for the concerned\n   direction, except if one single image is greater than the\n   background image painting area, which is the only case where an\n   image can be clipped when the space value is used.\n- <code>round</code>: The image is repeated in the given direction as much as\n   needed to cover most of the background image painting area,\n   without clipping an image. If it doesn't cover exactly the area,\n   the tiles are resized in that direction in order to match it.\n- <code>no-repeat</code>: The image is not repeated (and hence the background\n   image painting area will not necessarily been entirely\n   covered). The position of the non-repeated background image is\n   defined by the background-position CSS property.\n- Note if not specified, the style doesn\u2019t respect the CSS3\n   specification, since the background will be stretched to fill\n   the area.\n|[\n background-repeat: no-repeat;\n]|</p><h2>text-shadow: horizontal_offset vertical_offset [ blur_radius ] color;</h2><p>A shadow list can be applied to text or symbolic icons, using the CSS3\ntext-shadow syntax, as defined in the\n<a href=\"http://www.w3.org/TR/css3-text/#text-shadow\">CSS3 Specification</a>.</p><ul>\n<li>The offset of the shadow is specified with the\n<code>horizontal_offset</code> and <code>vertical_offset</code> parameters.</li>\n<li>The optional blur radius is parsed, but it is currently not\nrendered by the GTK+ theming engine.</li>\n</ul><p>To set a shadow on an icon, use the <code>icon-shadow</code> property instead,\nwith the same syntax.</p><p>To set multiple shadows on an element, you can specify a comma-separated list\nof shadow elements in the <code>text-shadow</code> or <code>icon-shadow</code> property. Shadows are\nalways rendered front to back (i.e. the first shadow specified is on top of the\nothers). Shadows can thus overlay each other, but they can never overlay the\ntext or icon itself, which is always rendered on top of the shadow layer.</p><p>|[\n  text-shadow: text-shadow: 1 1 0 blue, -4 -4 red;\n]|</p><h2>box-shadow: [ inset ] horizontal_offset vertical_offset [ blur_radius ] [ spread ] color;</h2><p>Themes can apply shadows on framed elements using the CSS3 box-shadow syntax,\nas defined in the\n<a href=\"http://www.w3.org/TR/css3-background/#the-box-shadow\">CSS3 Specification</a>.</p><ul>\n<li>A positive offset will draw a shadow that is offset to the right (down) of the box,</li>\n<li>A negative offset to the left (top).</li>\n<li>The optional spread parameter defines an additional distance to\nexpand the shadow shape in all directions, by the specified radius.</li>\n<li>The optional blur radius parameter is parsed, but it is currently not rendered by\nthe GTK+ theming engine.</li>\n<li>The inset parameter defines whether the drop shadow should be rendered inside or outside\nthe box canvas.</li>\n</ul><p>To set multiple box-shadows on an element, you can specify a comma-separated list\nof shadow elements in the <code>box-shadow</code> property. Shadows are always rendered\nfront to back (i.e. the first shadow specified is on top of the others) so they may\noverlap other boxes or other shadows.</p><p>|[\n  box-shadow: inset 0 1px 1px alpha(black, 0.1);\n]|</p><h2>transition: duration [s|ms] [linear|ease|ease-in|ease-out|ease-in-out] [loop];</h2><p>Styles can specify transitions that will be used to create a\ngradual change in the appearance when a widget state changes.\n- The <code>duration</code> is the amount of time that the animation will take\nfor a complete cycle from start to end.\n- If the loop option is given, the animation will be repated until\nthe state changes again.\n- The option after the duration determines the transition function\nfrom a small set of predefined functions.</p><ul>\n<li>Linear</li>\n</ul><p><img alt=\"\" src=\"linear.png\" /></p><ul>\n<li>Ease transition</li>\n</ul><p><img alt=\"\" src=\"ease.png\" /></p><ul>\n<li>Ease-in-out transition</li>\n</ul><p><img alt=\"\" src=\"ease-in-out.png\" /></p><ul>\n<li>Ease-in transition</li>\n</ul><p><img alt=\"\" src=\"ease-in.png\" /></p><ul>\n<li>Ease-out transition</li>\n</ul><p><img alt=\"\" src=\"ease-out.png\" /></p><p>|[\n  transition: 150ms ease-in-out;\n]|</p><h2>gtk-key-bindings: binding1, binding2, ...;</h2><p>Key binding set name list.</p><h2>Other Properties</h2><p>GtkThemingEngines can register their own, engine-specific style properties\nwith the function <span data-xref=\"Gtk.ThemingEngine.register_property\"/>. These properties\ncan be set in CSS like other properties, using a name of the form\n<code>-namespace-name</code>, where namespace is typically\nthe name of the theming engine, and name is the\nname of the property. Style properties that have been registered by widgets\nusing <span data-xref=\"Gtk.WidgetClass.install_style_property\"/> can also be set in this\nway, using the widget class name for namespace.</p><p>An example for using engine-specific style properties:\n|[\n* {\n    engine: clearlooks;\n    border-radius: 4;\n    -GtkPaned-handle-size: 6;\n    -clearlooks-colorize-scrollbar: false;\n}\n]|</p>",
    "fields": [
        {
            "doc": "",
            "kind": "field",
            "name": "parent_instance"
        },
        {
            "doc": "",
            "kind": "field",
            "name": "priv"
        }
    ],
    "kind": "class",
    "methods": [
        {
            "doc": "<p>Loads <code>data</code> into <code>css_provider</code>, making it clear any previously loaded\ninformation.</p>",
            "kind": "method",
            "name": "load_from_data",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "data",
                    "direction": "in",
                    "type": "ByteArray"
                },
                {
                    "allow_none": false,
                    "argname": "length",
                    "direction": "in",
                    "type": "Number(gssize)"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Loads the data contained in <code>file</code> into <code>css_provider</code>, making it\nclear any previously loaded information.</p>",
            "kind": "method",
            "name": "load_from_file",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "file",
                    "direction": "in",
                    "type": "Gio.File"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Loads the data contained in <code>path</code> into <code>css_provider</code>, making it clear\nany previously loaded information.</p>",
            "kind": "method",
            "name": "load_from_path",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "path",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Converts the <code>provider</code> into a string representation in CSS\nformat.</p><p>Using <span data-xref=\"Gtk.CssProvider.load_from_data\"/> with the return value\nfrom this function on a new provider created with\n<span data-xref=\"Gtk.CssProvider.new\"/> will basically create a duplicate of\nthis <code>provider</code>.</p>",
            "kind": "method",
            "name": "to_string",
            "parameters": [],
            "retval": {
                "type": "String"
            }
        },
        [
            {
                "doc": "<p>Returns the provider containing the style settings used as a\nfallback for all widgets.</p>",
                "kind": "function",
                "name": "get_default",
                "parameters": [],
                "retval": {
                    "type": "Gtk.CssProvider"
                }
            },
            {
                "doc": "<p>Loads a theme from the usual theme paths</p>",
                "kind": "function",
                "name": "get_named",
                "parameters": [
                    {
                        "allow_none": false,
                        "argname": "name",
                        "direction": "in",
                        "type": "String"
                    },
                    {
                        "allow_none": true,
                        "argname": "variant",
                        "direction": "in",
                        "type": "String"
                    }
                ],
                "retval": {
                    "type": "Gtk.CssProvider"
                }
            }
        ]
    ],
    "name": "CssProvider",
    "properties": [],
    "signals": [
        {
            "doc": "<p>Signals that a parsing error occured. the @path, @line and @position\ndescribe the actual location of the error as accurately as possible.</p><p>Parsing errors are never fatal, so the parsing will resume after\nthe error. Errors may however cause parts of the given\ndata or even all of it to not be parsed at all. So it is a useful idea\nto check that the parsing succeeds by connecting to this signal.</p><p>Note that this signal may be emitted at any time as the css provider\nmay opt to defer parsing parts or all of the input to a later time\nthan when a loading function was called.</p>",
            "kind": "signal",
            "name": "parsing-error",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "section",
                    "direction": "in",
                    "type": "Gtk.CssSection"
                },
                {
                    "allow_none": false,
                    "argname": "error",
                    "direction": "in",
                    "type": "GLib.Error"
                }
            ],
            "retval": {
                "type": "void"
            }
        }
    ],
    "vfuncs": [
        {
            "doc": "",
            "kind": "vfunc",
            "name": "parsing_error",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "section",
                    "direction": "in",
                    "type": "Gtk.CssSection"
                },
                {
                    "allow_none": false,
                    "argname": "error",
                    "direction": "in",
                    "type": "GLib.Error"
                }
            ],
            "retval": {
                "type": "void"
            }
        }
    ]
}