{
    "constructors": [],
    "doc": "<p>The <span data-xref=\"Gtk.TreeModelSort\"/> is a model which implements the <span data-xref=\"Gtk.TreeSortable\"/>\ninterface.  It does not hold any data itself, but rather is created with\na child model and proxies its data.  It has identical column types to\nthis child model, and the changes in the child are propagated.  The\nprimary purpose of this model is to provide a way to sort a different\nmodel without modifying it. Note that the sort function used by\n<span data-xref=\"Gtk.TreeModelSort\"/> is not guaranteed to be stable.</p><p>The use of this is best demonstrated through an example.  In the\nfollowing sample code we create two <span data-xref=\"Gtk.TreeView\"/> widgets each with a\nview of the same data.  As the model is wrapped here by a\n<span data-xref=\"Gtk.TreeModelSort\"/>, the two #GtkTreeViews can each sort their\nview of the data without affecting the other.  By contrast, if we\nsimply put the same model in each widget, then sorting the first would\nsort the second.</p><h2>Using a <span data-xref=\"Gtk.TreeModelSort\"/></h2><p>|[<!-- language=\"C\" -->\n{\n  GtkTreeView <em>tree_view1;\n  GtkTreeView </em>tree_view2;\n  GtkTreeModel <em>sort_model1;\n  GtkTreeModel </em>sort_model2;\n  GtkTreeModel *child_model;</p><p>// get the child model\n  child_model = get_my_model ();</p><p>// Create the first tree\n  sort_model1 = gtk_tree_model_sort_new_with_model (child_model);\n  tree_view1 = gtk_tree_view_new_with_model (sort_model1);</p><p>// Create the second tree\n  sort_model2 = gtk_tree_model_sort_new_with_model (child_model);\n  tree_view2 = gtk_tree_view_new_with_model (sort_model2);</p><p>// Now we can sort the two models independently\n  gtk_tree_sortable_set_sort_column_id (GTK_TREE_SORTABLE (sort_model1),\n                                        COLUMN_1, GTK_SORT_ASCENDING);\n  gtk_tree_sortable_set_sort_column_id (GTK_TREE_SORTABLE (sort_model2),\n                                        COLUMN_1, GTK_SORT_DESCENDING);\n}\n]|</p><p>To demonstrate how to access the underlying child model from the sort\nmodel, the next example will be a callback for the <span data-xref=\"Gtk.TreeSelection\"/>\n<span data-xref=\"Gtk.TreeSelection-changed\"/> signal.  In this callback, we get a string\nfrom COLUMN_1 of the model.  We then modify the string, find the same\nselected row on the child model, and change the row there.</p><h2>Accessing the child model of in a selection changed callback</h2><p>|[<!-- language=\"C\" -->\nvoid\nselection_changed (GtkTreeSelection <em>selection, gpointer data)\n{\n  GtkTreeModel </em>sort_model = NULL;\n  GtkTreeModel <em>child_model;\n  GtkTreeIter sort_iter;\n  GtkTreeIter child_iter;\n  char </em>some_data = NULL;\n  char *modified_data;</p><p>// Get the current selected row and the model.\n  if (! gtk_tree_selection_get_selected (selection,\n                                         &amp;sort_model,\n                                         &amp;sort_iter))\n    return;</p><p>// Look up the current value on the selected row and get\n  // a new value to change it to.\n  gtk_tree_model_get (GTK_TREE_MODEL (sort_model), &amp;sort_iter,\n                      COLUMN_1, &amp;some_data,\n                      -1);</p><p>modified_data = change_the_data (some_data);\n  g_free (some_data);</p><p>// Get an iterator on the child model, instead of the sort model.\n  gtk_tree_model_sort_convert_iter_to_child_iter (GTK_TREE_MODEL_SORT (sort_model),\n                                                  &amp;child_iter,\n                                                  &amp;sort_iter);</p><p>// Get the child model and change the value of the row. In this\n  // example, the child model is a GtkListStore. It could be any other\n  // type of model, though.\n  child_model = gtk_tree_model_sort_get_model (GTK_TREE_MODEL_SORT (sort_model));\n  gtk_list_store_set (GTK_LIST_STORE (child_model), &amp;child_iter,\n                      COLUMN_1, &amp;modified_data,\n                      -1);\n  g_free (modified_data);\n}\n]|</p>",
    "kind": "class",
    "methods": [
        {
            "doc": "<p>This function should almost never be called.  It clears the <pre>tree_model_sort</pre>\nof any cached iterators that haven\u2019t been reffed with\n<span data-xref=\"Gtk.TreeModel.ref_node\"/>.  This might be useful if the child model being\nsorted is static (and doesn\u2019t change often) and there has been a lot of\nunreffed access to nodes.  As a side effect of this function, all unreffed\niters will be invalid.</p>",
            "kind": "method",
            "name": "clear_cache",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets <pre>sort_iter</pre> to point to the row in <pre>tree_model_sort</pre> that corresponds to\nthe row pointed at by <pre>child_iter</pre>.  If <pre>sort_iter</pre> was not set, <pre>false</pre>\nis returned.  Note: a boolean is only returned since 2.14.</p>",
            "kind": "method",
            "name": "convert_child_iter_to_iter",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "sort_iter",
                    "direction": "out",
                    "type": "Gtk.TreeIter"
                },
                {
                    "allow_none": false,
                    "argname": "child_iter",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Converts <pre>child_path</pre> to a path relative to <pre>tree_model_sort</pre>.  That is,\n<pre>child_path</pre> points to a path in the child model.  The returned path will\npoint to the same row in the sorted model.  If <pre>child_path</pre> isn\u2019t a valid\npath on the child model, then <pre>null</pre> is returned.</p>",
            "kind": "method",
            "name": "convert_child_path_to_path",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "child_path",
                    "direction": "in",
                    "type": "Gtk.TreePath"
                }
            ],
            "retval": {
                "type": "Gtk.TreePath"
            }
        },
        {
            "doc": "<p>Sets <pre>child_iter</pre> to point to the row pointed to by <pre>sorted_iter</pre>.</p>",
            "kind": "method",
            "name": "convert_iter_to_child_iter",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "child_iter",
                    "direction": "out",
                    "type": "Gtk.TreeIter"
                },
                {
                    "allow_none": false,
                    "argname": "sorted_iter",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Converts <pre>sorted_path</pre> to a path on the child model of <pre>tree_model_sort</pre>.\nThat is, <pre>sorted_path</pre> points to a location in <pre>tree_model_sort</pre>.  The\nreturned path will point to the same location in the model not being\nsorted.  If <pre>sorted_path</pre> does not point to a location in the child model,\n<pre>null</pre> is returned.</p>",
            "kind": "method",
            "name": "convert_path_to_child_path",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "sorted_path",
                    "direction": "in",
                    "type": "Gtk.TreePath"
                }
            ],
            "retval": {
                "type": "Gtk.TreePath"
            }
        },
        {
            "doc": "<p>Returns the model the <span data-xref=\"Gtk.TreeModelSort\"/> is sorting.</p>",
            "kind": "method",
            "name": "get_model",
            "parameters": [],
            "retval": {
                "type": "Gtk.TreeModel"
            }
        },
        {
            "doc": "<blockquote>\n<p>This function is slow. Only use it for debugging and/or testing\npurposes.</p>\n</blockquote><p>Checks if the given iter is a valid iter for this <span data-xref=\"Gtk.TreeModelSort\"/>.</p>",
            "kind": "method",
            "name": "iter_is_valid",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>This resets the default sort function to be in the \u201cunsorted\u201d state.  That\nis, it is in the same order as the child model. It will re-sort the model\nto be in the same order as the child model only if the <span data-xref=\"Gtk.TreeModelSort\"/>\nis in \u201cunsorted\u201d state.</p>",
            "kind": "method",
            "name": "reset_default_sort_func",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        }
    ],
    "name": "TreeModelSort",
    "properties": [
        {
            "doc": "",
            "kind": "property",
            "name": "model",
            "type": "Gtk.TreeModel"
        }
    ],
    "signals": [],
    "vfuncs": []
}