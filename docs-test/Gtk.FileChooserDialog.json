{
    "constructors": [
        {
            "doc": "<p>Creates a new <span data-xref=\"Gtk.FileChooserDialog\"/>.  This function is analogous to\n<span data-xref=\"Gtk.Dialog.new_with_buttons\"/>.</p>",
            "kind": "constructor",
            "name": "new",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "title",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": true,
                    "argname": "parent",
                    "direction": "in",
                    "type": "Gtk.Window"
                },
                {
                    "allow_none": false,
                    "argname": "action",
                    "direction": "in",
                    "type": "Gtk.FileChooserAction"
                },
                {
                    "allow_none": true,
                    "argname": "first_button_text",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "...",
                    "direction": "in",
                    "type": "<varargs>"
                }
            ],
            "retval": {
                "type": "Gtk.Widget"
            }
        }
    ],
    "doc": "<p><span data-xref=\"Gtk.FileChooserDialog\"/> is a dialog box suitable for use with\n\u201cFile/Open\u201d or \u201cFile/Save as\u201d commands.  This widget works by\nputting a <span data-xref=\"Gtk.FileChooserWidget\"/> inside a <span data-xref=\"Gtk.Dialog\"/>.  It exposes\nthe <span data-xref=\"Gtk.FileChooser\"/> interface, so you can use all of the\n<span data-xref=\"Gtk.FileChooser\"/> functions on the file chooser dialog as well as\nthose for <span data-xref=\"Gtk.Dialog\"/>.</p><p>Note that <span data-xref=\"Gtk.FileChooserDialog\"/> does not have any methods of its\nown.  Instead, you should use the functions that work on a\n<span data-xref=\"Gtk.FileChooser\"/>.</p><h2>Typical usage ## {#gtkfilechooser-typical-usage}</h2><p>In the simplest of cases, you can the following code to use\n<span data-xref=\"Gtk.FileChooserDialog\"/> to select a file for opening:</p><p>|[\nGtkWidget *dialog;\nGtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_OPEN;\ngint res;</p><p>dialog = gtk_file_chooser_dialog_new (\"Open File\",\n                                      parent_window,\n                                      action,\n                                      <em>(\"_Cancel\"),\n                                      GTK_RESPONSE_CANCEL,\n                                      </em>(\"_Open\"),\n                                      GTK_RESPONSE_ACCEPT,\n                                      NULL);</p><p>res = gtk_dialog_run (GTK_DIALOG (dialog));\nif (res == GTK_RESPONSE_ACCEPT)\n  {\n    char <em>filename;\n    GtkFileChooser </em>chooser = GTK_FILE_CHOOSER (dialog);\n    filename = gtk_file_chooser_get_filename (chooser);\n    open_file (filename);\n    g_free (filename);\n  }</p><p>gtk_widget_destroy (dialog);\n]|</p><p>To use a dialog for saving, you can use this:</p><p>|[\nGtkWidget <em>dialog;\nGtkFileChooser </em>chooser;\nGtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_SAVE;\ngint res;</p><p>dialog = gtk_file_chooser_dialog_new (\"Save File\",\n                                      parent_window,\n                                      action,\n                                      <em>(\"_Cancel\"),\n                                      GTK_RESPONSE_CANCEL,\n                                      </em>(\"_Save\"),\n                                      GTK_RESPONSE_ACCEPT,\n                                      NULL);\nchooser = GTK_FILE_CHOOSER (dialog);</p><p>gtk_file_chooser_set_do_overwrite_confirmation (chooser, TRUE);</p><p>if (user_edited_a_new_document)\n  gtk_file_chooser_set_current_name (chooser,\n                                     _(\"Untitled document\"));\nelse\n  gtk_file_chooser_set_filename (chooser,\n                                 existing_filename);</p><p>res = gtk_dialog_run (GTK_DIALOG (dialog));\nif (res == GTK_RESPONSE_ACCEPT)\n  {\n    char *filename;</p><pre><code>filename = gtk_file_chooser_get_filename (chooser);\nsave_to_file (filename);\ng_free (filename);\n</code></pre>\n<p>}</p><p>gtk_widget_destroy (dialog);\n]|</p><h2>Setting up a file chooser dialog ## {#gtkfilechooserdialog-setting-up}</h2><p>There are various cases in which you may need to use a <span data-xref=\"Gtk.FileChooserDialog\"/>:</p><ul>\n<li>To select a file for opening. Use #GTK_FILE_CHOOSER_ACTION_OPEN.</li>\n</ul><ul>\n<li>To save a file for the first time. Use #GTK_FILE_CHOOSER_ACTION_SAVE,\n  and suggest a name such as \u201cUntitled\u201d with <span data-xref=\"Gtk.FileChooser.set_current_name\"/>.</li>\n</ul><ul>\n<li>To save a file under a different name. Use #GTK_FILE_CHOOSER_ACTION_SAVE,\n  and set the existing filename with <span data-xref=\"Gtk.FileChooser.set_filename\"/>.</li>\n</ul><ul>\n<li>To choose a folder instead of a file. Use #GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER.</li>\n</ul><p>Note that old versions of the file chooser\u2019s documentation suggested\nusing <span data-xref=\"Gtk.FileChooser.set_current_folder\"/> in various\nsituations, with the intention of letting the application\nsuggest a reasonable default folder.  This is no longer\nconsidered to be a good policy, as now the file chooser is\nable to make good suggestions on its own.  In general, you\nshould only cause the file chooser to show a specific folder\nwhen it is appropriate to use <span data-xref=\"Gtk.FileChooser.set_filename\"/>,\ni.e. when you are doing a Save As command and you already\nhave a file saved somewhere.</p><h2>Response Codes ## {#gtkfilechooserdialog-responses}</h2><p><span data-xref=\"Gtk.FileChooserDialog\"/> inherits from <span data-xref=\"Gtk.Dialog\"/>, so buttons that\ngo in its action area have response codes such as</p>\n<h1>GTK_RESPONSE_ACCEPT and #GTK_RESPONSE_CANCEL.  For example, you</h1>\n<p>could call <span data-xref=\"Gtk.FileChooserDialog.new\"/> as follows:</p><p>|[\nGtkWidget *dialog;\nGtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_OPEN;</p><p>dialog = gtk_file_chooser_dialog_new (\"Open File\",\n                                      parent_window,\n                                      action,\n                                      <em>(\"_Cancel\"),\n                                      GTK_RESPONSE_CANCEL,\n                                      </em>(\"_Open\"),\n                                      GTK_RESPONSE_ACCEPT,\n                                      NULL);\n]|</p><p>This will create buttons for \u201cCancel\u201d and \u201cOpen\u201d that use stock\nresponse identifiers from <span data-xref=\"Gtk.ResponseType\"/>.  For most dialog\nboxes you can use your own custom response codes rather than the\nones in <span data-xref=\"Gtk.ResponseType\"/>, but <span data-xref=\"Gtk.FileChooserDialog\"/> assumes that\nits \u201caccept\u201d-type action, e.g. an \u201cOpen\u201d or \u201cSave\u201d button,\nwill have one of the following response codes:</p><ul>\n<li>\n<h1>GTK_RESPONSE_ACCEPT</h1>\n</li>\n<li>\n<h1>GTK_RESPONSE_OK</h1>\n</li>\n<li>\n<h1>GTK_RESPONSE_YES</h1>\n</li>\n<li>\n<h1>GTK_RESPONSE_APPLY</h1>\n</li>\n</ul><p>This is because <span data-xref=\"Gtk.FileChooserDialog\"/> must intercept responses\nand switch to folders if appropriate, rather than letting the\ndialog terminate &mdash; the implementation uses these known\nresponse codes to know which responses can be blocked if\nappropriate.</p><p>To summarize, make sure you use a\n[stock response code][gtkfilechooserdialog-responses]\nwhen you use <span data-xref=\"Gtk.FileChooserDialog\"/> to ensure proper operation.</p>",
    "kind": "class",
    "methods": [],
    "name": "FileChooserDialog",
    "properties": [],
    "signals": [],
    "vfuncs": []
}