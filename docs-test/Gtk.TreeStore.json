{
    "constructors": [
        {
            "doc": "<p>Creates a new tree store as with <code>n_columns</code> columns each of the types passed\nin.  Note that only types derived from standard GObject fundamental types\nare supported.</p><p>As an example, <code>gtk_tree_store_new (3, G_TYPE_INT, G_TYPE_STRING,\nGDK_TYPE_PIXBUF);</code> will create a new <span data-xref=\"Gtk.TreeStore\"/> with three columns, of type</p>\n<h1>gint, #gchararray, and <span data-xref=\"GdkPixbuf.Pixbuf\">GdkPixbuf.Pixbuf</span> respectively.</h1>",
            "kind": "constructor",
            "name": "new",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "n_columns",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "...",
                    "direction": "in",
                    "type": "<varargs>"
                }
            ],
            "retval": {
                "type": "Gtk.TreeStore"
            }
        },
        {
            "doc": "<p>Non vararg creation function.  Used primarily by language bindings.</p>",
            "kind": "constructor",
            "name": "newv",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "n_columns",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "types",
                    "direction": "in",
                    "type": "Array(GObject.Type)"
                }
            ],
            "retval": {
                "type": "Gtk.TreeStore"
            }
        }
    ],
    "doc": "<p>The <span data-xref=\"Gtk.TreeStore\"/> object is a list model for use with a <span data-xref=\"Gtk.TreeView\"/>\nwidget.  It implements the <span data-xref=\"Gtk.TreeModel\"/> interface, and consequentialy,\ncan use all of the methods available there.  It also implements the\n<span data-xref=\"Gtk.TreeSortable\"/> interface so it can be sorted by the view.  Finally,\nit also implements the tree\n[drag and drop][gtk3-GtkTreeView-drag-and-drop]\ninterfaces.</p><h1>GtkTreeStore as GtkBuildable</h1><p>The GtkTreeStore implementation of the <span data-xref=\"Gtk.Buildable\"/> interface allows\nto specify the model columns with a &lt;columns&gt; element that may contain\nmultiple &lt;column&gt; elements, each specifying one model column. The \u201ctype\u201d\nattribute specifies the data type for the column.</p><p>An example of a UI Definition fragment for a tree store:\n|[\n&lt;object class=\"GtkTreeStore\"&gt;\n  &lt;columns&gt;\n    &lt;column type=\"gchararray\"/&gt;\n    &lt;column type=\"gchararray\"/&gt;\n    &lt;column type=\"gint\"/&gt;\n  &lt;/columns&gt;\n&lt;/object&gt;\n]|</p>",
    "fields": [
        {
            "doc": "",
            "kind": "field",
            "name": "parent"
        },
        {
            "doc": "",
            "kind": "field",
            "name": "priv"
        }
    ],
    "kind": "class",
    "methods": [
        {
            "doc": "<p>Appends a new row to <code>tree_store</code>.  If <code>parent</code> is non-<code>null</code>, then it will append the\nnew row after the last child of <code>parent</code>, otherwise it will append a row to\nthe top level.  <code>iter</code> will be changed to point to this new row.  The row will\nbe empty after this function is called.  To fill in values, you need to call\n<span data-xref=\"Gtk.TreeStore.set\"/> or <span data-xref=\"Gtk.TreeStore.set_value\"/>.</p>",
            "kind": "method",
            "name": "append",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "out",
                    "type": "Gtk.TreeIter"
                },
                {
                    "allow_none": true,
                    "argname": "parent",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Removes all rows from <code>tree_store</code></p>",
            "kind": "method",
            "name": "clear",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Creates a new row at <code>position</code>.  If parent is non-<code>null</code>, then the row will be\nmade a child of <code>parent</code>.  Otherwise, the row will be created at the toplevel.\nIf <code>position</code> is -1 or is larger than the number of rows at that level, then\nthe new row will be inserted to the end of the list.  <code>iter</code> will be changed\nto point to this new row.  The row will be empty after this function is\ncalled.  To fill in values, you need to call <span data-xref=\"Gtk.TreeStore.set\"/> or\n<span data-xref=\"Gtk.TreeStore.set_value\"/>.</p>",
            "kind": "method",
            "name": "insert",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "out",
                    "type": "Gtk.TreeIter"
                },
                {
                    "allow_none": true,
                    "argname": "parent",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                },
                {
                    "allow_none": false,
                    "argname": "position",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Inserts a new row after <code>sibling</code>.  If <code>sibling</code> is <code>null</code>, then the row will be\nprepended to <code>parent</code> \u2019s children.  If <code>parent</code> and <code>sibling</code> are <code>null</code>, then\nthe row will be prepended to the toplevel.  If both <code>sibling</code> and <code>parent</code> are\nset, then <code>parent</code> must be the parent of <code>sibling</code>.  When <code>sibling</code> is set,\n<code>parent</code> is optional.</p><p><code>iter</code> will be changed to point to this new row.  The row will be empty after\nthis function is called.  To fill in values, you need to call\n<span data-xref=\"Gtk.TreeStore.set\"/> or <span data-xref=\"Gtk.TreeStore.set_value\"/>.</p>",
            "kind": "method",
            "name": "insert_after",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "out",
                    "type": "Gtk.TreeIter"
                },
                {
                    "allow_none": true,
                    "argname": "parent",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                },
                {
                    "allow_none": true,
                    "argname": "sibling",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Inserts a new row before <code>sibling</code>.  If <code>sibling</code> is <code>null</code>, then the row will\nbe appended to <code>parent</code> \u2019s children.  If <code>parent</code> and <code>sibling</code> are <code>null</code>, then\nthe row will be appended to the toplevel.  If both <code>sibling</code> and <code>parent</code> are\nset, then <code>parent</code> must be the parent of <code>sibling</code>.  When <code>sibling</code> is set,\n<code>parent</code> is optional.</p><p><code>iter</code> will be changed to point to this new row.  The row will be empty after\nthis function is called.  To fill in values, you need to call\n<span data-xref=\"Gtk.TreeStore.set\"/> or <span data-xref=\"Gtk.TreeStore.set_value\"/>.</p>",
            "kind": "method",
            "name": "insert_before",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "out",
                    "type": "Gtk.TreeIter"
                },
                {
                    "allow_none": true,
                    "argname": "parent",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                },
                {
                    "allow_none": true,
                    "argname": "sibling",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Creates a new row at <code>position</code>. <code>iter</code> will be changed to point to this\nnew row. If <code>position</code> is -1, or larger than the number of rows on the list, then\nthe new row will be appended to the list. The row will be filled with\nthe values given to this function.</p><p>Calling\n<code>gtk_tree_store_insert_with_values (tree_store, iter, position, ...)</code>\nhas the same effect as calling\n|[&lt;!-- language=\"C\" --&gt;\ngtk_tree_store_insert (tree_store, iter, position);\ngtk_tree_store_set (tree_store, iter, ...);\n]|\nwith the different that the former will only emit a row_inserted signal,\nwhile the latter will emit row_inserted, row_changed and if the tree store\nis sorted, rows_reordered.  Since emitting the rows_reordered signal\nrepeatedly can affect the performance of the program,\n<span data-xref=\"Gtk.TreeStore.insert_with_values\"/> should generally be preferred when\ninserting rows in a sorted tree store.</p>",
            "kind": "method",
            "name": "insert_with_values",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "iter",
                    "direction": "out",
                    "type": "Gtk.TreeIter"
                },
                {
                    "allow_none": true,
                    "argname": "parent",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                },
                {
                    "allow_none": false,
                    "argname": "position",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "...",
                    "direction": "in",
                    "type": "<varargs>"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>A variant of <span data-xref=\"Gtk.TreeStore.insert_with_values\"/> which takes\nthe columns and values as two arrays, instead of varargs.  This\nfunction is mainly intended for language bindings.</p>",
            "kind": "method",
            "name": "insert_with_valuesv",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "iter",
                    "direction": "out",
                    "type": "Gtk.TreeIter"
                },
                {
                    "allow_none": true,
                    "argname": "parent",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                },
                {
                    "allow_none": false,
                    "argname": "position",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "columns",
                    "direction": "in",
                    "type": "Array(Number(gint))"
                },
                {
                    "allow_none": false,
                    "argname": "values",
                    "direction": "in",
                    "type": "Array(Any)"
                },
                {
                    "allow_none": false,
                    "argname": "n_values",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Returns <code>true</code> if <code>iter</code> is an ancestor of <code>descendant</code>.  That is, <code>iter</code> is the\nparent (or grandparent or great-grandparent) of <code>descendant</code>.</p>",
            "kind": "method",
            "name": "is_ancestor",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                },
                {
                    "allow_none": false,
                    "argname": "descendant",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Returns the depth of <code>iter</code>.  This will be 0 for anything on the root level, 1\nfor anything down a level, etc.</p>",
            "kind": "method",
            "name": "iter_depth",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                }
            ],
            "retval": {
                "type": "Number(gint)"
            }
        },
        {
            "doc": "<p>WARNING: This function is slow. Only use it for debugging and/or testing\npurposes.</p><p>Checks if the given iter is a valid iter for this <span data-xref=\"Gtk.TreeStore\"/>.</p>",
            "kind": "method",
            "name": "iter_is_valid",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Moves <code>iter</code> in <code>tree_store</code> to the position after <code>position</code>. <code>iter</code> and\n<code>position</code> should be in the same level. Note that this function only\nworks with unsorted stores. If <code>position</code> is <code>null</code>, <code>iter</code> will be moved\nto the start of the level.</p>",
            "kind": "method",
            "name": "move_after",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                },
                {
                    "allow_none": true,
                    "argname": "position",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Moves <code>iter</code> in <code>tree_store</code> to the position before <code>position</code>. <code>iter</code> and\n<code>position</code> should be in the same level. Note that this function only\nworks with unsorted stores. If <code>position</code> is <code>null</code>, <code>iter</code> will be\nmoved to the end of the level.</p>",
            "kind": "method",
            "name": "move_before",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                },
                {
                    "allow_none": true,
                    "argname": "position",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Prepends a new row to <code>tree_store</code>.  If <code>parent</code> is non-<code>null</code>, then it will prepend\nthe new row before the first child of <code>parent</code>, otherwise it will prepend a row\nto the top level.  <code>iter</code> will be changed to point to this new row.  The row\nwill be empty after this function is called.  To fill in values, you need to\ncall <span data-xref=\"Gtk.TreeStore.set\"/> or <span data-xref=\"Gtk.TreeStore.set_value\"/>.</p>",
            "kind": "method",
            "name": "prepend",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "out",
                    "type": "Gtk.TreeIter"
                },
                {
                    "allow_none": true,
                    "argname": "parent",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Removes <code>iter</code> from <code>tree_store</code>.  After being removed, <code>iter</code> is set to the\nnext valid row at that level, or invalidated if it previously pointed to the\nlast one.</p>",
            "kind": "method",
            "name": "remove",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Reorders the children of <code>parent</code> in <code>tree_store</code> to follow the order\nindicated by <code>new_order</code>. Note that this function only works with\nunsorted stores.</p>",
            "kind": "method",
            "name": "reorder",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "parent",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                },
                {
                    "allow_none": false,
                    "argname": "new_order",
                    "direction": "in",
                    "type": "Array(Number(gint))"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the value of one or more cells in the row referenced by <code>iter</code>.\nThe variable argument list should contain integer column numbers,\neach column number followed by the value to be set.\nThe list is terminated by a -1. For example, to set column 0 with type\n%G_TYPE_STRING to \u201cFoo\u201d, you would write\n<code>gtk_tree_store_set (store, iter, 0, \"Foo\", -1)</code>.</p><p>The value will be referenced by the store if it is a %G_TYPE_OBJECT, and it\nwill be copied if it is a %G_TYPE_STRING or %G_TYPE_BOXED.</p>",
            "kind": "method",
            "name": "set",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                },
                {
                    "allow_none": false,
                    "argname": "...",
                    "direction": "in",
                    "type": "<varargs>"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>This function is meant primarily for #GObjects that inherit from\n<span data-xref=\"Gtk.TreeStore\"/>, and should only be used when constructing a new\n<span data-xref=\"Gtk.TreeStore\"/>.  It will not function after a row has been added,\nor a method on the <span data-xref=\"Gtk.TreeModel\"/> interface is called.</p>",
            "kind": "method",
            "name": "set_column_types",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "n_columns",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "types",
                    "direction": "in",
                    "type": "Array(GObject.Type)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>See <span data-xref=\"Gtk.TreeStore.set\"/>; this version takes a va_list for\nuse by language bindings.</p>",
            "kind": "method",
            "name": "set_valist",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                },
                {
                    "allow_none": false,
                    "argname": "var_args",
                    "direction": "in",
                    "type": "va_list"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the data in the cell specified by <code>iter</code> and <code>column</code>.\nThe type of <code>value</code> must be convertible to the type of the\ncolumn.</p>",
            "kind": "method",
            "name": "set_value",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                },
                {
                    "allow_none": false,
                    "argname": "column",
                    "direction": "in",
                    "type": "Number(gint)"
                },
                {
                    "allow_none": false,
                    "argname": "value",
                    "direction": "in",
                    "type": "Any"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>A variant of <span data-xref=\"Gtk.TreeStore.set_valist\"/> which takes\nthe columns and values as two arrays, instead of varargs.  This\nfunction is mainly intended for language bindings or in case\nthe number of columns to change is not known until run-time.</p>",
            "kind": "method",
            "name": "set_valuesv",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                },
                {
                    "allow_none": false,
                    "argname": "columns",
                    "direction": "in",
                    "type": "Array(Number(gint))"
                },
                {
                    "allow_none": false,
                    "argname": "values",
                    "direction": "in",
                    "type": "Array(Any)"
                },
                {
                    "allow_none": false,
                    "argname": "n_values",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Swaps <code>a</code> and <code>b</code> in the same level of <code>tree_store</code>. Note that this function\nonly works with unsorted stores.</p>",
            "kind": "method",
            "name": "swap",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "a",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                },
                {
                    "allow_none": false,
                    "argname": "b",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        []
    ],
    "name": "TreeStore",
    "properties": [],
    "signals": [],
    "vfuncs": []
}