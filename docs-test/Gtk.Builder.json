{
    "constructors": [
        {
            "doc": "<p>Creates a new empty builder object.</p><p>This function is only useful if you intend to make multiple calls to\n<span data-xref=\"Gtk.Builder.add_from_file\"/>, <span data-xref=\"Gtk.Builder.add_from_resource\"/> or\n<span data-xref=\"Gtk.Builder.add_from_string\"/> in order to merge multiple UI\ndescriptions into a single builder.</p><p>Most users will probably want to use <span data-xref=\"Gtk.Builder.new_from_file\"/>,\n<span data-xref=\"Gtk.Builder.new_from_resource\"/> or <span data-xref=\"Gtk.Builder.new_from_string\"/>.</p>",
            "kind": "constructor",
            "name": "new",
            "parameters": [],
            "retval": {
                "type": "Gtk.Builder"
            }
        },
        {
            "doc": "<p>Builds the [GtkBuilder UI definition][BUILDER-UI]\nin the file <pre>filename</pre>.</p><p>If there is an error opening the file or parsing the description then\nthe program will be aborted.  You should only ever attempt to parse\nuser interface descriptions that are shipped as part of your program.</p>",
            "kind": "constructor",
            "name": "new_from_file",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "filename",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "Gtk.Builder"
            }
        },
        {
            "doc": "<p>Builds the [GtkBuilder UI definition][BUILDER-UI]\nat <pre>resource_path</pre>.</p><p>If there is an error locating the resurce or parsing the description\nthen the program will be aborted.</p>",
            "kind": "constructor",
            "name": "new_from_resource",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "resource_path",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "Gtk.Builder"
            }
        },
        {
            "doc": "<p>Builds the user interface described by <pre>string</pre> (in the\n[GtkBuilder UI definition][BUILDER-UI] format).</p><p>If <pre>string</pre> is <pre>null</pre>-terminated then <pre>length</pre> should be -1.  If <pre>length</pre>\nis not -1 then it is the length of <pre>string</pre>.</p><p>If there is an error parsing <pre>string</pre> then the program will be\naborted.  You should not attempt to parse user interface description\nfrom untrusted sources.</p>",
            "kind": "constructor",
            "name": "new_from_string",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "string",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "length",
                    "direction": "in",
                    "type": "Number(gssize)"
                }
            ],
            "retval": {
                "type": "Gtk.Builder"
            }
        }
    ],
    "doc": "<p>A GtkBuilder is an auxiliary object that reads textual descriptions\nof a user interface and instantiates the described objects. To create\na GtkBuilder from a user interface description, call\n<span data-xref=\"Gtk.Builder.new_from_file\"/>, <span data-xref=\"Gtk.Builder.new_from_resource\"/> or\n<span data-xref=\"Gtk.Builder.new_from_string\"/>.</p><p>In the (unusual) case that you want to add user interface\ndescriptions from multiple sources to the same GtkBuilder you can\ncall <span data-xref=\"Gtk.Builder.new\"/> to get an empty builder and populate it by\n(multiple) calls to <span data-xref=\"Gtk.Builder.add_from_file\"/>,\n<span data-xref=\"Gtk.Builder.add_from_resource\"/> or <span data-xref=\"Gtk.Builder.add_from_string\"/>.</p><p>A GtkBuilder holds a reference to all objects that it has constructed\nand drops these references when it is finalized. This finalization can\ncause the destruction of non-widget objects or widgets which are not\ncontained in a toplevel window. For toplevel windows constructed by a\nbuilder, it is the responsibility of the user to call <span data-xref=\"Gtk.Widget.destroy\"/>\nto get rid of them and all the widgets they contain.</p><p>The functions <span data-xref=\"Gtk.Builder.get_object\"/> and <span data-xref=\"Gtk.Builder.get_objects\"/>\ncan be used to access the widgets in the interface by the names assigned\nto them inside the UI description. Toplevel windows returned by these\nfunctions will stay around until the user explicitly destroys them\nwith <span data-xref=\"Gtk.Widget.destroy\"/>. Other widgets will either be part of a\nlarger hierarchy constructed by the builder (in which case you should\nnot have to worry about their lifecycle), or without a parent, in which\ncase they have to be added to some container to make use of them.\nNon-widget objects need to be reffed with <span data-xref=\"GObject.Object.ref\">GObject.Object.prototype.ref</span> to keep them\nbeyond the lifespan of the builder.</p><p>The function <span data-xref=\"Gtk.Builder.connect_signals\"/> and variants thereof can be\nused to connect handlers to the named signals in the description.</p><h1>GtkBuilder UI Definitions # {#BUILDER-UI}</h1><p>GtkBuilder parses textual descriptions of user interfaces which are\nspecified in an XML format which can be roughly described by the\nRELAX NG schema below. We refer to these descriptions as\n\u201cGtkBuilder UI definitions\u201d or just\n\u201cUI definitions\u201d if the context is clear.\nDo not confuse GtkBuilder UI Definitions with\n[GtkUIManager UI Definitions][XML-UI], which\nare more limited in scope. It is common to use <code>.ui</code>\nas the filename extension for files containing GtkBuilder UI\ndefinitions.</p><p><a href=\"https://git.gnome.org/browse/gtk+/tree/gtk/gtkbuilder.rnc\">RELAX NG Compact Syntax</a></p><p>The toplevel element is <interface>. It optionally takes a \u201cdomain\u201d\nattribute, which will make the builder look for translated strings\nusing dgettext() in the domain specified. This can also be done by\ncalling <span data-xref=\"Gtk.Builder.set_translation_domain\"/> on the builder.\nObjects are described by <object> elements, which can contain\n<property> elements to set properties, <signal> elements which\nconnect signals to handlers, and <child> elements, which describe\nchild objects (most often widgets inside a container, but also e.g.\nactions in an action group, or columns in a tree model). A <child>\nelement contains an <object> element which describes the child object.\nThe target toolkit version(s) are described by <requires> elements,\nthe \u201clib\u201d attribute specifies the widget library in question (currently\nthe only supported value is \u201cgtk+\u201d) and the \u201cversion\u201d attribute specifies\nthe target version in the form \u201c<major>.<minor>\u201d. The builder will error\nout if the version requirements are not met.</p><p>Typically, the specific kind of object represented by an <object>\nelement is specified by the \u201cclass\u201d attribute. If the type has not\nbeen loaded yet, GTK+ tries to find the get_type() function from the\nclass name by applying heuristics. This works in most cases, but if\nnecessary, it is possible to specify the name of the get_type() function\nexplictly with the \"type-func\" attribute. As a special case, GtkBuilder\nallows to use an object that has been constructed by a <span data-xref=\"Gtk.UIManager\"/> in\nanother part of the UI definition by specifying the id of the <span data-xref=\"Gtk.UIManager\"/>\nin the \u201cconstructor\u201d attribute and the name of the object in the \u201cid\u201d\nattribute.</p><p>Objects may be given a name with the \u201cid\u201d attribute, which allows the\napplication to retrieve them from the builder with <span data-xref=\"Gtk.Builder.get_object\"/>.\nAn id is also necessary to use the object as property value in other\nparts of the UI definition. GTK+ reserves ids starting and ending\nwith ___ (3 underscores) for its own purposes.</p><p>Setting properties of objects is pretty straightforward with the\n<property> element: the \u201cname\u201d attribute specifies the name of the\nproperty, and the content of the element specifies the value.\nIf the \u201ctranslatable\u201d attribute is set to a true value, GTK+ uses\ngettext() (or dgettext() if the builder has a translation domain set)\nto find a translation for the value. This happens before the value\nis parsed, so it can be used for properties of any type, but it is\nprobably most useful for string properties. It is also possible to\nspecify a context to disambiguate short strings, and comments which\nmay help the translators.</p><p>GtkBuilder can parse textual representations for the most common\nproperty types: characters, strings, integers, floating-point numbers,\nbooleans (strings like \u201cTRUE\u201d, \u201ct\u201d, \u201cyes\u201d, \u201cy\u201d, \u201c1\u201d are interpreted\nas <pre>true</pre>, strings like \u201cFALSE\u201d, \u201cf\u201d, \u201cno\u201d, \u201cn\u201d, \u201c0\u201d are interpreted\nas <pre>false</pre>), enumerations (can be specified by their name, nick or\ninteger value), flags (can be specified by their name, nick, integer\nvalue, optionally combined with \u201c|\u201d, e.g. \u201cGTK_VISIBLE|GTK_REALIZED\u201d)\nand colors (in a format understood by <span data-xref=\"Gdk.color_parse\">Gdk.color_parse</span>). Pixbufs can\nbe specified as a filename of an image file to load. Objects can be\nreferred to by their name and by default refer to objects declared\nin the local xml fragment and objects exposed via\n<span data-xref=\"Gtk.Builder.expose_object\"/>.</p><p>In general, GtkBuilder allows forward references to objects --\ndeclared in the local xml; an object doesn\u2019t have to be constructed\nbefore it can be referred to. The exception to this rule is that an\nobject has to be constructed before it can be used as the value of\na construct-only property.</p><p>It is also possible to bind a property value to another object's\nproperty value using the attributes\n\"bind-source\" to specify the source object of the binding,\n\"bind-property\" to specify the source property and optionally\n\"bind-flags\" to specify the binding flags\nInternally builder implement this using GBinding objects.\nFor more information see <span data-xref=\"GObject.Object.bind_property\">GObject.Object.prototype.bind_property</span></p><p>Signal handlers are set up with the <signal> element. The \u201cname\u201d\nattribute specifies the name of the signal, and the \u201chandler\u201d attribute\nspecifies the function to connect to the signal. By default, GTK+ tries\nto find the handler using <span data-xref=\"GModule.Module.symbol\">GModule.Module.prototype.symbol</span>, but this can be changed by\npassing a custom <span data-xref=\"Gtk.BuilderConnectFunc\"/> to\n<span data-xref=\"Gtk.Builder.connect_signals_full\"/>. The remaining attributes, \u201cafter\u201d,\n\u201cswapped\u201d and \u201cobject\u201d, have the same meaning as the corresponding\nparameters of the <span data-xref=\"GObject.signal_connect_object\">GObject.signal_connect_object</span> or\n<span data-xref=\"GObject.signal_connect_data\">GObject.signal_connect_data</span> functions. A \u201clast_modification_time\u201d\nattribute is also allowed, but it does not have a meaning to the\nbuilder.</p><p>Sometimes it is necessary to refer to widgets which have implicitly\nbeen constructed by GTK+ as part of a composite widget, to set\nproperties on them or to add further children (e.g. the @vbox of\na <span data-xref=\"Gtk.Dialog\"/>). This can be achieved by setting the \u201cinternal-child\u201d\npropery of the <child> element to a true value. Note that GtkBuilder\nstill requires an <object> element for the internal child, even if it\nhas already been constructed.</p><p>A number of widgets have different places where a child can be added\n(e.g. tabs vs. page content in notebooks). This can be reflected in\na UI definition by specifying the \u201ctype\u201d attribute on a <child>\nThe possible values for the \u201ctype\u201d attribute are described in the\nsections describing the widget-specific portions of UI definitions.</p><h1>A GtkBuilder UI Definition</h1><p>|[\n<interface>\n  <object class=\"GtkDialog\" id=\"dialog1\">\n    <child internal-child=\"vbox\">\n      <object class=\"GtkVBox\" id=\"vbox1\">\n        <property name=\"border-width\">10</property>\n        <child internal-child=\"action_area\">\n          <object class=\"GtkHButtonBox\" id=\"hbuttonbox1\">\n            <property name=\"border-width\">20</property>\n            <child>\n              <object class=\"GtkButton\" id=\"ok_button\">\n                <property name=\"label\">gtk-ok</property>\n                <property name=\"use-stock\">TRUE</property>\n                <signal name=\"clicked\" handler=\"ok_button_clicked\"/>\n              </object>\n            </child>\n          </object>\n        </child>\n      </object>\n    </child>\n  </object>\n</interface>\n]|</p><p>Beyond this general structure, several object classes define their\nown XML DTD fragments for filling in the ANY placeholders in the DTD\nabove. Note that a custom element in a <child> element gets parsed by\nthe custom tag handler of the parent object, while a custom element in\nan <object> element gets parsed by the custom tag handler of the object.</p><p>These XML fragments are explained in the documentation of the\nrespective objects.</p><p>Additionally, since 3.10 a special <template> tag has been added\nto the format allowing one to define a widget class\u2019s components.</p>",
    "kind": "class",
    "methods": [
        {
            "doc": "<p>Adds the <pre>callback_symbol</pre> to the scope of <pre>builder</pre> under the given <pre>callback_name</pre>.</p><p>Using this function overrides the behavior of <span data-xref=\"Gtk.Builder.connect_signals\"/>\nfor any callback symbols that are added. Using this method allows for better\nencapsulation as it does not require that callback symbols be declared in\nthe global namespace.</p>",
            "kind": "method",
            "name": "add_callback_symbol",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "callback_name",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "callback_symbol",
                    "direction": "in",
                    "type": "GObject.Callback"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>A convenience function to add many callbacks instead of calling\n<span data-xref=\"Gtk.Builder.add_callback_symbol\"/> for each symbol.</p>",
            "kind": "method",
            "name": "add_callback_symbols",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "first_callback_name",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "first_callback_symbol",
                    "direction": "in",
                    "type": "GObject.Callback"
                },
                {
                    "allow_none": false,
                    "argname": "...",
                    "direction": "in",
                    "type": "<varargs>"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Parses a file containing a [GtkBuilder UI definition][BUILDER-UI]\nand merges it with the current contents of <pre>builder</pre>.</p><p>Most users will probably want to use <span data-xref=\"Gtk.Builder.new_from_file\"/>.</p><p>Upon errors 0 will be returned and @error will be assigned a\n<span data-xref=\"GLib.Error\">GLib.Error</span> from the #GTK_BUILDER_ERROR, #G_MARKUP_ERROR or #G_FILE_ERROR\ndomain.</p><p>It\u2019s not really reasonable to attempt to handle failures of this\ncall.  You should not use this function with untrusted files (ie:\nfiles that are not part of your application).  Broken <span data-xref=\"Gtk.Builder\"/>\nfiles can easily crash your program, and it\u2019s possible that memory\nwas leaked leading up to the reported failure.  The only reasonable\nthing to do when an error is detected is to call g_error().</p>",
            "kind": "method",
            "name": "add_from_file",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "filename",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "Number(guint)"
            }
        },
        {
            "doc": "<p>Parses a resource file containing a [GtkBuilder UI definition][BUILDER-UI]\nand merges it with the current contents of <pre>builder</pre>.</p><p>Most users will probably want to use <span data-xref=\"Gtk.Builder.new_from_resource\"/>.</p><p>Upon errors 0 will be returned and @error will be assigned a\n<span data-xref=\"GLib.Error\">GLib.Error</span> from the #GTK_BUILDER_ERROR, #G_MARKUP_ERROR or #G_RESOURCE_ERROR\ndomain.</p><p>It\u2019s not really reasonable to attempt to handle failures of this\ncall.  The only reasonable thing to do when an error is detected is\nto call g_error().</p>",
            "kind": "method",
            "name": "add_from_resource",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "resource_path",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "Number(guint)"
            }
        },
        {
            "doc": "<p>Parses a string containing a [GtkBuilder UI definition][BUILDER-UI]\nand merges it with the current contents of <pre>builder</pre>.</p><p>Most users will probably want to use <span data-xref=\"Gtk.Builder.new_from_string\"/>.</p><p>Upon errors 0 will be returned and @error will be assigned a\n<span data-xref=\"GLib.Error\">GLib.Error</span> from the #GTK_BUILDER_ERROR or #G_MARKUP_ERROR domain.</p><p>It\u2019s not really reasonable to attempt to handle failures of this\ncall.  The only reasonable thing to do when an error is detected is\nto call g_error().</p>",
            "kind": "method",
            "name": "add_from_string",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "buffer",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "length",
                    "direction": "in",
                    "type": "Number(gsize)"
                }
            ],
            "retval": {
                "type": "Number(guint)"
            }
        },
        {
            "doc": "<p>Parses a file containing a [GtkBuilder UI definition][BUILDER-UI]\nbuilding only the requested objects and merges\nthem with the current contents of <pre>builder</pre>.</p><p>Upon errors 0 will be returned and @error will be assigned a\n<span data-xref=\"GLib.Error\">GLib.Error</span> from the #GTK_BUILDER_ERROR, #G_MARKUP_ERROR or #G_FILE_ERROR\ndomain.</p><p>If you are adding an object that depends on an object that is not\nits child (for instance a <span data-xref=\"Gtk.TreeView\"/> that depends on its\n<span data-xref=\"Gtk.TreeModel\"/>), you have to explicitly list all of them in <pre>object_ids</pre>.</p>",
            "kind": "method",
            "name": "add_objects_from_file",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "filename",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "object_ids",
                    "direction": "in",
                    "type": "Array(String)"
                }
            ],
            "retval": {
                "type": "Number(guint)"
            }
        },
        {
            "doc": "<p>Parses a resource file containing a [GtkBuilder UI definition][BUILDER-UI]\nbuilding only the requested objects and merges\nthem with the current contents of <pre>builder</pre>.</p><p>Upon errors 0 will be returned and @error will be assigned a\n<span data-xref=\"GLib.Error\">GLib.Error</span> from the #GTK_BUILDER_ERROR, #G_MARKUP_ERROR or #G_RESOURCE_ERROR\ndomain.</p><p>If you are adding an object that depends on an object that is not\nits child (for instance a <span data-xref=\"Gtk.TreeView\"/> that depends on its\n<span data-xref=\"Gtk.TreeModel\"/>), you have to explicitly list all of them in <pre>object_ids</pre>.</p>",
            "kind": "method",
            "name": "add_objects_from_resource",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "resource_path",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "object_ids",
                    "direction": "in",
                    "type": "Array(String)"
                }
            ],
            "retval": {
                "type": "Number(guint)"
            }
        },
        {
            "doc": "<p>Parses a string containing a [GtkBuilder UI definition][BUILDER-UI]\nbuilding only the requested objects and merges\nthem with the current contents of <pre>builder</pre>.</p><p>Upon errors 0 will be returned and @error will be assigned a\n<span data-xref=\"GLib.Error\">GLib.Error</span> from the #GTK_BUILDER_ERROR or #G_MARKUP_ERROR domain.</p><p>If you are adding an object that depends on an object that is not\nits child (for instance a <span data-xref=\"Gtk.TreeView\"/> that depends on its\n<span data-xref=\"Gtk.TreeModel\"/>), you have to explicitly list all of them in <pre>object_ids</pre>.</p>",
            "kind": "method",
            "name": "add_objects_from_string",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "buffer",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "length",
                    "direction": "in",
                    "type": "Number(gsize)"
                },
                {
                    "allow_none": false,
                    "argname": "object_ids",
                    "direction": "in",
                    "type": "Array(String)"
                }
            ],
            "retval": {
                "type": "Number(guint)"
            }
        },
        {
            "doc": "<p>This method is a simpler variation of <span data-xref=\"Gtk.Builder.connect_signals_full\"/>.\nIt uses symbols explicitly added to <pre>builder</pre> with prior calls to\n<span data-xref=\"Gtk.Builder.add_callback_symbol\"/>. In the case that symbols are not\nexplicitly added; it uses <span data-xref=\"GModule.Module\">GModule.Module</span>\u2019s introspective features (by opening the module <pre>null</pre>)\nto look at the application\u2019s symbol table. From here it tries to match\nthe signal handler names given in the interface description with\nsymbols in the application and connects the signals. Note that this\nfunction can only be called once, subsequent calls will do nothing.</p><p>Note that unless <span data-xref=\"Gtk.Builder.add_callback_symbol\"/> is called for\nall signal callbacks which are referenced by the loaded XML, this\nfunction will require that <span data-xref=\"GModule.Module\">GModule.Module</span> be supported on the platform.</p><p>If you rely on <span data-xref=\"GModule.Module\">GModule.Module</span> support to lookup callbacks in the symbol table,\nthe following details should be noted:</p><p>When compiling applications for Windows, you must declare signal callbacks\nwith #G_MODULE_EXPORT, or they will not be put in the symbol table.\nOn Linux and Unices, this is not necessary; applications should instead\nbe compiled with the -Wl,--export-dynamic CFLAGS, and linked against\ngmodule-export-2.0.</p>",
            "kind": "method",
            "name": "connect_signals",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "user_data",
                    "direction": "in",
                    "type": "void"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>This function can be thought of the interpreted language binding\nversion of <span data-xref=\"Gtk.Builder.connect_signals\"/>, except that it does not\nrequire GModule to function correctly.</p>",
            "kind": "method",
            "name": "connect_signals_full",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "func",
                    "direction": "in",
                    "type": "Gtk.BuilderConnectFunc"
                },
                {
                    "allow_none": false,
                    "argname": "user_data",
                    "direction": "in",
                    "type": "void"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Add <pre>object</pre> to the <pre>builder</pre> object pool so it can be referenced just like any\nother object built by builder.</p>",
            "kind": "method",
            "name": "expose_object",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "name",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "object",
                    "direction": "in",
                    "type": "GObject.Object"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Gets the <span data-xref=\"Gtk.Application\"/> associated with the builder.</p><p>The <span data-xref=\"Gtk.Application\"/> is used for creating action proxies as requested\nfrom XML that the builder is loading.</p><p>By default, the builder uses the default application: the one from\n<span data-xref=\"Gio.Application.get_default\">Gio.Application.get_default</span>.  If you want to use another application\nfor constructing proxies, use <span data-xref=\"Gtk.Builder.set_application\"/>.</p>",
            "kind": "method",
            "name": "get_application",
            "parameters": [],
            "retval": {
                "type": "Gtk.Application"
            }
        },
        {
            "doc": "<p>Gets the object named <pre>name</pre>. Note that this function does not\nincrement the reference count of the returned object.</p>",
            "kind": "method",
            "name": "get_object",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "name",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "GObject.Object"
            }
        },
        {
            "doc": "<p>Gets all objects that have been constructed by <pre>builder</pre>. Note that\nthis function does not increment the reference counts of the returned\nobjects.</p>",
            "kind": "method",
            "name": "get_objects",
            "parameters": [],
            "retval": {
                "type": "Array(GObject.Object)"
            }
        },
        {
            "doc": "<p>Gets the translation domain of <pre>builder</pre>.</p>",
            "kind": "method",
            "name": "get_translation_domain",
            "parameters": [],
            "retval": {
                "type": "String"
            }
        },
        {
            "doc": "<p>Looks up a type by name, using the virtual function that\n<span data-xref=\"Gtk.Builder\"/> has for that purpose. This is mainly used when\nimplementing the <span data-xref=\"Gtk.Buildable\"/> interface on a type.</p>",
            "kind": "method",
            "name": "get_type_from_name",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "type_name",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "GObject.Type"
            }
        },
        {
            "doc": "<p>Fetches a symbol previously added to <pre>builder</pre>\nwith <span data-xref=\"Gtk.Builder.add_callback_symbols\"/></p><p>This function is intended for possible use in language bindings\nor for any case that one might be cusomizing signal connections\nusing <span data-xref=\"Gtk.Builder.connect_signals_full\"/></p>",
            "kind": "method",
            "name": "lookup_callback_symbol",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "callback_name",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "GObject.Callback"
            }
        },
        {
            "doc": "<p>Sets the application associated with <pre>builder</pre>.</p><p>You only need this function if there is more than one <span data-xref=\"Gio.Application\">Gio.Application</span>\nin your process.  <pre>application</pre> cannot be <pre>null</pre>.</p>",
            "kind": "method",
            "name": "set_application",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "application",
                    "direction": "in",
                    "type": "Gtk.Application"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the translation domain of <pre>builder</pre>.\nSee <span data-xref=\"Gtk.Builder-translation-domain\"/>.</p>",
            "kind": "method",
            "name": "set_translation_domain",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "domain",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>This function demarshals a value from a string. This function\ncalls <span data-xref=\"GObject.Value.init\">GObject.Value.prototype.init</span> on the <pre>value</pre> argument, so it need not be\ninitialised beforehand.</p><p>This function can handle char, uchar, boolean, int, uint, long,\nulong, enum, flags, float, double, string, <span data-xref=\"Gdk.Color\">Gdk.Color</span>, <span data-xref=\"Gdk.RGBA\">Gdk.RGBA</span> and\n<span data-xref=\"Gtk.Adjustment\"/> type values. Support for <span data-xref=\"Gtk.Widget\"/> type values is\nstill to come.</p><p>Upon errors <pre>false</pre> will be returned and @error will be assigned a\n<span data-xref=\"GLib.Error\">GLib.Error</span> from the #GTK_BUILDER_ERROR domain.</p>",
            "kind": "method",
            "name": "value_from_string",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "pspec",
                    "direction": "in",
                    "type": "GObject.ParamSpec"
                },
                {
                    "allow_none": false,
                    "argname": "string",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "value",
                    "direction": "out",
                    "type": "Any"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Like <span data-xref=\"Gtk.Builder.value_from_string\"/>, this function demarshals\na value from a string, but takes a <span data-xref=\"GLib.Type\">GLib.Type</span> instead of <span data-xref=\"GObject.ParamSpec\">GObject.ParamSpec</span>.\nThis function calls <span data-xref=\"GObject.Value.init\">GObject.Value.prototype.init</span> on the <pre>value</pre> argument, so it\nneed not be initialised beforehand.</p><p>Upon errors <pre>false</pre> will be returned and @error will be assigned a\n<span data-xref=\"GLib.Error\">GLib.Error</span> from the #GTK_BUILDER_ERROR domain.</p>",
            "kind": "method",
            "name": "value_from_string_type",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "type",
                    "direction": "in",
                    "type": "GObject.Type"
                },
                {
                    "allow_none": false,
                    "argname": "string",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "value",
                    "direction": "out",
                    "type": "Any"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        }
    ],
    "name": "Builder",
    "properties": [
        {
            "doc": "<p>The translation domain used when translating property values that\nhave been marked as translatable in interface descriptions.\nIf the translation domain is <pre>null</pre>, <span data-xref=\"Gtk.Builder\"/> uses gettext(),\notherwise <span data-xref=\"GLib.dgettext\">GLib.dgettext</span>.</p>",
            "kind": "property",
            "name": "translation-domain",
            "type": "String"
        }
    ],
    "signals": [],
    "vfuncs": [
        {
            "doc": "<p>Looks up a type by name, using the virtual function that\n<span data-xref=\"Gtk.Builder\"/> has for that purpose. This is mainly used when\nimplementing the <span data-xref=\"Gtk.Buildable\"/> interface on a type.</p>",
            "kind": "vfunc",
            "name": "get_type_from_name",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "type_name",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "GObject.Type"
            }
        }
    ]
}