{
    "constructors": [
        {
            "doc": "<p>Creates a new ui manager object.</p>",
            "kind": "constructor",
            "name": "new",
            "parameters": [],
            "retval": {
                "type": "Gtk.UIManager"
            }
        }
    ],
    "doc": "<p>A <span data-xref=\"Gtk.UIManager\"/> constructs a user interface (menus and toolbars) from\none or more UI definitions, which reference actions from one or more\naction groups.</p><h1>UI Definitions # {#XML-UI}</h1><p>The UI definitions are specified in an XML format which can be\nroughly described by the following DTD.</p><p>&gt; Do not confuse the GtkUIManager UI Definitions described here with\n&gt; the similarly named [GtkBuilder UI Definitions][BUILDER-UI].</p><p>|[\n&lt;!ELEMENT ui          (menubar|toolbar|popup|accelerator)<em> &gt;\n&lt;!ELEMENT menubar     (menuitem|separator|placeholder|menu)</em> &gt;\n&lt;!ELEMENT menu        (menuitem|separator|placeholder|menu)<em> &gt;\n&lt;!ELEMENT popup       (menuitem|separator|placeholder|menu)</em> &gt;\n&lt;!ELEMENT toolbar     (toolitem|separator|placeholder)<em> &gt;\n&lt;!ELEMENT placeholder (menuitem|toolitem|separator|placeholder|menu)</em> &gt;\n&lt;!ELEMENT menuitem     EMPTY &gt;\n&lt;!ELEMENT toolitem     (menu?) &gt;\n&lt;!ELEMENT separator    EMPTY &gt;\n&lt;!ELEMENT accelerator  EMPTY &gt;\n&lt;!ATTLIST menubar      name                      #IMPLIED\n                       action                    #IMPLIED &gt;\n&lt;!ATTLIST toolbar      name                      #IMPLIED\n                       action                    #IMPLIED &gt;\n&lt;!ATTLIST popup        name                      #IMPLIED\n                       action                    #IMPLIED\n                       accelerators (true|false) #IMPLIED &gt;\n&lt;!ATTLIST placeholder  name                      #IMPLIED\n                       action                    #IMPLIED &gt;\n&lt;!ATTLIST separator    name                      #IMPLIED\n                       action                    #IMPLIED\n                       expand       (true|false) #IMPLIED &gt;\n&lt;!ATTLIST menu         name                      #IMPLIED\n                       action                    #REQUIRED\n                       position     (top|bot)    #IMPLIED &gt;\n&lt;!ATTLIST menuitem     name                      #IMPLIED\n                       action                    #REQUIRED\n                       position     (top|bot)    #IMPLIED\n                       always-show-image (true|false) #IMPLIED &gt;\n&lt;!ATTLIST toolitem     name                      #IMPLIED\n                       action                    #REQUIRED\n                       position     (top|bot)    #IMPLIED &gt;\n&lt;!ATTLIST accelerator  name                      #IMPLIED\n                       action                    #REQUIRED &gt;\n]|</p><p>There are some additional restrictions beyond those specified in the\nDTD, e.g. every toolitem must have a toolbar in its anchestry and\nevery menuitem must have a menubar or popup in its anchestry. Since\na <span data-xref=\"GLib.MarkupParser\">GLib.MarkupParser</span> is used to parse the UI description, it must not only\nbe valid XML, but valid markup.</p><p>If a name is not specified, it defaults to the action. If an action is\nnot specified either, the element name is used. The name and action\nattributes must not contain \u201c/\u201d characters after parsing (since that\nwould mess up path lookup) and must be usable as XML attributes when\nenclosed in doublequotes, thus they must not \u201c\"\u201d characters or references\nto the &amp;quot; entity.</p><h1>A UI definition</h1><p>|[\n&lt;ui&gt;\n  &lt;menubar&gt;\n    &lt;menu name=\"FileMenu\" action=\"FileMenuAction\"&gt;\n      &lt;menuitem name=\"New\" action=\"New2Action\" /&gt;\n      &lt;placeholder name=\"FileMenuAdditions\" /&gt;\n    &lt;/menu&gt;\n    &lt;menu name=\"JustifyMenu\" action=\"JustifyMenuAction\"&gt;\n      &lt;menuitem name=\"Left\" action=\"justify-left\"/&gt;\n      &lt;menuitem name=\"Centre\" action=\"justify-center\"/&gt;\n      &lt;menuitem name=\"Right\" action=\"justify-right\"/&gt;\n      &lt;menuitem name=\"Fill\" action=\"justify-fill\"/&gt;\n    &lt;/menu&gt;\n  &lt;/menubar&gt;\n  &lt;toolbar action=\"toolbar1\"&gt;\n    &lt;placeholder name=\"JustifyToolItems\"&gt;\n      &lt;separator/&gt;\n      &lt;toolitem name=\"Left\" action=\"justify-left\"/&gt;\n      &lt;toolitem name=\"Centre\" action=\"justify-center\"/&gt;\n      &lt;toolitem name=\"Right\" action=\"justify-right\"/&gt;\n      &lt;toolitem name=\"Fill\" action=\"justify-fill\"/&gt;\n      &lt;separator/&gt;\n    &lt;/placeholder&gt;\n  &lt;/toolbar&gt;\n&lt;/ui&gt;\n]|</p><p>The constructed widget hierarchy is very similar to the element tree\nof the XML, with the exception that placeholders are merged into their\nparents. The correspondence of XML elements to widgets should be\nalmost obvious:</p><ul>\n<li>menubar</li>\n</ul><p>a <span data-xref=\"Gtk.MenuBar\"/></p><ul>\n<li>toolbar</li>\n</ul><p>a <span data-xref=\"Gtk.Toolbar\"/></p><ul>\n<li>popup</li>\n</ul><p>a toplevel <span data-xref=\"Gtk.Menu\"/></p><ul>\n<li>menu</li>\n</ul><p>a <span data-xref=\"Gtk.Menu\"/> attached to a menuitem</p><ul>\n<li>menuitem</li>\n</ul><p>a <span data-xref=\"Gtk.MenuItem\"/> subclass, the exact type depends on the action</p><ul>\n<li>toolitem</li>\n</ul><p>a <span data-xref=\"Gtk.ToolItem\"/> subclass, the exact type depends on the\n   action. Note that toolitem elements may contain a menu element,\n   but only if their associated action specifies a\n   <span data-xref=\"Gtk.MenuToolButton\"/> as proxy.</p><ul>\n<li>separator</li>\n</ul><p>a <span data-xref=\"Gtk.SeparatorMenuItem\"/> or <span data-xref=\"Gtk.SeparatorToolItem\"/></p><ul>\n<li>accelerator</li>\n</ul><p>a keyboard accelerator</p><p>The \u201cposition\u201d attribute determines where a constructed widget is positioned\nwrt. to its siblings in the partially constructed tree. If it is\n\u201ctop\u201d, the widget is prepended, otherwise it is appended.</p><h1>UI Merging # {#UI-Merging}</h1><p>The most remarkable feature of <span data-xref=\"Gtk.UIManager\"/> is that it can overlay a set\nof menuitems and toolitems over another one, and demerge them later.</p><p>Merging is done based on the names of the XML elements. Each element is\nidentified by a path which consists of the names of its anchestors, separated\nby slashes. For example, the menuitem named \u201cLeft\u201d in the example above\nhas the path <code>/ui/menubar/JustifyMenu/Left</code> and the\ntoolitem with the same name has path\n<code>/ui/toolbar1/JustifyToolItems/Left</code>.</p><h1>Accelerators</h1><p>Every action has an accelerator path. Accelerators are installed together\nwith menuitem proxies, but they can also be explicitly added with\n&lt;accelerator&gt; elements in the UI definition. This makes it possible to\nhave accelerators for actions even if they have no visible proxies.</p><h1>Smart Separators # {#Smart-Separators}</h1><p>The separators created by <span data-xref=\"Gtk.UIManager\"/> are \u201csmart\u201d, i.e. they do not show up\nin the UI unless they end up between two visible menu or tool items. Separators\nwhich are located at the very beginning or end of the menu or toolbar\ncontaining them, or multiple separators next to each other, are hidden. This\nis a useful feature, since the merging of UI elements from multiple sources\ncan make it hard or impossible to determine in advance whether a separator\nwill end up in such an unfortunate position.</p><p>For separators in toolbars, you can set <code>expand=\"true\"</code> to\nturn them from a small, visible separator to an expanding, invisible one.\nToolitems following an expanding separator are effectively right-aligned.</p><h1>Empty Menus</h1><p>Submenus pose similar problems to separators inconnection with merging. It is\nimpossible to know in advance whether they will end up empty after merging.\n<span data-xref=\"Gtk.UIManager\"/> offers two ways to treat empty submenus:</p><ul>\n<li>make them disappear by hiding the menu item they\u2019re attached to</li>\n</ul><ul>\n<li>add an insensitive \u201cEmpty\u201d item</li>\n</ul><p>The behaviour is chosen based on the \u201chide_if_empty\u201d property of the action\nto which the submenu is associated.</p><h1>GtkUIManager as GtkBuildable # {<span data-xref=\"Gtk.UIManager\"/>-BUILDER-UI}</h1><p>The GtkUIManager implementation of the GtkBuildable interface accepts\nGtkActionGroup objects as &lt;child&gt; elements in UI definitions.</p><p>A GtkUIManager UI definition as described above can be embedded in\nan GtkUIManager &lt;object&gt; element in a GtkBuilder UI definition.</p><p>The widgets that are constructed by a GtkUIManager can be embedded in\nother parts of the constructed user interface with the help of the\n\u201cconstructor\u201d attribute. See the example below.</p><h2>An embedded GtkUIManager UI definition</h2><p>|[\n&lt;object class=\"GtkUIManager\" id=\"uiman\"&gt;\n  &lt;child&gt;\n    &lt;object class=\"GtkActionGroup\" id=\"actiongroup\"&gt;\n      &lt;child&gt;\n        &lt;object class=\"GtkAction\" id=\"file\"&gt;\n          &lt;property name=\"label\"&gt;_File&lt;/property&gt;\n        &lt;/object&gt;\n      &lt;/child&gt;\n    &lt;/object&gt;\n  &lt;/child&gt;\n  &lt;ui&gt;\n    &lt;menubar name=\"menubar1\"&gt;\n      &lt;menu action=\"file\"&gt;\n      &lt;/menu&gt;\n    &lt;/menubar&gt;\n  &lt;/ui&gt;\n&lt;/object&gt;\n&lt;object class=\"GtkWindow\" id=\"main-window\"&gt;\n  &lt;child&gt;\n    &lt;object class=\"GtkMenuBar\" id=\"menubar1\" constructor=\"uiman\"/&gt;\n  &lt;/child&gt;\n&lt;/object&gt;\n]|</p>",
    "fields": [
        {
            "doc": "",
            "kind": "field",
            "name": "parent"
        },
        {
            "doc": "",
            "kind": "field",
            "name": "private_data"
        }
    ],
    "kind": "class",
    "methods": [
        {
            "doc": "<p>Adds a UI element to the current contents of <code>manager</code>.</p><p>If <code>type</code> is <span data-xref=\"Gtk.UIManagerItemType\"/>.auto, GTK+ inserts a menuitem, toolitem or\nseparator if such an element can be inserted at the place determined by\n<code>path</code>. Otherwise <code>type</code> must indicate an element that can be inserted at\nthe place determined by <code>path</code>.</p><p>If <code>path</code> points to a menuitem or toolitem, the new element will be inserted\nbefore or after this item, depending on <code>top</code>.</p>",
            "kind": "method",
            "name": "add_ui",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "merge_id",
                    "direction": "in",
                    "type": "Number(guint)"
                },
                {
                    "allow_none": false,
                    "argname": "path",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "name",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": true,
                    "argname": "action",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "type",
                    "direction": "in",
                    "type": "Gtk.UIManagerItemType"
                },
                {
                    "allow_none": false,
                    "argname": "top",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Parses a file containing a [UI definition][XML-UI] and\nmerges it with the current contents of <code>manager</code>.</p>",
            "kind": "method",
            "name": "add_ui_from_file",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "filename",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "Number(guint)"
            }
        },
        {
            "doc": "<p>Parses a resource file containing a [UI definition][XML-UI] and\nmerges it with the current contents of <code>manager</code>.</p>",
            "kind": "method",
            "name": "add_ui_from_resource",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "resource_path",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "Number(guint)"
            }
        },
        {
            "doc": "<p>Parses a string containing a [UI definition][XML-UI] and merges it with\nthe current contents of <code>manager</code>. An enclosing &lt;ui&gt; element is added if\nit is missing.</p>",
            "kind": "method",
            "name": "add_ui_from_string",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "buffer",
                    "direction": "in",
                    "type": "String"
                },
                {
                    "allow_none": false,
                    "argname": "length",
                    "direction": "in",
                    "type": "Number(gssize)"
                }
            ],
            "retval": {
                "type": "Number(guint)"
            }
        },
        {
            "doc": "<p>Makes sure that all pending updates to the UI have been completed.</p><p>This may occasionally be necessary, since <span data-xref=\"Gtk.UIManager\"/> updates the\nUI in an idle function. A typical example where this function is\nuseful is to enforce that the menubar and toolbar have been added to\nthe main window before showing it:\n|[&lt;!-- language=\"C\" --&gt;\ngtk_container_add (GTK_CONTAINER (window), vbox);\ng_signal_connect (merge, \"add-widget\",\n                  G_CALLBACK (add_widget), vbox);\ngtk_ui_manager_add_ui_from_file (merge, \"my-menus\");\ngtk_ui_manager_add_ui_from_file (merge, \"my-toolbars\");\ngtk_ui_manager_ensure_update (merge);\ngtk_widget_show (window);\n]|</p>",
            "kind": "method",
            "name": "ensure_update",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Returns the <span data-xref=\"Gtk.AccelGroup\"/> associated with <code>manager</code>.</p>",
            "kind": "method",
            "name": "get_accel_group",
            "parameters": [],
            "retval": {
                "type": "Gtk.AccelGroup"
            }
        },
        {
            "doc": "<p>Looks up an action by following a path. See <span data-xref=\"Gtk.UIManager.get_widget\"/>\nfor more information about paths.</p>",
            "kind": "method",
            "name": "get_action",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "path",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "Gtk.Action"
            }
        },
        {
            "doc": "<p>Returns the list of action groups associated with <code>manager</code>.</p>",
            "kind": "method",
            "name": "get_action_groups",
            "parameters": [],
            "retval": {
                "type": "Array(Gtk.ActionGroup)"
            }
        },
        {
            "doc": "<p>Returns whether menus generated by this <span data-xref=\"Gtk.UIManager\"/>\nwill have tearoff menu items.</p>",
            "kind": "method",
            "name": "get_add_tearoffs",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Obtains a list of all toplevel widgets of the requested types.</p>",
            "kind": "method",
            "name": "get_toplevels",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "types",
                    "direction": "in",
                    "type": "Gtk.UIManagerItemType"
                }
            ],
            "retval": {
                "type": "Array(Gtk.Widget)"
            }
        },
        {
            "doc": "<p>Creates a [UI definition][XML-UI] of the merged UI.</p>",
            "kind": "method",
            "name": "get_ui",
            "parameters": [],
            "retval": {
                "type": "String"
            }
        },
        {
            "doc": "<p>Looks up a widget by following a path.\nThe path consists of the names specified in the XML description of the UI.\nseparated by \u201c/\u201d. Elements which don\u2019t have a name or action attribute in\nthe XML (e.g. &lt;popup&gt;) can be addressed by their XML element name\n(e.g. \"popup\"). The root element (\"/ui\") can be omitted in the path.</p><p>Note that the widget found by following a path that ends in a &lt;menu&gt;;\nelement is the menuitem to which the menu is attached, not the menu it\nmanages.</p><p>Also note that the widgets constructed by a ui manager are not tied to\nthe lifecycle of the ui manager. If you add the widgets returned by this\nfunction to some container or explicitly ref them, they will survive the\ndestruction of the ui manager.</p>",
            "kind": "method",
            "name": "get_widget",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "path",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "Gtk.Widget"
            }
        },
        {
            "doc": "<p>Inserts an action group into the list of action groups associated\nwith <code>manager</code>. Actions in earlier groups hide actions with the same\nname in later groups.</p><p>If <code>pos</code> is larger than the number of action groups in <code>manager</code>, or\nnegative, <code>action_group</code> will be inserted at the end of the internal\nlist.</p>",
            "kind": "method",
            "name": "insert_action_group",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "action_group",
                    "direction": "in",
                    "type": "Gtk.ActionGroup"
                },
                {
                    "allow_none": false,
                    "argname": "pos",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Returns an unused merge id, suitable for use with\n<span data-xref=\"Gtk.UIManager.add_ui\"/>.</p>",
            "kind": "method",
            "name": "new_merge_id",
            "parameters": [],
            "retval": {
                "type": "Number(guint)"
            }
        },
        {
            "doc": "<p>Removes an action group from the list of action groups associated\nwith <code>manager</code>.</p>",
            "kind": "method",
            "name": "remove_action_group",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "action_group",
                    "direction": "in",
                    "type": "Gtk.ActionGroup"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Unmerges the part of <code>manager</code>'s content identified by <code>merge_id</code>.</p>",
            "kind": "method",
            "name": "remove_ui",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "merge_id",
                    "direction": "in",
                    "type": "Number(guint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the \u201cadd_tearoffs\u201d property, which controls whether menus\ngenerated by this <span data-xref=\"Gtk.UIManager\"/> will have tearoff menu items.</p><p>Note that this only affects regular menus. Generated popup\nmenus never have tearoff menu items.</p>",
            "kind": "method",
            "name": "set_add_tearoffs",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "add_tearoffs",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        []
    ],
    "name": "UIManager",
    "properties": [
        {
            "doc": "<p>The \"add-tearoffs\" property controls whether generated menus\nhave tearoff menu items.</p><p>Note that this only affects regular menus. Generated popup\nmenus never have tearoff menu items.</p>",
            "kind": "property",
            "name": "add-tearoffs",
            "type": "Boolean"
        },
        {
            "doc": "",
            "kind": "property",
            "name": "ui",
            "type": "String"
        }
    ],
    "signals": [
        {
            "doc": "<p>The ::actions-changed signal is emitted whenever the set of actions\nchanges.</p>",
            "kind": "signal",
            "name": "actions-changed",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::add-widget signal is emitted for each generated menubar and toolbar.\nIt is not emitted for generated popup menus, which can be obtained by\n<span data-xref=\"Gtk.UIManager.get_widget\"/>.</p>",
            "kind": "signal",
            "name": "add-widget",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "widget",
                    "direction": "in",
                    "type": "Gtk.Widget"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::connect-proxy signal is emitted after connecting a proxy to\nan action in the group.</p><p>This is intended for simple customizations for which a custom action\nclass would be too clumsy, e.g. showing tooltips for menuitems in the\nstatusbar.</p>",
            "kind": "signal",
            "name": "connect-proxy",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "action",
                    "direction": "in",
                    "type": "Gtk.Action"
                },
                {
                    "allow_none": false,
                    "argname": "proxy",
                    "direction": "in",
                    "type": "Gtk.Widget"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::disconnect-proxy signal is emitted after disconnecting a proxy\nfrom an action in the group.</p>",
            "kind": "signal",
            "name": "disconnect-proxy",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "action",
                    "direction": "in",
                    "type": "Gtk.Action"
                },
                {
                    "allow_none": false,
                    "argname": "proxy",
                    "direction": "in",
                    "type": "Gtk.Widget"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::post-activate signal is emitted just after the <code>action</code>\nis activated.</p><p>This is intended for applications to get notification\njust after any action is activated.</p>",
            "kind": "signal",
            "name": "post-activate",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "action",
                    "direction": "in",
                    "type": "Gtk.Action"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::pre-activate signal is emitted just before the <code>action</code>\nis activated.</p><p>This is intended for applications to get notification\njust before any action is activated.</p>",
            "kind": "signal",
            "name": "pre-activate",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "action",
                    "direction": "in",
                    "type": "Gtk.Action"
                }
            ],
            "retval": {
                "type": "void"
            }
        }
    ],
    "vfuncs": [
        {
            "doc": "",
            "kind": "vfunc",
            "name": "actions_changed",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "add_widget",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "widget",
                    "direction": "in",
                    "type": "Gtk.Widget"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "connect_proxy",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "action",
                    "direction": "in",
                    "type": "Gtk.Action"
                },
                {
                    "allow_none": false,
                    "argname": "proxy",
                    "direction": "in",
                    "type": "Gtk.Widget"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "disconnect_proxy",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "action",
                    "direction": "in",
                    "type": "Gtk.Action"
                },
                {
                    "allow_none": false,
                    "argname": "proxy",
                    "direction": "in",
                    "type": "Gtk.Widget"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Looks up an action by following a path. See <span data-xref=\"Gtk.UIManager.get_widget\"/>\nfor more information about paths.</p>",
            "kind": "vfunc",
            "name": "get_action",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "path",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "Gtk.Action"
            }
        },
        {
            "doc": "<p>Looks up a widget by following a path.\nThe path consists of the names specified in the XML description of the UI.\nseparated by \u201c/\u201d. Elements which don\u2019t have a name or action attribute in\nthe XML (e.g. &lt;popup&gt;) can be addressed by their XML element name\n(e.g. \"popup\"). The root element (\"/ui\") can be omitted in the path.</p><p>Note that the widget found by following a path that ends in a &lt;menu&gt;;\nelement is the menuitem to which the menu is attached, not the menu it\nmanages.</p><p>Also note that the widgets constructed by a ui manager are not tied to\nthe lifecycle of the ui manager. If you add the widgets returned by this\nfunction to some container or explicitly ref them, they will survive the\ndestruction of the ui manager.</p>",
            "kind": "vfunc",
            "name": "get_widget",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "path",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "Gtk.Widget"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "post_activate",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "action",
                    "direction": "in",
                    "type": "Gtk.Action"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "pre_activate",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "action",
                    "direction": "in",
                    "type": "Gtk.Action"
                }
            ],
            "retval": {
                "type": "void"
            }
        }
    ]
}