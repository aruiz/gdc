{
    "classes": [
        {
            "doc": "<p>The GtkAboutDialog offers a simple way to display information about\na program like its logo, name, copyright, website and license. It is\nalso possible to give credits to the authors, documenters, translators\nand artists who have worked on the program. An about dialog is typicallyx\nopened when the user selects the <code>About</code> option from\nthe <code>Help</code> menu. All parts of the dialog are optional.</p><p>About dialogs often contain links and email addresses. GtkAboutDialog\ndisplays these as clickable links. By default, it calls <span data-xref=\"Gtk.show_uri\"/>\nwhen a user clicks one. The behaviour can be overridden with the\n<span data-xref=\"Gtk.AboutDialog-activate-link\"/> signal.</p><p>To make constructing a GtkAboutDialog as convenient as possible, you can\nuse the function <span data-xref=\"Gtk.show_about_dialog\"/> which constructs and shows a dialog\nand keeps it around so that it can be shown again.</p><p>Note that GTK+ sets a default title of <code>_(\"About %s\")</code> on the dialog\nwindow (where \\%s is replaced by the name of the application, but in\norder to ensure proper translation of the title, applications should\nset the title property explicitly when constructing a GtkAboutDialog,\nas shown in the following example:\n|[&lt;!-- language=\"C\" --&gt;\ngtk_show_about_dialog (NULL,\n                       \"program-name\", \"ExampleCode\",\n                       \"logo\", example_logo,\n                       \"title\" _(\"About ExampleCode\"),\n                       NULL);\n]|</p><p>It is also possible to show a <span data-xref=\"Gtk.AboutDialog\"/> like any other <span data-xref=\"Gtk.Dialog\"/>,\ne.g. using <span data-xref=\"Gtk.Dialog.run\"/>. In this case, you might need to know that\nthe \u201cClose\u201d button returns the #GTK_RESPONSE_CANCEL response id.</p>",
            "kind": "class",
            "name": "AboutDialog"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.AccelGroup\"/> represents a group of keyboard accelerators,\ntypically attached to a toplevel <span data-xref=\"Gtk.Window\"/> (with\n<span data-xref=\"Gtk.Window.add_accel_group\"/>). Usually you won\u2019t need to create a\n<span data-xref=\"Gtk.AccelGroup\"/> directly; instead, when using <span data-xref=\"Gtk.UIManager\"/>, GTK+\nautomatically sets up the accelerators for your menus in the ui\nmanager\u2019s <span data-xref=\"Gtk.AccelGroup\"/>.</p><p>Note that \u201caccelerators\u201d are different from\n\u201cmnemonics\u201d. Accelerators are shortcuts for\nactivating a menu item; they appear alongside the menu item they\u2019re a\nshortcut for. For example \u201cCtrl+Q\u201d might appear alongside the \u201cQuit\u201d\nmenu item. Mnemonics are shortcuts for GUI elements such as text\nentries or buttons; they appear as underlined characters. See\n<span data-xref=\"Gtk.Label.new_with_mnemonic\"/>. Menu items can have both accelerators\nand mnemonics, of course.</p>",
            "kind": "class",
            "name": "AccelGroup"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.AccelLabel\"/> widget is a subclass of <span data-xref=\"Gtk.Label\"/> that also displays an\naccelerator key on the right of the label text, e.g. \u201cCtl+S\u201d.\nIt is commonly used in menus to show the keyboard short-cuts for commands.</p><p>The accelerator key to display is not set explicitly.\nInstead, the <span data-xref=\"Gtk.AccelLabel\"/> displays the accelerators which have been added to\na particular widget. This widget is set by calling\n<span data-xref=\"Gtk.AccelLabel.set_accel_widget\"/>.</p><p>For example, a <span data-xref=\"Gtk.MenuItem\"/> widget may have an accelerator added to emit the\n\u201cactivate\u201d signal when the \u201cCtl+S\u201d key combination is pressed.\nA <span data-xref=\"Gtk.AccelLabel\"/> is created and added to the <span data-xref=\"Gtk.MenuItem\"/>, and\n<span data-xref=\"Gtk.AccelLabel.set_accel_widget\"/> is called with the <span data-xref=\"Gtk.MenuItem\"/> as the\nsecond argument. The <span data-xref=\"Gtk.AccelLabel\"/> will now display \u201cCtl+S\u201d after its label.</p><p>Note that creating a <span data-xref=\"Gtk.MenuItem\"/> with <span data-xref=\"Gtk.MenuItem.new_with_label\"/> (or\none of the similar functions for <span data-xref=\"Gtk.CheckMenuItem\"/> and <span data-xref=\"Gtk.RadioMenuItem\"/>)\nautomatically adds a <span data-xref=\"Gtk.AccelLabel\"/> to the <span data-xref=\"Gtk.MenuItem\"/> and calls\n<span data-xref=\"Gtk.AccelLabel.set_accel_widget\"/> to set it up for you.</p><p>A <span data-xref=\"Gtk.AccelLabel\"/> will only display accelerators which have <span data-xref=\"Gtk.AccelFlags\"/>.visible\nset (see <span data-xref=\"Gtk.AccelFlags\"/>).\nA <span data-xref=\"Gtk.AccelLabel\"/> can display multiple accelerators and even signal names,\nthough it is almost always used to display just one accelerator key.</p><h2>Creating a simple menu item with an accelerator key.</h2><p>|[&lt;!-- language=\"C\" --&gt;\n  GtkWidget <em>save_item;\n  GtkAccelGroup </em>accel_group;</p><p>// Create a GtkAccelGroup and add it to the window.\n  accel_group = gtk_accel_group_new ();\n  gtk_window_add_accel_group (GTK_WINDOW (window), accel_group);</p><p>// Create the menu item using the convenience function.\n  save_item = gtk_menu_item_new_with_label (\"Save\");\n  gtk_widget_show (save_item);\n  gtk_container_add (GTK_CONTAINER (menu), save_item);</p><p>// Now add the accelerator to the GtkMenuItem. Note that since we\n  // called <span data-xref=\"Gtk.MenuItem.new_with_label\"/> to create the GtkMenuItem\n  // the GtkAccelLabel is automatically set up to display the\n  // GtkMenuItem accelerators. We just need to make sure we use\n  // GTK_ACCEL_VISIBLE here.\n  gtk_widget_add_accelerator (save_item, \"activate\", accel_group,\n                              GDK_KEY_s, GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);\n]|</p>",
            "kind": "class",
            "name": "AccelLabel"
        },
        {
            "doc": "<p>Accelerator maps are used to define runtime configurable accelerators.\nFunctions for manipulating them are are usually used by higher level\nconvenience mechanisms like <span data-xref=\"Gtk.UIManager\"/> and are thus considered\n\u201clow-level\u201d. You\u2019ll want to use them if you\u2019re manually creating menus that\nshould have user-configurable accelerators.</p><p>An accelerator is uniquely defined by:\n- accelerator path\n- accelerator key\n- accelerator modifiers</p><p>The accelerator path must consist of\n\u201c&lt;WINDOWTYPE&gt;/Category1/Category2/.../Action\u201d, where WINDOWTYPE\nshould be a unique application-specific identifier that corresponds\nto the kind of window the accelerator is being used in, e.g.\n\u201cGimp-Image\u201d, \u201cAbiword-Document\u201d or \u201cGnumeric-Settings\u201d.\nThe \u201cCategory1/.../Action\u201d portion is most appropriately chosen by\nthe action the accelerator triggers, i.e. for accelerators on menu\nitems, choose the item\u2019s menu path, e.g. \u201cFile/Save As\u201d,\n\u201cImage/View/Zoom\u201d or \u201cEdit/Select All\u201d. So a full valid accelerator\npath may look like: \u201c&lt;Gimp-Toolbox&gt;/File/Dialogs/Tool Options...\u201d.</p><p>All accelerators are stored inside one global <span data-xref=\"Gtk.AccelMap\"/> that can\nbe obtained using <span data-xref=\"Gtk.AccelMap.get\"/>. See\n[Monitoring changes][monitoring-changes] for additional\ndetails.</p><h1>Manipulating accelerators</h1><p>New accelerators can be added using <span data-xref=\"Gtk.AccelMap.add_entry\"/>.\nTo search for specific accelerator, use <span data-xref=\"Gtk.AccelMap.lookup_entry\"/>.\nModifications of existing accelerators should be done using\n<span data-xref=\"Gtk.AccelMap.change_entry\"/>.</p><p>In order to avoid having some accelerators changed, they can be\nlocked using <span data-xref=\"Gtk.AccelMap.lock_path\"/>. Unlocking is done using\n<span data-xref=\"Gtk.AccelMap.unlock_path\"/>.</p><h1>Saving and loading accelerator maps</h1><p>Accelerator maps can be saved to and loaded from some external\nresource. For simple saving and loading from file,\n<span data-xref=\"Gtk.AccelMap.save\"/> and <span data-xref=\"Gtk.AccelMap.load\"/> are provided.\nSaving and loading can also be done by providing file descriptor\nto <span data-xref=\"Gtk.AccelMap.save_fd\"/> and <span data-xref=\"Gtk.AccelMap.load_fd\"/>.</p><h1>Monitoring changes</h1><p><span data-xref=\"Gtk.AccelMap\"/> object is only useful for monitoring changes of\naccelerators. By connecting to <span data-xref=\"Gtk.AccelMap-changed\"/> signal, one\ncan monitor changes of all accelerators. It is also possible to\nmonitor only single accelerator path by using it as a detail of\nthe <span data-xref=\"Gtk.AccelMap-changed\"/> signal.</p>",
            "kind": "class",
            "name": "AccelMap"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.Accessible\"/> class is the base class for accessible\nimplementations for <span data-xref=\"Gtk.Widget\"/> subclasses. It is a thin\nwrapper around <span data-xref=\"Atk.Object\">Atk.Object</span>, which adds facilities for associating\na widget with its accessible object.</p><p>An accessible implementation for a third-party widget should\nderive from <span data-xref=\"Gtk.Accessible\"/> and implement the suitable interfaces\nfrom ATK, such as <span data-xref=\"Atk.Text\">Atk.Text</span> or <span data-xref=\"Atk.Selection\">Atk.Selection</span>. To establish\nthe connection between the widget class and its corresponding\nacccessible implementation, override the get_accessible vfunc\nin <span data-xref=\"Gtk.WidgetClass\"/>.</p>",
            "kind": "class",
            "name": "Accessible"
        },
        {
            "doc": "<p>&gt; In GTK+ 3.10, GtkAction has been deprecated. Use <span data-xref=\"Gio.Action\">Gio.Action</span>\n&gt; instead, and associate actions with <span data-xref=\"Gtk.Actionable\"/> widgets. Use\n&gt; <span data-xref=\"Gio.MenuModel\">Gio.MenuModel</span> for creating menus with <span data-xref=\"Gtk.Menu.new_from_model\"/>.</p><p>Actions represent operations that the user can be perform, along with\nsome information how it should be presented in the interface. Each action\nprovides methods to create icons, menu items and toolbar items\nrepresenting itself.</p><p>As well as the callback that is called when the action gets activated,\nthe following also gets associated with the action:</p><ul>\n<li>a name (not translated, for path lookup)</li>\n</ul><ul>\n<li>a label (translated, for display)</li>\n</ul><ul>\n<li>an accelerator</li>\n</ul><ul>\n<li>whether label indicates a stock id</li>\n</ul><ul>\n<li>a tooltip (optional, translated)</li>\n</ul><ul>\n<li>a toolbar label (optional, shorter than label)</li>\n</ul><p>The action will also have some state information:</p><ul>\n<li>visible (shown/hidden)</li>\n</ul><ul>\n<li>sensitive (enabled/disabled)</li>\n</ul><p>Apart from regular actions, there are [toggle actions][GtkToggleAction],\nwhich can be toggled between two states and\n[radio actions][GtkRadioAction], of which only one in a group\ncan be in the \u201cactive\u201d state. Other actions can be implemented as <span data-xref=\"Gtk.Action\"/>\nsubclasses.</p><p>Each action can have one or more proxy widgets. To act as an action proxy,\nwidget needs to implement <span data-xref=\"Gtk.Activatable\"/> interface. Proxies mirror the state\nof the action and should change when the action\u2019s state changes. Properties\nthat are always mirrored by proxies are <span data-xref=\"Gtk.Action-sensitive\"/> and\n<span data-xref=\"Gtk.Action-visible\"/>. <span data-xref=\"Gtk.Action-gicon\"/>, <span data-xref=\"Gtk.Action-icon-name\"/>, <span data-xref=\"Gtk.Action-label\"/>,\n<span data-xref=\"Gtk.Action-short-label\"/> and <span data-xref=\"Gtk.Action-stock-id\"/> properties are only mirorred\nif proxy widget has <span data-xref=\"Gtk.Activatable-use-action-appearance\"/> property set to\n<code>true</code>.</p><p>When the proxy is activated, it should activate its action.</p>",
            "kind": "class",
            "name": "Action"
        },
        {
            "doc": "<p>GtkActionBar is designed to present contextual actions. It is\nexpected to be displayed below the content and expand horizontally\nto fill the area.</p><p>It allows placing children at the start or the end. In addition, it\ncontains an internal centered box which is centered with respect to\nthe full width of the box, even if the children at either side take\nup different amounts of space.</p>",
            "kind": "class",
            "name": "ActionBar"
        },
        {
            "doc": "<p>Actions are organised into groups. An action group is essentially a\nmap from names to <span data-xref=\"Gtk.Action\"/> objects.</p><p>All actions that would make sense to use in a particular context\nshould be in a single group. Multiple action groups may be used for a\nparticular user interface. In fact, it is expected that most nontrivial\napplications will make use of multiple groups. For example, in an\napplication that can edit multiple documents, one group holding global\nactions (e.g. quit, about, new), and one group per document holding\nactions that act on that document (eg. save, cut/copy/paste, etc). Each\nwindow\u2019s menus would be constructed from a combination of two action\ngroups.</p><h2>Accelerators ## {#Action-Accel}</h2><p>Accelerators are handled by the GTK+ accelerator map. All actions are\nassigned an accelerator path (which normally has the form\n<code>&amp;lt;Actions&amp;gt;/group-name/action-name</code>) and a shortcut is associated with\nthis accelerator path. All menuitems and toolitems take on this accelerator\npath. The GTK+ accelerator map code makes sure that the correct shortcut\nis displayed next to the menu item.</p><h1>GtkActionGroup as GtkBuildable # {<span data-xref=\"Gtk.ActionGroup\"/>-BUILDER-UI}</h1><p>The <span data-xref=\"Gtk.ActionGroup\"/> implementation of the <span data-xref=\"Gtk.Buildable\"/> interface accepts\n<span data-xref=\"Gtk.Action\"/> objects as &lt;child&gt; elements in UI definitions.</p><p>Note that it is probably more common to define actions and action groups\nin the code, since they are directly related to what the code can do.</p><p>The GtkActionGroup implementation of the GtkBuildable interface supports\na custom &lt;accelerator&gt; element, which has attributes named \u201ckey\u201c and\n\u201cmodifiers\u201c and allows to specify accelerators. This is similar to the\n&lt;accelerator&gt; element of <span data-xref=\"Gtk.Widget\"/>, the main difference is that\nit doesn\u2019t allow you to specify a signal.</p><h2>A <span data-xref=\"Gtk.Dialog\"/> UI definition fragment.</h2>\n<p>|[\n&lt;object class=\"GtkActionGroup\" id=\"actiongroup\"&gt;\n  &lt;child&gt;\n      &lt;object class=\"GtkAction\" id=\"About\"&gt;\n          &lt;property name=\"name\"&gt;About&lt;/property&gt;\n          &lt;property name=\"stock_id\"&gt;gtk-about&lt;/property&gt;\n          &lt;signal handler=\"about_activate\" name=\"activate\"/&gt;\n      &lt;/object&gt;\n      &lt;accelerator key=\"F1\" modifiers=\"GDK_CONTROL_MASK | GDK_SHIFT_MASK\"/&gt;\n  &lt;/child&gt;\n&lt;/object&gt;\n]|</p>",
            "kind": "class",
            "name": "ActionGroup"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.Adjustment\"/> object represents a value which has an associated lower\nand upper bound, together with step and page increments, and a page size.\nIt is used within several GTK+ widgets, including\n<span data-xref=\"Gtk.SpinButton\"/>, <span data-xref=\"Gtk.Viewport\"/>, and <span data-xref=\"Gtk.Range\"/> (which is a base class for\n<span data-xref=\"Gtk.HScrollbar\"/>, <span data-xref=\"Gtk.VScrollbar\"/>, <span data-xref=\"Gtk.HScale\"/>, and <span data-xref=\"Gtk.VScale\"/>).</p><p>The <span data-xref=\"Gtk.Adjustment\"/> object does not update the value itself. Instead\nit is left up to the owner of the <span data-xref=\"Gtk.Adjustment\"/> to control the value.</p><p>The owner of the <span data-xref=\"Gtk.Adjustment\"/> typically calls the\n<span data-xref=\"Gtk.Adjustment.value_changed\"/> and <span data-xref=\"Gtk.Adjustment.changed\"/> functions\nafter changing the value and its bounds. This results in the emission of the</p>\n<h1>GtkAdjustment::value_changed or <span data-xref=\"Gtk.Adjustment-changed\"/> signal respectively.</h1>",
            "kind": "class",
            "name": "Adjustment"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.Alignment\"/> widget controls the alignment and size of its child widget.\nIt has four settings: xscale, yscale, xalign, and yalign.</p><p>The scale settings are used to specify how much the child widget should\nexpand to fill the space allocated to the <span data-xref=\"Gtk.Alignment\"/>.\nThe values can range from 0 (meaning the child doesn\u2019t expand at all) to\n1 (meaning the child expands to fill all of the available space).</p><p>The align settings are used to place the child widget within the available\narea. The values range from 0 (top or left) to 1 (bottom or right).\nOf course, if the scale settings are both set to 1, the alignment settings\nhave no effect.</p><p>Note that the desired effect can in most cases be achieved by using the\n<span data-xref=\"Gtk.Widget-halign\"/>, <span data-xref=\"Gtk.Widget-valign\"/> and <span data-xref=\"Gtk.Widget-margin\"/> properties\non the child widget, so <span data-xref=\"Gtk.Alignment\"/> should not be used in new code.</p>",
            "kind": "class",
            "name": "Alignment"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.AppChooserButton\"/> is a widget that lets the user select\nan application. It implements the <span data-xref=\"Gtk.AppChooser\"/> interface.</p><p>Initially, a <span data-xref=\"Gtk.AppChooserButton\"/> selects the first application\nin its list, which will either be the most-recently used application\nor, if <span data-xref=\"Gtk.AppChooserButton-show-default-item\"/> is <code>true</code>, the\ndefault application.</p><p>The list of applications shown in a <span data-xref=\"Gtk.AppChooserButton\"/> includes\nthe recommended applications for the given content type. When\n<span data-xref=\"Gtk.AppChooserButton-show-default-item\"/> is set, the default application\nis also included. To let the user chooser other applications,\nyou can set the <span data-xref=\"Gtk.AppChooserButton-show-dialog-item\"/> property,\nwhich allows to open a full <span data-xref=\"Gtk.AppChooserDialog\"/>.</p><p>It is possible to add custom items to the list, using\n<span data-xref=\"Gtk.AppChooserButton.append_custom_item\"/>. These items cause\nthe <span data-xref=\"Gtk.AppChooserButton-custom-item-activated\"/> signal to be\nemitted when they are selected.</p><p>To track changes in the selected application, use the\n<span data-xref=\"Gtk.ComboBox-changed\"/> signal.</p>",
            "kind": "class",
            "name": "AppChooserButton"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.AppChooserDialog\"/> shows a <span data-xref=\"Gtk.AppChooserWidget\"/> inside a <span data-xref=\"Gtk.Dialog\"/>.</p><p>Note that <span data-xref=\"Gtk.AppChooserDialog\"/> does not have any interesting methods\nof its own. Instead, you should get the embedded <span data-xref=\"Gtk.AppChooserWidget\"/>\nusing <span data-xref=\"Gtk.AppChooserDialog.get_widget\"/> and call its methods if\nthe generic <span data-xref=\"Gtk.AppChooser\"/> interface is not sufficient for your needs.</p><p>To set the heading that is shown above the <span data-xref=\"Gtk.AppChooserWidget\"/>,\nuse <span data-xref=\"Gtk.AppChooserDialog.set_heading\"/>.</p>",
            "kind": "class",
            "name": "AppChooserDialog"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.AppChooserWidget\"/> is a widget for selecting applications.\nIt is the main building block for <span data-xref=\"Gtk.AppChooserDialog\"/>. Most\napplications only need to use the latter; but you can use\nthis widget as part of a larger widget if you have special needs.</p><p><span data-xref=\"Gtk.AppChooserWidget\"/> offers detailed control over what applications\nare shown, using the\n<span data-xref=\"Gtk.AppChooserWidget-show-default\"/>,\n<span data-xref=\"Gtk.AppChooserWidget-show-recommended\"/>,\n<span data-xref=\"Gtk.AppChooserWidget-show-fallback\"/>,\n<span data-xref=\"Gtk.AppChooserWidget-show-other\"/> and\n<span data-xref=\"Gtk.AppChooserWidget-show-all\"/>\nproperties. See the <span data-xref=\"Gtk.AppChooser\"/> documentation for more information\nabout these groups of applications.</p><p>To keep track of the selected application, use the\n<span data-xref=\"Gtk.AppChooserWidget-application-selected\"/> and <span data-xref=\"Gtk.AppChooserWidget-application-activated\"/> signals.</p>",
            "kind": "class",
            "name": "AppChooserWidget"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.Application\"/> is a class that handles many important aspects\nof a GTK+ application in a convenient fashion, without enforcing\na one-size-fits-all application model.</p><p>Currently, GtkApplication handles GTK+ initialization, application\nuniqueness, session management, provides some basic scriptability and\ndesktop shell integration by exporting actions and menus and manages a\nlist of toplevel windows whose life-cycle is automatically tied to the\nlife-cycle of your application.</p><p>While GtkApplication works fine with plain #GtkWindows, it is recommended\nto use it together with <span data-xref=\"Gtk.ApplicationWindow\"/>.</p><p>When GDK threads are enabled, GtkApplication will acquire the GDK\nlock when invoking actions that arrive from other processes.  The GDK\nlock is not touched for local action invocations.  In order to have\nactions invoked in a predictable context it is therefore recommended\nthat the GDK lock be held while invoking actions locally with\n<span data-xref=\"Gio.ActionGroup.activate_action\">Gio.ActionGroup.prototype.activate_action</span>.  The same applies to actions\nassociated with <span data-xref=\"Gtk.ApplicationWindow\"/> and to the \u201cactivate\u201d and\n'open' <span data-xref=\"Gio.Application\">Gio.Application</span> methods.</p><p>To set an application menu for a GtkApplication, use\n<span data-xref=\"Gtk.Application.set_app_menu\"/>. The <span data-xref=\"Gio.MenuModel\">Gio.MenuModel</span> that this function\nexpects is usually constructed using <span data-xref=\"Gtk.Builder\"/>, as seen in the\nfollowing example. To specify a menubar that will be shown by</p>\n<h1>GtkApplicationWindows, use <span data-xref=\"Gtk.Application.set_menubar\"/>. Use the base</h1>\n<p><span data-xref=\"Gio.ActionMap\">Gio.ActionMap</span> interface to add actions, to respond to the user\nselecting these menu items.</p><p>GTK+ displays these menus as expected, depending on the platform\nthe application is running on.</p><h2>A simple application ## {#gtkapplication}</h2><p><a href=\"https://git.gnome.org/browse/gtk+/tree/examples/bloatpad.c\">A simple example</a></p><p>GtkApplication optionally registers with a session manager\nof the users session (if you set the <span data-xref=\"Gtk.Application-register-session\"/>\nproperty) and offers various functionality related to the session\nlife-cycle.</p><p>An application can block various ways to end the session with\nthe <span data-xref=\"Gtk.Application.inhibit\"/> function. Typical use cases for\nthis kind of inhibiting are long-running, uninterruptible operations,\nsuch as burning a CD or performing a disk backup. The session\nmanager may not honor the inhibitor, but it can be expected to\ninform the user about the negative consequences of ending the\nsession while inhibitors are present.</p>",
            "kind": "class",
            "name": "Application"
        },
        {
            "doc": "<p>GtkApplicationWindow is a <span data-xref=\"Gtk.Window\"/> subclass that offers some\nextra functionality for better integration with <span data-xref=\"Gtk.Application\"/>\nfeatures.  Notably, it can handle both the application menu as well\nas the menubar. See <span data-xref=\"Gtk.Application.set_app_menu\"/> and\n<span data-xref=\"Gtk.Application.set_menubar\"/>.</p><p>This class implements the <span data-xref=\"Gio.ActionGroup\">Gio.ActionGroup</span> and <span data-xref=\"Gio.ActionMap\">Gio.ActionMap</span> interfaces,\nto let you add window-specific actions that will be exported by the\nassociated <span data-xref=\"Gtk.Application\"/>, together with its application-wide\nactions.  Window-specific actions are prefixed with the \u201cwin.\u201d\nprefix and application-wide actions are prefixed with the \u201capp.\u201d\nprefix.  Actions must be addressed with the prefixed name when\nreferring to them from a <span data-xref=\"Gio.MenuModel\">Gio.MenuModel</span>.</p><p>Note that widgets that are placed inside a GtkApplicationWindow\ncan also activate these actions, if they implement the\nGtkActionable interface.</p><p>As with <span data-xref=\"Gtk.Application\"/>, the GDK lock will be acquired when\nprocessing actions arriving from other processes and should therefore\nbe held when activating actions locally (if GDK threads are enabled).</p><p>The settings <span data-xref=\"Gtk.Settings-gtk-shell-shows-app-menu\"/> and\n<span data-xref=\"Gtk.Settings-gtk-shell-shows-menubar\"/> tell GTK+ whether the\ndesktop environment is showing the application menu and menubar\nmodels outside the application as part of the desktop shell.\nFor instance, on OS X, both menus will be displayed remotely;\non Windows neither will be. gnome-shell (starting with version 3.4)\nwill display the application menu, but not the menubar.</p><p>If the desktop environment does not display the menubar, then\n<span data-xref=\"Gtk.ApplicationWindow\"/> will automatically show a <span data-xref=\"Gtk.MenuBar\"/> for it.\n(see the <span data-xref=\"Gtk.Application\"/> docs for some screenshots of how this\nlooks on different platforms).\nThis behaviour can be overridden with the <span data-xref=\"Gtk.ApplicationWindow-show-menubar\"/>\nproperty. If the desktop environment does not display the application\nmenu, then it will automatically be included in the menubar. It can\nalso be shown as part of client-side window decorations, e.g. by\nusing <span data-xref=\"Gtk.HeaderBar.set_show_close_button\"/>.</p><h2>A GtkApplicationWindow with a menubar</h2><p>|[&lt;!-- language=\"C\" --&gt;\napp = gtk_application_new ();</p><p>builder = gtk_builder_new ();\ngtk_builder_add_from_string (builder,\n    \"&lt;interface&gt;\"\n    \"  &lt;menu id='menubar'&gt;\"\n    \"    &lt;submenu label='_Edit'&gt;\"\n    \"      &lt;item label='_Copy' action='win.copy'/&gt;\"\n    \"      &lt;item label='_Paste' action='win.paste'/&gt;\"\n    \"    &lt;/submenu&gt;\"\n    \"  &lt;/menu&gt;\"\n    \"&lt;/interface&gt;\");</p><p>menubar = G_MENU_MODEL (gtk_builder_get_object (builder,\n                                                \"menubar\"));\ngtk_application_set_menubar (G_APPLICATION (app),\n                             menubar);\ng_object_unref (builder);</p><p>...</p><p>window = gtk_application_window_new (app);\n]|</p><h2>Handling fallback yourself</h2><p><a href=\"https://git.gnome.org/browse/gtk+/tree/examples/sunny.c\">A simple example</a></p><p>The XML format understood by <span data-xref=\"Gtk.Builder\"/> for <span data-xref=\"Gio.MenuModel\">Gio.MenuModel</span> consists\nof a toplevel <code>&amp;lt;menu&amp;gt;</code> element, which contains one or more <code>&amp;lt;item&amp;gt;</code>\nelements. Each <code>&amp;lt;item&amp;gt;</code> element contains <code>&amp;lt;attribute&amp;gt;</code> and <code>&amp;lt;link&amp;gt;</code>\nelements with a mandatory name attribute. <code>&amp;lt;link&amp;gt;</code> elements have the\nsame content model as <code>&amp;lt;menu&amp;gt;</code>.</p><p>Attribute values can be translated using gettext, like other <span data-xref=\"Gtk.Builder\"/>\ncontent. <code>&amp;lt;attribute&amp;gt;</code> elements can be marked for translation with a\n<code>translatable=\"yes\"</code> attribute. It is also possible to specify message\ncontext and translator comments,using the context and comments attributes.\nTo make use of this, the <span data-xref=\"Gtk.Builder\"/> must have been given the gettext\ndomain to use.</p>",
            "kind": "class",
            "name": "ApplicationWindow"
        },
        {
            "doc": "<p>GtkArrow should be used to draw simple arrows that need to point in\none of the four cardinal directions (up, down, left, or right).  The\nstyle of the arrow can be one of shadow in, shadow out, etched in, or\netched out.  Note that these directions and style types may be\namended in versions of GTK+ to come.</p><p>GtkArrow will fill any space alloted to it, but since it is inherited\nfrom <span data-xref=\"Gtk.Misc\"/>, it can be padded and/or aligned, to fill exactly the\nspace the programmer desires.</p><p>Arrows are created with a call to <span data-xref=\"Gtk.Arrow.new\"/>.  The direction or\nstyle of an arrow can be changed after creation by using <span data-xref=\"Gtk.Arrow.set\"/>.</p>",
            "kind": "class",
            "name": "Arrow"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.AspectFrame\"/> is useful when you want\npack a widget so that it can resize but always retains\nthe same aspect ratio. For instance, one might be\ndrawing a small preview of a larger image. <span data-xref=\"Gtk.AspectFrame\"/>\nderives from <span data-xref=\"Gtk.Frame\"/>, so it can draw a label and\na frame around the child. The frame will be\n\u201cshrink-wrapped\u201d to the size of the child.</p>",
            "kind": "class",
            "name": "AspectFrame"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.Assistant\"/> is a widget used to represent a generally complex\noperation splitted in several steps, guiding the user through its\npages and controlling the page flow to collect the necessary data.</p><p>The design of GtkAssistant is that it controls what buttons to show\nand to make sensitive, based on what it knows about the page sequence\nand the [type][GtkAssistantPageType] of each page,\nin addition to state information like the page\n[completion][gtk-assistant-set-page-complete]\nand [committed][gtk-assistant-commit] status.</p><p>If you have a case that doesn\u2019t quite fit in #GtkAssistants way of\nhandling buttons, you can use the #GTK_ASSISTANT_PAGE_CUSTOM page\ntype and handle buttons yourself.</p><h1>GtkAssistant as GtkBuildable</h1><p>The GtkAssistant implementation of the <span data-xref=\"Gtk.Buildable\"/> interface\nexposes the @action_area as internal children with the name\n\u201caction_area\u201d.</p><p>To add pages to an assistant in <span data-xref=\"Gtk.Builder\"/>, simply add it as a\nchild to the GtkAssistant object, and set its child properties\nas necessary.</p>",
            "kind": "class",
            "name": "Assistant"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.Bin\"/> widget is a container with just one child.\nIt is not very useful itself, but it is useful for deriving subclasses,\nsince it provides common code needed for handling a single child widget.</p><p>Many GTK+ widgets are subclasses of <span data-xref=\"Gtk.Bin\"/>, including <span data-xref=\"Gtk.Window\"/>,\n<span data-xref=\"Gtk.Button\"/>, <span data-xref=\"Gtk.Frame\"/>, <span data-xref=\"Gtk.HandleBox\"/> or <span data-xref=\"Gtk.ScrolledWindow\"/>.</p>",
            "kind": "class",
            "name": "Bin"
        },
        {
            "doc": "<p>The GtkBox widget organizes child widgets into a rectangular area.</p><p>The rectangular area of a GtkBox is organized into either a single row\nor a single column of child widgets depending upon the orientation.\nThus, all children of a GtkBox are allocated one dimension in common,\nwhich is the height of a row, or the width of a column.</p><p>GtkBox uses a notion of packing. Packing refers\nto adding widgets with reference to a particular position in a\n<span data-xref=\"Gtk.Container\"/>. For a GtkBox, there are two reference positions: the\nstart and the end of the box.\nFor a vertical <span data-xref=\"Gtk.Box\"/>, the start is defined as the top of the box and\nthe end is defined as the bottom. For a horizontal <span data-xref=\"Gtk.Box\"/> the start\nis defined as the left side and the end is defined as the right side.</p><p>Use repeated calls to <span data-xref=\"Gtk.Box.pack_start\"/> to pack widgets into a\nGtkBox from start to end. Use <span data-xref=\"Gtk.Box.pack_end\"/> to add widgets from\nend to start. You may intersperse these calls and add widgets from\nboth ends of the same GtkBox.</p><p>Because GtkBox is a <span data-xref=\"Gtk.Container\"/>, you may also use <span data-xref=\"Gtk.Container.add\"/>\nto insert widgets into the box, and they will be packed with the default\nvalues for expand and fill child properties. Use <span data-xref=\"Gtk.Container.remove\"/>\nto remove widgets from the GtkBox.</p><p>Use <span data-xref=\"Gtk.Box.set_homogeneous\"/> to specify whether or not all children\nof the GtkBox are forced to get the same amount of space.</p><p>Use <span data-xref=\"Gtk.Box.set_spacing\"/> to determine how much space will be\nminimally placed between all children in the GtkBox. Note that\nspacing is added between the children, while\npadding added by <span data-xref=\"Gtk.Box.pack_start\"/> or <span data-xref=\"Gtk.Box.pack_end\"/> is added\non either side of the widget it belongs to.</p><p>Use <span data-xref=\"Gtk.Box.reorder_child\"/> to move a GtkBox child to a different\nplace in the box.</p><p>Use <span data-xref=\"Gtk.Box.set_child_packing\"/> to reset the expand,\nfill and padding child properties.\nUse <span data-xref=\"Gtk.Box.query_child_packing\"/> to query these fields.</p><p>Note that a single-row or single-column <span data-xref=\"Gtk.Grid\"/> provides exactly\nthe same functionality as <span data-xref=\"Gtk.Box\"/>.</p>",
            "kind": "class",
            "name": "Box"
        },
        {
            "doc": "<p>A GtkBuilder is an auxiliary object that reads textual descriptions\nof a user interface and instantiates the described objects. To create\na GtkBuilder from a user interface description, call\n<span data-xref=\"Gtk.Builder.new_from_file\"/>, <span data-xref=\"Gtk.Builder.new_from_resource\"/> or\n<span data-xref=\"Gtk.Builder.new_from_string\"/>.</p><p>In the (unusual) case that you want to add user interface\ndescriptions from multiple sources to the same GtkBuilder you can\ncall <span data-xref=\"Gtk.Builder.new\"/> to get an empty builder and populate it by\n(multiple) calls to <span data-xref=\"Gtk.Builder.add_from_file\"/>,\n<span data-xref=\"Gtk.Builder.add_from_resource\"/> or <span data-xref=\"Gtk.Builder.add_from_string\"/>.</p><p>A GtkBuilder holds a reference to all objects that it has constructed\nand drops these references when it is finalized. This finalization can\ncause the destruction of non-widget objects or widgets which are not\ncontained in a toplevel window. For toplevel windows constructed by a\nbuilder, it is the responsibility of the user to call <span data-xref=\"Gtk.Widget.destroy\"/>\nto get rid of them and all the widgets they contain.</p><p>The functions <span data-xref=\"Gtk.Builder.get_object\"/> and <span data-xref=\"Gtk.Builder.get_objects\"/>\ncan be used to access the widgets in the interface by the names assigned\nto them inside the UI description. Toplevel windows returned by these\nfunctions will stay around until the user explicitly destroys them\nwith <span data-xref=\"Gtk.Widget.destroy\"/>. Other widgets will either be part of a\nlarger hierarchy constructed by the builder (in which case you should\nnot have to worry about their lifecycle), or without a parent, in which\ncase they have to be added to some container to make use of them.\nNon-widget objects need to be reffed with <span data-xref=\"GObject.Object.ref\">GObject.Object.prototype.ref</span> to keep them\nbeyond the lifespan of the builder.</p><p>The function <span data-xref=\"Gtk.Builder.connect_signals\"/> and variants thereof can be\nused to connect handlers to the named signals in the description.</p><h1>GtkBuilder UI Definitions # {#BUILDER-UI}</h1><p>GtkBuilder parses textual descriptions of user interfaces which are\nspecified in an XML format which can be roughly described by the\nRELAX NG schema below. We refer to these descriptions as\n\u201cGtkBuilder UI definitions\u201d or just\n\u201cUI definitions\u201d if the context is clear.\nDo not confuse GtkBuilder UI Definitions with\n[GtkUIManager UI Definitions][XML-UI], which\nare more limited in scope. It is common to use <code>.ui</code>\nas the filename extension for files containing GtkBuilder UI\ndefinitions.</p><p><a href=\"https://git.gnome.org/browse/gtk+/tree/gtk/gtkbuilder.rnc\">RELAX NG Compact Syntax</a></p><p>The toplevel element is &lt;interface&gt;. It optionally takes a \u201cdomain\u201d\nattribute, which will make the builder look for translated strings\nusing dgettext() in the domain specified. This can also be done by\ncalling <span data-xref=\"Gtk.Builder.set_translation_domain\"/> on the builder.\nObjects are described by &lt;object&gt; elements, which can contain\n&lt;property&gt; elements to set properties, &lt;signal&gt; elements which\nconnect signals to handlers, and &lt;child&gt; elements, which describe\nchild objects (most often widgets inside a container, but also e.g.\nactions in an action group, or columns in a tree model). A &lt;child&gt;\nelement contains an &lt;object&gt; element which describes the child object.\nThe target toolkit version(s) are described by &lt;requires&gt; elements,\nthe \u201clib\u201d attribute specifies the widget library in question (currently\nthe only supported value is \u201cgtk+\u201d) and the \u201cversion\u201d attribute specifies\nthe target version in the form \u201c&lt;major&gt;.&lt;minor&gt;\u201d. The builder will error\nout if the version requirements are not met.</p><p>Typically, the specific kind of object represented by an &lt;object&gt;\nelement is specified by the \u201cclass\u201d attribute. If the type has not\nbeen loaded yet, GTK+ tries to find the get_type() function from the\nclass name by applying heuristics. This works in most cases, but if\nnecessary, it is possible to specify the name of the get_type() function\nexplictly with the \"type-func\" attribute. As a special case, GtkBuilder\nallows to use an object that has been constructed by a <span data-xref=\"Gtk.UIManager\"/> in\nanother part of the UI definition by specifying the id of the <span data-xref=\"Gtk.UIManager\"/>\nin the \u201cconstructor\u201d attribute and the name of the object in the \u201cid\u201d\nattribute.</p><p>Objects may be given a name with the \u201cid\u201d attribute, which allows the\napplication to retrieve them from the builder with <span data-xref=\"Gtk.Builder.get_object\"/>.\nAn id is also necessary to use the object as property value in other\nparts of the UI definition. GTK+ reserves ids starting and ending\nwith ___ (3 underscores) for its own purposes.</p><p>Setting properties of objects is pretty straightforward with the\n&lt;property&gt; element: the \u201cname\u201d attribute specifies the name of the\nproperty, and the content of the element specifies the value.\nIf the \u201ctranslatable\u201d attribute is set to a true value, GTK+ uses\ngettext() (or dgettext() if the builder has a translation domain set)\nto find a translation for the value. This happens before the value\nis parsed, so it can be used for properties of any type, but it is\nprobably most useful for string properties. It is also possible to\nspecify a context to disambiguate short strings, and comments which\nmay help the translators.</p><p>GtkBuilder can parse textual representations for the most common\nproperty types: characters, strings, integers, floating-point numbers,\nbooleans (strings like \u201cTRUE\u201d, \u201ct\u201d, \u201cyes\u201d, \u201cy\u201d, \u201c1\u201d are interpreted\nas <code>true</code>, strings like \u201cFALSE\u201d, \u201cf\u201d, \u201cno\u201d, \u201cn\u201d, \u201c0\u201d are interpreted\nas <code>false</code>), enumerations (can be specified by their name, nick or\ninteger value), flags (can be specified by their name, nick, integer\nvalue, optionally combined with \u201c|\u201d, e.g. \u201cGTK_VISIBLE|GTK_REALIZED\u201d)\nand colors (in a format understood by <span data-xref=\"Gdk.color_parse\">Gdk.color_parse</span>). Pixbufs can\nbe specified as a filename of an image file to load. Objects can be\nreferred to by their name and by default refer to objects declared\nin the local xml fragment and objects exposed via\n<span data-xref=\"Gtk.Builder.expose_object\"/>.</p><p>In general, GtkBuilder allows forward references to objects --\ndeclared in the local xml; an object doesn\u2019t have to be constructed\nbefore it can be referred to. The exception to this rule is that an\nobject has to be constructed before it can be used as the value of\na construct-only property.</p><p>It is also possible to bind a property value to another object's\nproperty value using the attributes\n\"bind-source\" to specify the source object of the binding,\n\"bind-property\" to specify the source property and optionally\n\"bind-flags\" to specify the binding flags\nInternally builder implement this using GBinding objects.\nFor more information see <span data-xref=\"GObject.Object.bind_property\">GObject.Object.prototype.bind_property</span></p><p>Signal handlers are set up with the &lt;signal&gt; element. The \u201cname\u201d\nattribute specifies the name of the signal, and the \u201chandler\u201d attribute\nspecifies the function to connect to the signal. By default, GTK+ tries\nto find the handler using <span data-xref=\"GModule.Module.symbol\">GModule.Module.prototype.symbol</span>, but this can be changed by\npassing a custom <span data-xref=\"Gtk.BuilderConnectFunc\"/> to\n<span data-xref=\"Gtk.Builder.connect_signals_full\"/>. The remaining attributes, \u201cafter\u201d,\n\u201cswapped\u201d and \u201cobject\u201d, have the same meaning as the corresponding\nparameters of the <span data-xref=\"GObject.signal_connect_object\">GObject.signal_connect_object</span> or\n<span data-xref=\"GObject.signal_connect_data\">GObject.signal_connect_data</span> functions. A \u201clast_modification_time\u201d\nattribute is also allowed, but it does not have a meaning to the\nbuilder.</p><p>Sometimes it is necessary to refer to widgets which have implicitly\nbeen constructed by GTK+ as part of a composite widget, to set\nproperties on them or to add further children (e.g. the @vbox of\na <span data-xref=\"Gtk.Dialog\"/>). This can be achieved by setting the \u201cinternal-child\u201d\npropery of the &lt;child&gt; element to a true value. Note that GtkBuilder\nstill requires an &lt;object&gt; element for the internal child, even if it\nhas already been constructed.</p><p>A number of widgets have different places where a child can be added\n(e.g. tabs vs. page content in notebooks). This can be reflected in\na UI definition by specifying the \u201ctype\u201d attribute on a &lt;child&gt;\nThe possible values for the \u201ctype\u201d attribute are described in the\nsections describing the widget-specific portions of UI definitions.</p><h1>A GtkBuilder UI Definition</h1><p>|[\n&lt;interface&gt;\n  &lt;object class=\"GtkDialog\" id=\"dialog1\"&gt;\n    &lt;child internal-child=\"vbox\"&gt;\n      &lt;object class=\"GtkVBox\" id=\"vbox1\"&gt;\n        &lt;property name=\"border-width\"&gt;10&lt;/property&gt;\n        &lt;child internal-child=\"action_area\"&gt;\n          &lt;object class=\"GtkHButtonBox\" id=\"hbuttonbox1\"&gt;\n            &lt;property name=\"border-width\"&gt;20&lt;/property&gt;\n            &lt;child&gt;\n              &lt;object class=\"GtkButton\" id=\"ok_button\"&gt;\n                &lt;property name=\"label\"&gt;gtk-ok&lt;/property&gt;\n                &lt;property name=\"use-stock\"&gt;TRUE&lt;/property&gt;\n                &lt;signal name=\"clicked\" handler=\"ok_button_clicked\"/&gt;\n              &lt;/object&gt;\n            &lt;/child&gt;\n          &lt;/object&gt;\n        &lt;/child&gt;\n      &lt;/object&gt;\n    &lt;/child&gt;\n  &lt;/object&gt;\n&lt;/interface&gt;\n]|</p><p>Beyond this general structure, several object classes define their\nown XML DTD fragments for filling in the ANY placeholders in the DTD\nabove. Note that a custom element in a &lt;child&gt; element gets parsed by\nthe custom tag handler of the parent object, while a custom element in\nan &lt;object&gt; element gets parsed by the custom tag handler of the object.</p><p>These XML fragments are explained in the documentation of the\nrespective objects.</p><p>Additionally, since 3.10 a special &lt;template&gt; tag has been added\nto the format allowing one to define a widget class\u2019s components.</p>",
            "kind": "class",
            "name": "Builder"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.Button\"/> widget is generally used to trigger a callback function that is\ncalled when the button is pressed.  The various signals and how to use them\nare outlined below.</p><p>The <span data-xref=\"Gtk.Button\"/> widget can hold any valid child widget.  That is, it can hold\nalmost any other standard <span data-xref=\"Gtk.Widget\"/>.  The most commonly used child is the\n<span data-xref=\"Gtk.Label\"/>.</p>",
            "kind": "class",
            "name": "Button"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ButtonBox"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.Calendar\"/> is a widget that displays a Gregorian calendar, one month\nat a time. It can be created with <span data-xref=\"Gtk.Calendar.new\"/>.</p><p>The month and year currently displayed can be altered with\n<span data-xref=\"Gtk.Calendar.select_month\"/>. The exact day can be selected from the\ndisplayed month using <span data-xref=\"Gtk.Calendar.select_day\"/>.</p><p>To place a visual marker on a particular day, use <span data-xref=\"Gtk.Calendar.mark_day\"/>\nand to remove the marker, <span data-xref=\"Gtk.Calendar.unmark_day\"/>. Alternative, all\nmarks can be cleared with <span data-xref=\"Gtk.Calendar.clear_marks\"/>.</p><p>The way in which the calendar itself is displayed can be altered using\n<span data-xref=\"Gtk.Calendar.set_display_options\"/>.</p><p>The selected date can be retrieved from a <span data-xref=\"Gtk.Calendar\"/> using\n<span data-xref=\"Gtk.Calendar.get_date\"/>.</p><p>Users should be aware that, although the Gregorian calendar is the\nlegal calendar in most countries, it was adopted progressively\nbetween 1582 and 1929. Display before these dates is likely to be\nhistorically incorrect.</p>",
            "kind": "class",
            "name": "Calendar"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.CellArea\"/> is an abstract class for <span data-xref=\"Gtk.CellLayout\"/> widgets\n(also referred to as \"layouting widgets\") to interface with an\narbitrary number of #GtkCellRenderers and interact with the user\nfor a given <span data-xref=\"Gtk.TreeModel\"/> row.</p><p>The cell area handles events, focus navigation, drawing and\nsize requests and allocations for a given row of data.</p><p>Usually users dont have to interact with the <span data-xref=\"Gtk.CellArea\"/> directly\nunless they are implementing a cell-layouting widget themselves.</p><h1>Requesting area sizes</h1><p>As outlined in\n[GtkWidget\u2019s geometry management section][geometry-management],\nGTK+ uses a height-for-width\ngeometry management system to compute the sizes of widgets and user\ninterfaces. <span data-xref=\"Gtk.CellArea\"/> uses the same semantics to calculate the\nsize of an area for an arbitrary number of <span data-xref=\"Gtk.TreeModel\"/> rows.</p><p>When requesting the size of a cell area one needs to calculate\nthe size for a handful of rows, and this will be done differently by\ndifferent layouting widgets. For instance a <span data-xref=\"Gtk.TreeViewColumn\"/>\nalways lines up the areas from top to bottom while a <span data-xref=\"Gtk.IconView\"/>\non the other hand might enforce that all areas received the same\nwidth and wrap the areas around, requesting height for more cell\nareas when allocated less width.</p><p>It\u2019s also important for areas to maintain some cell\nalignments with areas rendered for adjacent rows (cells can\nappear \u201ccolumnized\u201d inside an area even when the size of\ncells are different in each row). For this reason the <span data-xref=\"Gtk.CellArea\"/>\nuses a <span data-xref=\"Gtk.CellAreaContext\"/> object to store the alignments\nand sizes along the way (as well as the overall largest minimum\nand natural size for all the rows which have been calculated\nwith the said context).</p><p>The <span data-xref=\"Gtk.CellAreaContext\"/> is an opaque object specific to the\n<span data-xref=\"Gtk.CellArea\"/> which created it (see <span data-xref=\"Gtk.CellArea.create_context\"/>).\nThe owning cell-layouting widget can create as many contexts as\nit wishes to calculate sizes of rows which should receive the\nsame size in at least one orientation (horizontally or vertically),\nHowever, it\u2019s important that the same <span data-xref=\"Gtk.CellAreaContext\"/> which\nwas used to request the sizes for a given <span data-xref=\"Gtk.TreeModel\"/> row be\nused when rendering or processing events for that row.</p><p>In order to request the width of all the rows at the root level\nof a <span data-xref=\"Gtk.TreeModel\"/> one would do the following:</p><p>|[&lt;!-- language=\"C\" --&gt;\nGtkTreeIter iter;\ngint        minimum_width;\ngint        natural_width;</p><p>valid = gtk_tree_model_get_iter_first (model, &amp;iter);\nwhile (valid)\n  {\n    gtk_cell_area_apply_attributes (area, model, &amp;iter, FALSE, FALSE);\n    gtk_cell_area_get_preferred_width (area, context, widget, NULL, NULL);</p><pre><code>valid = gtk_tree_model_iter_next (model, &amp;amp;iter);\n</code></pre>\n<p>}\ngtk_cell_area_context_get_preferred_width (context, &amp;minimum_width, &amp;natural_width);\n]|</p><p>Note that in this example it\u2019s not important to observe the\nreturned minimum and natural width of the area for each row\nunless the cell-layouting object is actually interested in the\nwidths of individual rows. The overall width is however stored\nin the accompanying <span data-xref=\"Gtk.CellAreaContext\"/> object and can be consulted\nat any time.</p><p>This can be useful since <span data-xref=\"Gtk.CellLayout\"/> widgets usually have to\nsupport requesting and rendering rows in treemodels with an\nexceedingly large amount of rows. The <span data-xref=\"Gtk.CellLayout\"/> widget in\nthat case would calculate the required width of the rows in an\nidle or timeout source (see <span data-xref=\"GLib.timeout_add\">GLib.timeout_add</span>) and when the widget\nis requested its actual width in <span data-xref=\"Gtk.WidgetClass\"/>.get_preferred_width()\nit can simply consult the width accumulated so far in the\n<span data-xref=\"Gtk.CellAreaContext\"/> object.</p><p>A simple example where rows are rendered from top to bottom and\ntake up the full width of the layouting widget would look like:</p><p>|[&lt;!-- language=\"C\" --&gt;\nstatic void\nfoo_get_preferred_width (GtkWidget       <em>widget,\n                         gint            </em>minimum_size,\n                         gint            <em>natural_size)\n{\n  Foo        </em>foo  = FOO (widget);\n  FooPrivate *priv = foo-&gt;priv;</p><p>foo_ensure_at_least_one_handfull_of_rows_have_been_requested (foo);</p><p>gtk_cell_area_context_get_preferred_width (priv-&gt;context, minimum_size, natural_size);\n}\n]|</p><p>In the above example the Foo widget has to make sure that some\nrow sizes have been calculated (the amount of rows that Foo judged\nwas appropriate to request space for in a single timeout iteration)\nbefore simply returning the amount of space required by the area via\nthe <span data-xref=\"Gtk.CellAreaContext\"/>.</p><p>Requesting the height for width (or width for height) of an area is\na similar task except in this case the <span data-xref=\"Gtk.CellAreaContext\"/> does not\nstore the data (actually, it does not know how much space the layouting\nwidget plans to allocate it for every row. It\u2019s up to the layouting\nwidget to render each row of data with the appropriate height and\nwidth which was requested by the <span data-xref=\"Gtk.CellArea\"/>).</p><p>In order to request the height for width of all the rows at the\nroot level of a <span data-xref=\"Gtk.TreeModel\"/> one would do the following:</p><p>|[&lt;!-- language=\"C\" --&gt;\nGtkTreeIter iter;\ngint        minimum_height;\ngint        natural_height;\ngint        full_minimum_height = 0;\ngint        full_natural_height = 0;</p><p>valid = gtk_tree_model_get_iter_first (model, &amp;iter);\nwhile (valid)\n  {\n    gtk_cell_area_apply_attributes (area, model, &amp;iter, FALSE, FALSE);\n    gtk_cell_area_get_preferred_height_for_width (area, context, widget,\n                                                  width, &amp;minimum_height, &amp;natural_height);</p><pre><code>if (width_is_for_allocation)\n   cache_row_height (&amp;amp;iter, minimum_height, natural_height);\n</code></pre><pre><code>full_minimum_height += minimum_height;\nfull_natural_height += natural_height;\n</code></pre><pre><code>valid = gtk_tree_model_iter_next (model, &amp;amp;iter);\n</code></pre>\n<p>}\n]|</p><p>Note that in the above example we would need to cache the heights\nreturned for each row so that we would know what sizes to render the\nareas for each row. However we would only want to really cache the\nheights if the request is intended for the layouting widgets real\nallocation.</p><p>In some cases the layouting widget is requested the height for an\narbitrary for_width, this is a special case for layouting widgets\nwho need to request size for tens of thousands  of rows. For this\ncase it\u2019s only important that the layouting widget calculate\none reasonably sized chunk of rows and return that height\nsynchronously. The reasoning here is that any layouting widget is\nat least capable of synchronously calculating enough height to fill\nthe screen height (or scrolled window height) in response to a single\ncall to <span data-xref=\"Gtk.WidgetClass\"/>.get_preferred_height_for_width(). Returning\na perfect height for width that is larger than the screen area is\ninconsequential since after the layouting receives an allocation\nfrom a scrolled window it simply continues to drive the scrollbar\nvalues while more and more height is required for the row heights\nthat are calculated in the background.</p><h1>Rendering Areas</h1><p>Once area sizes have been aquired at least for the rows in the\nvisible area of the layouting widget they can be rendered at\n<span data-xref=\"Gtk.WidgetClass\"/>.draw() time.</p><p>A crude example of how to render all the rows at the root level\nruns as follows:</p><p>|[&lt;!-- language=\"C\" --&gt;\nGtkAllocation allocation;\nGdkRectangle  cell_area = { 0, };\nGtkTreeIter   iter;\ngint          minimum_width;\ngint          natural_width;</p><p>gtk_widget_get_allocation (widget, &amp;allocation);\ncell_area.width = allocation.width;</p><p>valid = gtk_tree_model_get_iter_first (model, &amp;iter);\nwhile (valid)\n  {\n    cell_area.height = get_cached_height_for_row (&amp;iter);</p><pre><code>gtk_cell_area_apply_attributes (area, model, &amp;amp;iter, FALSE, FALSE);\ngtk_cell_area_render (area, context, widget, cr,\n                      &amp;amp;cell_area, &amp;amp;cell_area, state_flags, FALSE);\n</code></pre><pre><code>cell_area.y += cell_area.height;\n</code></pre><pre><code>valid = gtk_tree_model_iter_next (model, &amp;amp;iter);\n</code></pre>\n<p>}\n]|</p><p>Note that the cached height in this example really depends on how\nthe layouting widget works. The layouting widget might decide to\ngive every row its minimum or natural height or, if the model content\nis expected to fit inside the layouting widget without scrolling, it\nwould make sense to calculate the allocation for each row at\n<span data-xref=\"Gtk.Widget-size-allocate\"/> time using <span data-xref=\"Gtk.distribute_natural_allocation\"/>.</p><h1>Handling Events and Driving Keyboard Focus</h1><p>Passing events to the area is as simple as handling events on any\nnormal widget and then passing them to the <span data-xref=\"Gtk.CellArea.event\"/>\nAPI as they come in. Usually <span data-xref=\"Gtk.CellArea\"/> is only interested in\nbutton events, however some customized derived areas can be implemented\nwho are interested in handling other events. Handling an event can\ntrigger the <span data-xref=\"Gtk.CellArea-focus-changed\"/> signal to fire; as well as\n<span data-xref=\"Gtk.CellArea-add-editable\"/> in the case that an editable cell was\nclicked and needs to start editing. You can call\n<span data-xref=\"Gtk.CellArea.stop_editing\"/> at any time to cancel any cell editing\nthat is currently in progress.</p><p>The <span data-xref=\"Gtk.CellArea\"/> drives keyboard focus from cell to cell in a way\nsimilar to <span data-xref=\"Gtk.Widget\"/>. For layouting widgets that support giving\nfocus to cells it\u2019s important to remember to pass <span data-xref=\"Gtk.CellRendererState\"/>.focused\nto the area functions for the row that has focus and to tell the\narea to paint the focus at render time.</p><p>Layouting widgets that accept focus on cells should implement the\n<span data-xref=\"Gtk.WidgetClass\"/>.focus() virtual method. The layouting widget is always\nresponsible for knowing where <span data-xref=\"Gtk.TreeModel\"/> rows are rendered inside\nthe widget, so at <span data-xref=\"Gtk.WidgetClass\"/>.focus() time the layouting widget\nshould use the <span data-xref=\"Gtk.CellArea\"/> methods to navigate focus inside the area\nand then observe the GtkDirectionType to pass the focus to adjacent\nrows and areas.</p><p>A basic example of how the <span data-xref=\"Gtk.WidgetClass\"/>.focus() virtual method\nshould be implemented:</p><p>|[&lt;!-- language=\"C\" --&gt;\nstatic gboolean\nfoo_focus (GtkWidget       <em>widget,\n           GtkDirectionType direction)\n{\n  Foo        </em>foo  = FOO (widget);\n  FooPrivate *priv = foo-&gt;priv;\n  gint        focus_row;\n  gboolean    have_focus = FALSE;</p><p>focus_row = priv-&gt;focus_row;</p><p>if (!gtk_widget_has_focus (widget))\n    gtk_widget_grab_focus (widget);</p><p>valid = gtk_tree_model_iter_nth_child (priv-&gt;model, &amp;iter, NULL, priv-&gt;focus_row);\n  while (valid)\n    {\n      gtk_cell_area_apply_attributes (priv-&gt;area, priv-&gt;model, &amp;iter, FALSE, FALSE);</p><pre><code>  if (gtk_cell_area_focus (priv-&amp;gt;area, direction))\n    {\n       priv-&amp;gt;focus_row = focus_row;\n       have_focus = TRUE;\n       break;\n    }\n  else\n    {\n      if (direction == GTK_DIR_RIGHT ||\n          direction == GTK_DIR_LEFT)\n        break;\n      else if (direction == GTK_DIR_UP ||\n               direction == GTK_DIR_TAB_BACKWARD)\n       {\n          if (focus_row == 0)\n            break;\n          else\n           {\n              focus_row--;\n              valid = gtk_tree_model_iter_nth_child (priv-&amp;gt;model, &amp;amp;iter, NULL, focus_row);\n           }\n        }\n      else\n        {\n          if (focus_row == last_row)\n            break;\n          else\n            {\n              focus_row++;\n              valid = gtk_tree_model_iter_next (priv-&amp;gt;model, &amp;amp;iter);\n            }\n        }\n    }\n}\nreturn have_focus;\n</code></pre>\n<p>}\n]|</p><p>Note that the layouting widget is responsible for matching the\nGtkDirectionType values to the way it lays out its cells.</p><h1>Cell Properties</h1><p>The <span data-xref=\"Gtk.CellArea\"/> introduces cell properties for #GtkCellRenderers\nin very much the same way that <span data-xref=\"Gtk.Container\"/> introduces\n[child properties][child-properties]\nfor #GtkWidgets. This provides some general interfaces for defining\nthe relationship cell areas have with their cells. For instance in a\n<span data-xref=\"Gtk.CellAreaBox\"/> a cell might \u201cexpand\u201d and receive extra space when\nthe area is allocated more than its full natural request, or a cell\nmight be configured to \u201calign\u201d with adjacent rows which were requested\nand rendered with the same <span data-xref=\"Gtk.CellAreaContext\"/>.</p><p>Use <span data-xref=\"Gtk.CellAreaClass.install_cell_property\"/> to install cell\nproperties for a cell area class and <span data-xref=\"Gtk.CellAreaClass.find_cell_property\"/>\nor <span data-xref=\"Gtk.CellAreaClass.list_cell_properties\"/> to get information about\nexisting cell properties.</p><p>To set the value of a cell property, use <span data-xref=\"Gtk.CellArea.cell_set_property\"/>,\n<span data-xref=\"Gtk.CellArea.cell_set\"/> or <span data-xref=\"Gtk.CellArea.cell_set_valist\"/>. To obtain\nthe value of a cell property, use <span data-xref=\"Gtk.CellArea.cell_get_property\"/>,\n<span data-xref=\"Gtk.CellArea.cell_get\"/> or <span data-xref=\"Gtk.CellArea.cell_get_valist\"/>.</p>",
            "kind": "class",
            "name": "CellArea"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.CellAreaBox\"/> renders cell renderers into a row or a column\ndepending on its <span data-xref=\"Gtk.Orientation\"/>.</p><p>GtkCellAreaBox uses a notion of packing. Packing\nrefers to adding cell renderers with reference to a particular position\nin a <span data-xref=\"Gtk.CellAreaBox\"/>. There are two reference positions: the\nstart and the end of the box.\nWhen the <span data-xref=\"Gtk.CellAreaBox\"/> is oriented in the <span data-xref=\"Gtk.Orientation\"/>.vertical\norientation, the start is defined as the top of the box and the end is\ndefined as the bottom. In the <span data-xref=\"Gtk.Orientation\"/>.horizontal orientation\nstart is defined as the left side and the end is defined as the right\nside.</p><p>Alignments of #GtkCellRenderers rendered in adjacent rows can be\nconfigured by configuring the <span data-xref=\"Gtk.CellAreaBox\"/> align child cell property\nwith <span data-xref=\"Gtk.CellArea.cell_set_property\"/> or by specifying the \"align\"\nargument to <span data-xref=\"Gtk.CellAreaBox.pack_start\"/> and <span data-xref=\"Gtk.CellAreaBox.pack_end\"/>.</p>",
            "kind": "class",
            "name": "CellAreaBox"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.CellAreaContext\"/> object is created by a given <span data-xref=\"Gtk.CellArea\"/>\nimplementation via its <span data-xref=\"Gtk.CellAreaClass\"/>.create_context() virtual\nmethod and is used to store cell sizes and alignments for a series of\n<span data-xref=\"Gtk.TreeModel\"/> rows that are requested and rendered in the same context.</p><p><span data-xref=\"Gtk.CellLayout\"/> widgets can create any number of contexts in which to\nrequest and render groups of data rows. However, it\u2019s important that the\nsame context which was used to request sizes for a given <span data-xref=\"Gtk.TreeModel\"/>\nrow also be used for the same row when calling other <span data-xref=\"Gtk.CellArea\"/> APIs\nsuch as <span data-xref=\"Gtk.CellArea.render\"/> and <span data-xref=\"Gtk.CellArea.event\"/>.</p>",
            "kind": "class",
            "name": "CellAreaContext"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.CellRenderer\"/> is a base class of a set of objects used for\nrendering a cell to a #cairo_t.  These objects are used primarily by\nthe <span data-xref=\"Gtk.TreeView\"/> widget, though they aren\u2019t tied to them in any\nspecific way.  It is worth noting that <span data-xref=\"Gtk.CellRenderer\"/> is not a\n<span data-xref=\"Gtk.Widget\"/> and cannot be treated as such.</p><p>The primary use of a <span data-xref=\"Gtk.CellRenderer\"/> is for drawing a certain graphical\nelements on a #cairo_t. Typically, one cell renderer is used to\ndraw many cells on the screen.  To this extent, it isn\u2019t expected that a\nCellRenderer keep any permanent state around.  Instead, any state is set\njust prior to use using #GObjects property system.  Then, the\ncell is measured using <span data-xref=\"Gtk.CellRenderer.get_size\"/>. Finally, the cell\nis rendered in the correct location using <span data-xref=\"Gtk.CellRenderer.render\"/>.</p><p>There are a number of rules that must be followed when writing a new\n<span data-xref=\"Gtk.CellRenderer\"/>.  First and foremost, it\u2019s important that a certain set\nof properties will always yield a cell renderer of the same size,\nbarring a <span data-xref=\"Gtk.Style\"/> change.  The <span data-xref=\"Gtk.CellRenderer\"/> also has a number of\ngeneric properties that are expected to be honored by all children.</p><p>Beyond merely rendering a cell, cell renderers can optionally\nprovide active user interface elements. A cell renderer can be\n\u201cactivatable\u201d like <span data-xref=\"Gtk.CellRendererToggle\"/>,\nwhich toggles when it gets activated by a mouse click, or it can be\n\u201ceditable\u201d like <span data-xref=\"Gtk.CellRendererText\"/>, which\nallows the user to edit the text using a <span data-xref=\"Gtk.Entry\"/>.\nTo make a cell renderer activatable or editable, you have to\nimplement the <span data-xref=\"Gtk.CellRendererClass\"/>.activate or\n<span data-xref=\"Gtk.CellRendererClass\"/>.start_editing virtual functions, respectively.</p><p>Many properties of <span data-xref=\"Gtk.CellRenderer\"/> and its subclasses have a\ncorresponding \u201cset\u201d property, e.g. \u201ccell-background-set\u201d corresponds\nto \u201ccell-background\u201d. These \u201cset\u201d properties reflect whether a property\nhas been set or not. You should not set them independently.</p>",
            "kind": "class",
            "name": "CellRenderer"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.CellRendererAccel\"/> displays a keyboard accelerator (i.e. a\nkey combination like <code>Control + a</code>.\nIf the cell renderer is editable, the accelerator can be changed by\nsimply typing the new combination.</p><p>The <span data-xref=\"Gtk.CellRendererAccel\"/> cell renderer was added in GTK+ 2.10.</p>",
            "kind": "class",
            "name": "CellRendererAccel"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.CellRendererCombo\"/> renders text in a cell like <span data-xref=\"Gtk.CellRendererText\"/> from\nwhich it is derived. But while <span data-xref=\"Gtk.CellRendererText\"/> offers a simple entry to\nedit the text, <span data-xref=\"Gtk.CellRendererCombo\"/> offers a <span data-xref=\"Gtk.ComboBox\"/>\nwidget to edit the text. The values to display in the combo box are taken from\nthe tree model specified in the <span data-xref=\"Gtk.CellRendererCombo-model\"/> property.</p><p>The combo cell renderer takes care of adding a text cell renderer to the combo\nbox and sets it to display the column specified by its\n<span data-xref=\"Gtk.CellRendererCombo-text-column\"/> property. Further properties of the combo box\ncan be set in a handler for the <span data-xref=\"Gtk.CellRenderer-editing-started\"/> signal.</p><p>The <span data-xref=\"Gtk.CellRendererCombo\"/> cell renderer was added in GTK+ 2.6.</p>",
            "kind": "class",
            "name": "CellRendererCombo"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.CellRendererPixbuf\"/> can be used to render an image in a cell. It allows\nto render either a given <span data-xref=\"GdkPixbuf.Pixbuf\">GdkPixbuf.Pixbuf</span> (set via the\n<span data-xref=\"Gtk.CellRendererPixbuf-pixbuf\"/> property) or a named icon (set via the\n<span data-xref=\"Gtk.CellRendererPixbuf-icon-name\"/> property).</p><p>To support the tree view, <span data-xref=\"Gtk.CellRendererPixbuf\"/> also supports rendering two\nalternative pixbufs, when the <span data-xref=\"Gtk.CellRenderer-is-expander\"/> property is <code>true</code>.\nIf the <span data-xref=\"Gtk.CellRenderer-is-expanded\"/> property is <code>true</code> and the\n<span data-xref=\"Gtk.CellRendererPixbuf-pixbuf-expander-open\"/> property is set to a pixbuf, it\nrenders that pixbuf, if the <span data-xref=\"Gtk.CellRenderer-is-expanded\"/> property is <code>false</code>\nand the <span data-xref=\"Gtk.CellRendererPixbuf-pixbuf-expander-closed\"/> property is set to a\npixbuf, it renders that one.</p>",
            "kind": "class",
            "name": "CellRendererPixbuf"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.CellRendererProgress\"/> renders a numeric value as a progress par in a cell.\nAdditionally, it can display a text on top of the progress bar.</p><p>The <span data-xref=\"Gtk.CellRendererProgress\"/> cell renderer was added in GTK+ 2.6.</p>",
            "kind": "class",
            "name": "CellRendererProgress"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.CellRendererSpin\"/> renders text in a cell like <span data-xref=\"Gtk.CellRendererText\"/> from\nwhich it is derived. But while <span data-xref=\"Gtk.CellRendererText\"/> offers a simple entry to\nedit the text, <span data-xref=\"Gtk.CellRendererSpin\"/> offers a <span data-xref=\"Gtk.SpinButton\"/> widget. Of course,\nthat means that the text has to be parseable as a floating point number.</p><p>The range of the spinbutton is taken from the adjustment property of the\ncell renderer, which can be set explicitly or mapped to a column in the\ntree model, like all properties of cell renders. <span data-xref=\"Gtk.CellRendererSpin\"/>\nalso has properties for the <span data-xref=\"Gtk.CellRendererSpin-climb-rate\"/> and the number\nof <span data-xref=\"Gtk.CellRendererSpin-digits\"/> to display. Other <span data-xref=\"Gtk.SpinButton\"/> properties\ncan be set in a handler for the <span data-xref=\"Gtk.CellRenderer-editing-started\"/> signal.</p><p>The <span data-xref=\"Gtk.CellRendererSpin\"/> cell renderer was added in GTK+ 2.10.</p>",
            "kind": "class",
            "name": "CellRendererSpin"
        },
        {
            "doc": "<p>GtkCellRendererSpinner renders a spinning animation in a cell, very\nsimilar to <span data-xref=\"Gtk.Spinner\"/>. It can often be used as an alternative\nto a <span data-xref=\"Gtk.CellRendererProgress\"/> for displaying indefinite activity,\ninstead of actual progress.</p><p>To start the animation in a cell, set the <span data-xref=\"Gtk.CellRendererSpinner-active\"/>\nproperty to <code>true</code> and increment the <span data-xref=\"Gtk.CellRendererSpinner-pulse\"/> property\nat regular intervals. The usual way to set the cell renderer properties\nfor each cell is to bind them to columns in your tree model using e.g.\n<span data-xref=\"Gtk.TreeViewColumn.add_attribute\"/>.</p>",
            "kind": "class",
            "name": "CellRendererSpinner"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.CellRendererText\"/> renders a given text in its cell, using the font, color and\nstyle information provided by its properties. The text will be ellipsized if it is\ntoo long and the <span data-xref=\"Gtk.CellRendererText-ellipsize\"/> property allows it.</p><p>If the <span data-xref=\"Gtk.CellRenderer-mode\"/> is <span data-xref=\"Gtk.CellRendererMode\"/>.editable,\nthe <span data-xref=\"Gtk.CellRendererText\"/> allows to edit its text using an entry.</p>",
            "kind": "class",
            "name": "CellRendererText"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.CellRendererToggle\"/> renders a toggle button in a cell. The\nbutton is drawn as a radio or a checkbutton, depending on the\n<span data-xref=\"Gtk.CellRendererToggle-radio\"/> property.\nWhen activated, it emits the <span data-xref=\"Gtk.CellRendererToggle-toggled\"/> signal.</p>",
            "kind": "class",
            "name": "CellRendererToggle"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.CellView\"/> displays a single row of a <span data-xref=\"Gtk.TreeModel\"/> using a <span data-xref=\"Gtk.CellArea\"/>\nand <span data-xref=\"Gtk.CellAreaContext\"/>. A <span data-xref=\"Gtk.CellAreaContext\"/> can be provided to the\n<span data-xref=\"Gtk.CellView\"/> at construction time in order to keep the cellview in context\nof a group of cell views, this ensures that the renderers displayed will\nbe properly aligned with eachother (like the aligned cells in the menus\nof <span data-xref=\"Gtk.ComboBox\"/>).</p><p><span data-xref=\"Gtk.CellView\"/> is <span data-xref=\"Gtk.Orientable\"/> in order to decide in which orientation\nthe underlying <span data-xref=\"Gtk.CellAreaContext\"/> should be allocated. Taking the <span data-xref=\"Gtk.ComboBox\"/>\nmenu as an example, cellviews should be oriented horizontally if the menus are\nlisted top-to-bottom and thus all share the same width but may have separate\nindividual heights (left-to-right menus should be allocated vertically since\nthey all share the same height but may have variable widths).</p>",
            "kind": "class",
            "name": "CellView"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.CheckButton\"/> places a discrete <span data-xref=\"Gtk.ToggleButton\"/> next to a widget,\n(usually a <span data-xref=\"Gtk.Label\"/>). See the section on <span data-xref=\"Gtk.ToggleButton\"/> widgets for\nmore information about toggle/check buttons.</p><p>The important signal ( <span data-xref=\"Gtk.ToggleButton-toggled\"/> ) is also inherited from\n<span data-xref=\"Gtk.ToggleButton\"/>.</p>",
            "kind": "class",
            "name": "CheckButton"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.CheckMenuItem\"/> is a menu item that maintains the state of a boolean\nvalue in addition to a <span data-xref=\"Gtk.MenuItem\"/> usual role in activating application\ncode.</p><p>A check box indicating the state of the boolean value is displayed\nat the left side of the <span data-xref=\"Gtk.MenuItem\"/>.  Activating the <span data-xref=\"Gtk.MenuItem\"/>\ntoggles the value.</p>",
            "kind": "class",
            "name": "CheckMenuItem"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.Clipboard\"/> object represents a clipboard of data shared\nbetween different processes or between different widgets in\nthe same process. Each clipboard is identified by a name encoded as a\n<span data-xref=\"Gdk.Atom\">Gdk.Atom</span>. (Conversion to and from strings can be done with\n<span data-xref=\"Gdk.atom_intern\">Gdk.atom_intern</span> and <span data-xref=\"Gdk.Atom.name\">Gdk.Atom.prototype.name</span>.) The default clipboard\ncorresponds to the \u201cCLIPBOARD\u201d atom; another commonly used clipboard\nis the \u201cPRIMARY\u201d clipboard, which, in X, traditionally contains\nthe currently selected text.</p><p>To support having a number of different formats on the clipboard\nat the same time, the clipboard mechanism allows providing\ncallbacks instead of the actual data.  When you set the contents\nof the clipboard, you can either supply the data directly (via\nfunctions like <span data-xref=\"Gtk.Clipboard.set_text\"/>), or you can supply a\ncallback to be called at a later time when the data is needed (via\n<span data-xref=\"Gtk.Clipboard.set_with_data\"/> or <span data-xref=\"Gtk.Clipboard.set_with_owner\"/>.)\nProviding a callback also avoids having to make copies of the data\nwhen it is not needed.</p><p><span data-xref=\"Gtk.Clipboard.set_with_data\"/> and <span data-xref=\"Gtk.Clipboard.set_with_owner\"/>\nare quite similar; the choice between the two depends mostly on\nwhich is more convenient in a particular situation.\nThe former is most useful when you want to have a blob of data\nwith callbacks to convert it into the various data types that you\nadvertise. When the @clear_func you provided is called, you\nsimply free the data blob. The latter is more useful when the\ncontents of clipboard reflect the internal state of a <span data-xref=\"GObject.Object\">GObject.Object</span>\n(As an example, for the PRIMARY clipboard, when an entry widget\nprovides the clipboard\u2019s contents the contents are simply the\ntext within the selected region.) If the contents change, the\nentry widget can call <span data-xref=\"Gtk.Clipboard.set_with_owner\"/> to update\nthe timestamp for clipboard ownership, without having to worry\nabout @clear_func being called.</p><p>Requesting the data from the clipboard is essentially\nasynchronous. If the contents of the clipboard are provided within\nthe same process, then a direct function call will be made to\nretrieve the data, but if they are provided by another process,\nthen the data needs to be retrieved from the other process, which\nmay take some time. To avoid blocking the user interface, the call\nto request the selection, <span data-xref=\"Gtk.Clipboard.request_contents\"/> takes a\ncallback that will be called when the contents are received (or\nwhen the request fails.) If you don\u2019t want to deal with providing\na separate callback, you can also use <span data-xref=\"Gtk.Clipboard.wait_for_contents\"/>.\nWhat this does is run the GLib main loop recursively waiting for\nthe contents. This can simplify the code flow, but you still have\nto be aware that other callbacks in your program can be called\nwhile this recursive mainloop is running.</p><p>Along with the functions to get the clipboard contents as an\narbitrary data chunk, there are also functions to retrieve\nit as text, <span data-xref=\"Gtk.Clipboard.request_text\"/> and\n<span data-xref=\"Gtk.Clipboard.wait_for_text\"/>. These functions take care of\ndetermining which formats are advertised by the clipboard\nprovider, asking for the clipboard in the best available format\nand converting the results into the UTF-8 encoding. (The standard\nform for representing strings in GTK+.)</p>",
            "kind": "class",
            "name": "Clipboard"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.ColorButton\"/> is a button which displays the currently selected\ncolor an allows to open a color selection dialog to change the color.\nIt is suitable widget for selecting a color in a preference dialog.</p>",
            "kind": "class",
            "name": "ColorButton"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.ColorChooserDialog\"/> widget is a dialog for choosing\na color. It implements the <span data-xref=\"Gtk.ColorChooser\"/> interface.</p>",
            "kind": "class",
            "name": "ColorChooserDialog"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.ColorChooserWidget\"/> widget lets the user select a\ncolor. By default, the chooser presents a prefined palette\nof colors, plus a small number of settable custom colors.\nIt is also possible to select a different color with the\nsingle-color editor. To enter the single-color editing mode,\nuse the context menu of any color of the palette, or use the\n'+' button to add a new custom color.</p><p>The chooser automatically remembers the last selection, as well\nas custom colors.</p><p>To change the initially selected color, use <span data-xref=\"Gtk.ColorChooser.set_rgba\"/>.\nTo get the selected font use <span data-xref=\"Gtk.ColorChooser.get_rgba\"/>.</p><p>The <span data-xref=\"Gtk.ColorChooserWidget\"/> is used in the <span data-xref=\"Gtk.ColorChooserDialog\"/>\nto provide a dialog for selecting colors.</p>",
            "kind": "class",
            "name": "ColorChooserWidget"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ColorSelection"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ColorSelectionDialog"
        },
        {
            "doc": "<p>A GtkComboBox is a widget that allows the user to choose from a list of\nvalid choices. The GtkComboBox displays the selected choice. When\nactivated, the GtkComboBox displays a popup which allows the user to\nmake a new choice. The style in which the selected value is displayed,\nand the style of the popup is determined by the current theme. It may\nbe similar to a Windows-style combo box.</p><p>The GtkComboBox uses the model-view pattern; the list of valid choices\nis specified in the form of a tree model, and the display of the choices\ncan be adapted to the data in the model by using cell renderers, as you\nwould in a tree view. This is possible since GtkComboBox implements the\n<span data-xref=\"Gtk.CellLayout\"/> interface. The tree model holding the valid choices is\nnot restricted to a flat list, it can be a real tree, and the popup will\nreflect the tree structure.</p><p>To allow the user to enter values not in the model, the \u201chas-entry\u201d\nproperty allows the GtkComboBox to contain a <span data-xref=\"Gtk.Entry\"/>. This entry\ncan be accessed by calling <span data-xref=\"Gtk.Bin.get_child\"/> on the combo box.</p><p>For a simple list of textual choices, the model-view API of GtkComboBox\ncan be a bit overwhelming. In this case, <span data-xref=\"Gtk.ComboBoxText\"/> offers a\nsimple alternative. Both GtkComboBox and <span data-xref=\"Gtk.ComboBoxText\"/> can contain\nan entry.</p>",
            "kind": "class",
            "name": "ComboBox"
        },
        {
            "doc": "<p>A GtkComboBoxText is a simple variant of <span data-xref=\"Gtk.ComboBox\"/> that hides\nthe model-view complexity for simple text-only use cases.</p><p>To create a GtkComboBoxText, use <span data-xref=\"Gtk.ComboBoxText.new\"/> or\n<span data-xref=\"Gtk.ComboBoxText.new_with_entry\"/>.</p><p>You can add items to a GtkComboBoxText with\n<span data-xref=\"Gtk.ComboBoxText.append_text\"/>, <span data-xref=\"Gtk.ComboBoxText.insert_text\"/>\nor <span data-xref=\"Gtk.ComboBoxText.prepend_text\"/> and remove options with\n<span data-xref=\"Gtk.ComboBoxText.remove\"/>.</p><p>If the GtkComboBoxText contains an entry (via the \u201chas-entry\u201d property),\nits contents can be retrieved using <span data-xref=\"Gtk.ComboBoxText.get_active_text\"/>.\nThe entry itself can be accessed by calling <span data-xref=\"Gtk.Bin.get_child\"/> on the\ncombo box.</p><p>You should not call <span data-xref=\"Gtk.ComboBox.set_model\"/> or attempt to pack more cells\ninto this combo box via its GtkCellLayout interface.</p><h1>GtkComboBoxText as GtkBuildable</h1><p>The GtkComboBoxText implementation of the GtkBuildable interface supports\nadding items directly using the &lt;items&gt; element and specifying &lt;item&gt;\nelements for each item. Each &lt;item&gt; element can specify the \u201cid\u201d\ncorresponding to the appended text and also supports the regular\ntranslation attributes \u201ctranslatable\u201d, \u201ccontext\u201d and \u201ccomments\u201d.</p><p>Here is a UI definition fragment specifying GtkComboBoxText items:\n|[\n&lt;object class=\"GtkComboBoxText\"&gt;\n  &lt;items&gt;\n    &lt;item translatable=\"yes\" id=\"factory\"&gt;Factory&lt;/item&gt;\n    &lt;item translatable=\"yes\" id=\"home\"&gt;Home&lt;/item&gt;\n    &lt;item translatable=\"yes\" id=\"subway\"&gt;Subway&lt;/item&gt;\n  &lt;/items&gt;\n&lt;/object&gt;\n]|</p>",
            "kind": "class",
            "name": "ComboBoxText"
        },
        {
            "doc": "<p>A GTK+ user interface is constructed by nesting widgets inside widgets.\nContainer widgets are the inner nodes in the resulting tree of widgets:\nthey contain other widgets. So, for example, you might have a <span data-xref=\"Gtk.Window\"/>\ncontaining a <span data-xref=\"Gtk.Frame\"/> containing a <span data-xref=\"Gtk.Label\"/>. If you wanted an image instead\nof a textual label inside the frame, you might replace the <span data-xref=\"Gtk.Label\"/> widget\nwith a <span data-xref=\"Gtk.Image\"/> widget.</p><p>There are two major kinds of container widgets in GTK+. Both are subclasses\nof the abstract GtkContainer base class.</p><p>The first type of container widget has a single child widget and derives\nfrom <span data-xref=\"Gtk.Bin\"/>. These containers are decorators, which\nadd some kind of functionality to the child. For example, a <span data-xref=\"Gtk.Button\"/> makes\nits child into a clickable button; a <span data-xref=\"Gtk.Frame\"/> draws a frame around its child\nand a <span data-xref=\"Gtk.Window\"/> places its child widget inside a top-level window.</p><p>The second type of container can have more than one child; its purpose is to\nmanage layout. This means that these containers assign\nsizes and positions to their children. For example, a <span data-xref=\"Gtk.HBox\"/> arranges its\nchildren in a horizontal row, and a <span data-xref=\"Gtk.Grid\"/> arranges the widgets it contains\nin a two-dimensional grid.</p><h1>Height for width geometry management</h1><p>GTK+ uses a height-for-width (and width-for-height) geometry management system.\nHeight-for-width means that a widget can change how much vertical space it needs,\ndepending on the amount of horizontal space that it is given (and similar for\nwidth-for-height).</p><p>There are some things to keep in mind when implementing container widgets\nthat make use of GTK+\u2019s height for width geometry management system. First,\nit\u2019s important to note that a container must prioritize one of its\ndimensions, that is to say that a widget or container can only have a\n<span data-xref=\"Gtk.SizeRequestMode\"/> that is <span data-xref=\"Gtk.SizeRequestMode\"/>.height_for_width or\n<span data-xref=\"Gtk.SizeRequestMode\"/>.width_for_height. However, every widget and container\nmust be able to respond to the APIs for both dimensions, i.e. even if a\nwidget has a request mode that is height-for-width, it is possible that\nits parent will request its sizes using the width-for-height APIs.</p><p>To ensure that everything works properly, here are some guidelines to follow\nwhen implementing height-for-width (or width-for-height) containers.</p><p>Each request mode involves 2 virtual methods. Height-for-width apis run\nthrough <span data-xref=\"Gtk.Widget.get_preferred_width\"/> and then through <span data-xref=\"Gtk.Widget.get_preferred_height_for_width\"/>.\nWhen handling requests in the opposite <span data-xref=\"Gtk.SizeRequestMode\"/> it is important that\nevery widget request at least enough space to display all of its content at all times.</p><p>When <span data-xref=\"Gtk.Widget.get_preferred_height\"/> is called on a container that is height-for-width,\nthe container must return the height for its minimum width. This is easily achieved by\nsimply calling the reverse apis implemented for itself as follows:</p><p>|[&lt;!-- language=\"C\" --&gt;\nstatic void\nfoo_container_get_preferred_height (GtkWidget <em>widget,\n                                    gint </em>min_height,\n                                    gint *nat_height)\n{\n   if (i_am_in_height_for_width_mode)\n     {\n       gint min_width;</p><pre><code>   GTK_WIDGET_GET_CLASS (widget)-&amp;gt;get_preferred_width (widget,\n                                                       &amp;amp;min_width,\n                                                       NULL);\n   GTK_WIDGET_GET_CLASS (widget)-&amp;gt;get_preferred_height_for_width\n                                                      (widget,\n                                                       min_width,\n                                                       min_height,\n                                                       nat_height);\n }\n</code></pre>\n<p>else\n     {\n       ... many containers support both request modes, execute the\n       real width-for-height request here by returning the\n       collective heights of all widgets that are stacked\n       vertically (or whatever is appropriate for this container)\n       ...\n     }\n}\n]|</p><p>Similarly, when <span data-xref=\"Gtk.Widget.get_preferred_width_for_height\"/> is called for a container or widget\nthat is height-for-width, it then only needs to return the base minimum width like so:</p><p>|[&lt;!-- language=\"C\" --&gt;\nstatic void\nfoo_container_get_preferred_width_for_height (GtkWidget <em>widget,\n                                              gint for_height,\n                                              gint </em>min_width,\n                                              gint *nat_width)\n{\n   if (i_am_in_height_for_width_mode)\n     {\n       GTK_WIDGET_GET_CLASS (widget)-&gt;get_preferred_width (widget,\n                                                           min_width,\n                                                           nat_width);\n     }\n   else\n     {\n       ... execute the real width-for-height request here based on\n       the required width of the children collectively if the\n       container were to be allocated the said height ...\n     }\n}\n]|</p><p>Height for width requests are generally implemented in terms of a virtual allocation\nof widgets in the input orientation. Assuming an height-for-width request mode, a container\nwould implement the get_preferred_height_for_width() virtual function by first calling\n<span data-xref=\"Gtk.Widget.get_preferred_width\"/> for each of its children.</p><p>For each potential group of children that are lined up horizontally, the values returned by\n<span data-xref=\"Gtk.Widget.get_preferred_width\"/> should be collected in an array of <span data-xref=\"Gtk.RequestedSize\"/> structures.\nAny child spacing should be removed from the input @for_width and then the collective size should be\nallocated using the <span data-xref=\"Gtk.distribute_natural_allocation\"/> convenience function.</p><p>The container will then move on to request the preferred height for each child by using\n<span data-xref=\"Gtk.Widget.get_preferred_height_for_width\"/> and using the sizes stored in the <span data-xref=\"Gtk.RequestedSize\"/> array.</p><p>To allocate a height-for-width container, it\u2019s again important\nto consider that a container must prioritize one dimension over the other. So if\na container is a height-for-width container it must first allocate all widgets horizontally\nusing a <span data-xref=\"Gtk.RequestedSize\"/> array and <span data-xref=\"Gtk.distribute_natural_allocation\"/> and then add any\nextra space (if and where appropriate) for the widget to expand.</p><p>After adding all the expand space, the container assumes it was allocated sufficient\nheight to fit all of its content. At this time, the container must use the total horizontal sizes\nof each widget to request the height-for-width of each of its children and store the requests in a\n<span data-xref=\"Gtk.RequestedSize\"/> array for any widgets that stack vertically (for tabular containers this can\nbe generalized into the heights and widths of rows and columns).\nThe vertical space must then again be distributed using <span data-xref=\"Gtk.distribute_natural_allocation\"/>\nwhile this time considering the allocated height of the widget minus any vertical spacing\nthat the container adds. Then vertical expand space should be added where appropriate and available\nand the container should go on to actually allocating the child widgets.</p><p>See [GtkWidget\u2019s geometry management section][geometry-management]\nto learn more about implementing height-for-width geometry management for widgets.</p><h1>Child properties</h1><p>GtkContainer introduces child properties.\nThese are object properties that are not specific\nto either the container or the contained widget, but rather to their relation.\nTypical examples of child properties are the position or pack-type of a widget\nwhich is contained in a <span data-xref=\"Gtk.Box\"/>.</p><p>Use <span data-xref=\"Gtk.ContainerClass.install_child_property\"/> to install child properties\nfor a container class and <span data-xref=\"Gtk.ContainerClass.find_child_property\"/> or\n<span data-xref=\"Gtk.ContainerClass.list_child_properties\"/> to get information about existing\nchild properties.</p><p>To set the value of a child property, use <span data-xref=\"Gtk.Container.child_set_property\"/>,\n<span data-xref=\"Gtk.Container.child_set\"/> or <span data-xref=\"Gtk.Container.child_set_valist\"/>.\nTo obtain the value of a child property, use\n<span data-xref=\"Gtk.Container.child_get_property\"/>, <span data-xref=\"Gtk.Container.child_get\"/> or\n<span data-xref=\"Gtk.Container.child_get_valist\"/>. To emit notification about child property\nchanges, use <span data-xref=\"Gtk.Widget.child_notify\"/>.</p><h1>GtkContainer as GtkBuildable</h1><p>The GtkContainer implementation of the GtkBuildable interface supports\na &lt;packing&gt; element for children, which can contain multiple &lt;property&gt;\nelements that specify child properties for the child.</p><p>An example of child properties in UI definitions:\n|[\n&lt;object class=\"GtkVBox\"&gt;\n  &lt;child&gt;\n    &lt;object class=\"GtkLabel\"/&gt;\n    &lt;packing&gt;\n      &lt;property name=\"pack-type\"&gt;start&lt;/property&gt;\n    &lt;/packing&gt;\n  &lt;/child&gt;\n&lt;/object&gt;\n]|</p><p>Since 2.16, child properties can also be marked as translatable using\nthe same \u201ctranslatable\u201d, \u201ccomments\u201d and \u201ccontext\u201d attributes that are used\nfor regular properties.</p>",
            "kind": "class",
            "name": "Container"
        },
        {
            "doc": "<p>GtkCssProvider is an object implementing the <span data-xref=\"Gtk.StyleProvider\"/> interface.\nIt is able to parse <a href=\"http://www.w3.org/TR/CSS2\">CSS-like</a>\ninput in order to style widgets.</p><h2>Default files</h2><p>An application can cause GTK+ to parse a specific CSS style sheet by\ncalling <span data-xref=\"Gtk.CssProvider.load_from_file\"/> and adding the provider with\n<span data-xref=\"Gtk.StyleContext.add_provider\"/> or <span data-xref=\"Gtk.StyleContext.add_provider_for_screen\"/>.\nIn addition, certain files will be read when GTK+ is initialized. First,\nthe file <code>$XDG_CONFIG_HOME/gtk-3.0/gtk.css</code>\nis loaded if it exists. Then, GTK+ tries to load\n<code>$HOME/.themes/theme-name/gtk-3.0/gtk.css</code>,\nfalling back to\n<code>datadir/share/themes/theme-name/gtk-3.0/gtk.css</code>,\nwhere theme-name is the name of the current theme\n(see the <span data-xref=\"Gtk.Settings-gtk-theme-name\"/> setting) and datadir\nis the prefix configured when GTK+ was compiled, unless overridden by the\n<code>GTK_DATA_PREFIX</code> environment variable.</p><h1>Style sheets</h1><p>The basic structure of the style sheets understood by this provider is\na series of statements, which are either rule sets or \u201c@-rules\u201d, separated\nby whitespace.</p><p>A rule set consists of a selector and a declaration block, which is\na series of declarations enclosed in curly braces ({ and }). The\ndeclarations are separated by semicolons (;). Multiple selectors can\nshare the same declaration block, by putting all the separators in\nfront of the block, separated by commas.</p><p>An example of a rule set with two selectors:\n|[\nGtkButton, GtkEntry {\n    color: #ff00ea;\n    font: Comic Sans 12\n}\n]|</p><h1>Selectors # {#gtkcssprovider-selectors}</h1><p>Selectors work very similar to the way they do in CSS, with widget class\nnames taking the role of element names, and widget names taking the role\nof IDs. When used in a selector, widget names must be prefixed with a\n'#' character. The \u201c*\u201d character represents the so-called universal\nselector, which matches any widget.</p><p>To express more complicated situations, selectors can be combined in\nvarious ways:\n- To require that a widget satisfies several conditions,\n  combine several selectors into one by concatenating them. E.g.\n  <code>GtkButton#button1</code> matches a GtkButton widget\n  with the name button1.\n- To only match a widget when it occurs inside some other\n  widget, write the two selectors after each other, separated by whitespace.\n  E.g. <code>GtkToolBar GtkButton</code> matches GtkButton widgets\n  that occur inside a GtkToolBar.\n- In the previous example, the GtkButton is matched even\n  if it occurs deeply nested inside the toolbar. To restrict the match\n  to direct children of the parent widget, insert a \u201c&gt;\u201d character between\n  the two selectors. E.g. <code>GtkNotebook &amp;gt; GtkLabel</code> matches\n  GtkLabel widgets that are direct children of a GtkNotebook.</p><h2>Examples of widget classes and names in selectors</h2><p>Theme labels that are descendants of a window:\n|[\nGtkWindow GtkLabel {\n    background-color: #898989\n}\n]|</p><p>Theme notebooks, and anything that\u2019s within these:\n|[\nGtkNotebook {\n    background-color: #a939f0\n}\n]|</p><p>Theme combo boxes, and entries that are direct children of a notebook:\n|[\nGtkComboBox,\nGtkNotebook &gt; GtkEntry {\n    color: @fg_color;\n    background-color: #1209a2\n}\n]|</p><p>Theme any widget within a GtkBin:\n|[\nGtkBin * {\n    font: Sans 20\n}\n]|</p><p>Theme a label named title-label:\n|[\nGtkLabel#title-label {\n    font: Sans 15\n}\n]|</p><p>Theme any widget named main-entry:\n|[</p>\n<h1>main-entry {</h1>\n<pre><code>background-color: #f0a810\n</code></pre>\n<p>}\n]|</p><p>Widgets may also define style classes, which can be used for matching.\nWhen used in a selector, style classes must be prefixed with a \u201c.\u201d\ncharacter.</p><p>Refer to the documentation of individual widgets to learn which\nstyle classes they define and see\n[Style Classes and Regions][gtkstylecontext-classes]\nfor a list of all style classes used by GTK+ widgets.</p><p>Note that there is some ambiguity in the selector syntax when it comes\nto differentiation widget class names from regions. GTK+ currently treats\na string as a widget class name if it contains any uppercase characters\n(which should work for more widgets with names like GtkLabel).</p><h2>Examples for style classes in selectors</h2><p>Theme all widgets defining the class entry:\n|[\n.entry {\n    color: #39f1f9;\n}\n]|</p><p>Theme spinbuttons\u2019 entry:\n|[\nGtkSpinButton.entry {\n    color: #900185\n}\n]|</p><p>In complicated widgets like e.g. a GtkNotebook, it may be desirable\nto style different parts of the widget differently. To make this\npossible, container widgets may define regions, whose names\nmay be used for matching in selectors.</p><p>Some containers allow to further differentiate between regions by\napplying so-called pseudo-classes to the region. For example, the\ntab region in GtkNotebook allows to single out the first or last\ntab by using the :first-child or :last-child pseudo-class.\nWhen used in selectors, pseudo-classes must be prefixed with a\n':' character.</p><p>Refer to the documentation of individual widgets to learn which\nregions and pseudo-classes they define and see\n[Style Classes and Regions][gtkstylecontext-classes]\nfor a list of all regions\nused by GTK+ widgets.</p><h2>Examples for regions in selectors</h2><p>Theme any label within a notebook:\n|[\nGtkNotebook GtkLabel {\n    color: #f90192;\n}\n]|</p><p>Theme labels within notebook tabs:\n|[\nGtkNotebook tab GtkLabel {\n    color: #703910;\n}\n]|</p><p>Theme labels in the any first notebook tab, both selectors are\nequivalent:\n|[\nGtkNotebook tab:nth-child(first) GtkLabel,\nGtkNotebook tab:first-child GtkLabel {\n    color: #89d012;\n}\n]|</p><p>Another use of pseudo-classes is to match widgets depending on their\nstate. This is conceptually similar to the :hover, :active or :focus\npseudo-classes in CSS. The available pseudo-classes for widget states\nare :active, :prelight (or :hover), :insensitive, :selected, :focused\nand :inconsistent.</p><h2>Examples for styling specific widget states</h2><p>Theme active (pressed) buttons:\n|[\nGtkButton:active {\n    background-color: #0274d9;\n}\n]|</p><p>Theme buttons with the mouse pointer on it, both are equivalent:\n|[\nGtkButton:hover,\nGtkButton:prelight {\n    background-color: #3085a9;\n}\n]|</p><p>Theme insensitive widgets, both are equivalent:\n|[\n:insensitive,\n*:insensitive {\n    background-color: #320a91;\n}\n]|</p><p>Theme selection colors in entries:\n|[\nGtkEntry:selected {\n    background-color: #56f9a0;\n}\n]|</p><p>Theme focused labels:\n|[\nGtkLabel:focused {\n    background-color: #b4940f;\n}\n]|</p><p>Theme inconsistent checkbuttons:\n|[\nGtkCheckButton:inconsistent {\n    background-color: #20395a;\n}\n]|</p><p>Widget state pseudoclasses may only apply to the last element\nin a selector.</p><p>To determine the effective style for a widget, all the matching rule\nsets are merged. As in CSS, rules apply by specificity, so the rules\nwhose selectors more closely match a widget path will take precedence\nover the others.</p><h1>@ Rules</h1><p>GTK+\u2019s CSS supports the \\@import rule, in order to load another\nCSS style sheet in addition to the currently parsed one.</p><p>An example for using the \\@import rule:\n|[\n@import url (\"path/to/common.css\");\n]|</p><p>In order to extend key bindings affecting different widgets, GTK+\nsupports the \\@binding-set rule to parse a set of bind/unbind\ndirectives, see <span data-xref=\"Gtk.BindingSet\"/> for the supported syntax. Note that\nthe binding sets defined in this way must be associated with rule sets\nby setting the gtk-key-bindings style property.</p><p>Customized key bindings are typically defined in a separate\n<code>gtk-keys.css</code> CSS file and GTK+ loads this file\naccording to the current key theme, which is defined by the\n<span data-xref=\"Gtk.Settings-gtk-key-theme-name\"/> setting.</p><p>An example for using the \\@binding rule:\n|[\n@binding-set binding-set1 {\n  bind \"&lt;alt&gt;Left\" { \"move-cursor\" (visual-positions, -3, 0) };\n  unbind \"End\";\n};</p><p>@binding-set binding-set2 {\n  bind \"&lt;alt&gt;Right\" { \"move-cursor\" (visual-positions, 3, 0) };\n  bind \"&lt;alt&gt;KP_space\" { \"delete-from-cursor\" (whitespace, 1)\n                         \"insert-at-cursor\" (\" \") };\n};</p><p>GtkEntry {\n  gtk-key-bindings: binding-set1, binding-set2;\n}\n]|</p><p>GTK+ also supports an additional \\@define-color rule, in order\nto define a color name which may be used instead of color numeric\nrepresentations. Also see the <span data-xref=\"Gtk.Settings-gtk-color-scheme\"/> setting\nfor a way to override the values of these named colors.</p><p>An example for defining colors:\n|[\n@define-color bg_color #f9a039;</p><ul>\n<li>{\n    background-color: @bg_color;\n}\n]|</li>\n</ul><h1>Symbolic colors</h1><p>Besides being able to define color names, the CSS parser is also able\nto read different color expressions, which can also be nested, providing\na rich language to define colors which are derived from a set of base\ncolors.</p><p>An example for using symbolic colors:\n|[\n@define-color entry-color shade (@bg_color, 0.7);</p><p>GtkEntry {\n    background-color: @entry-color;\n}</p><p>GtkEntry:focused {\n    background-color: mix (@entry-color,\n                           shade (#fff, 0.5),\n                           0.8);\n}\n]|</p><h1>Specifying Colors # {#specifying-colors}</h1>\n<p>There are various ways to express colors in GTK+ CSS.</p><h2>rgb(r, g, b)</h2><p>An opaque color.</p><ul>\n<li><code>r</code>, <code>g</code>, <code>b</code> can be either integers between 0 and 255, or percentages.</li>\n</ul><p>|[\n  color: rgb(128, 10, 54);\n  background-color: rgb(20%, 30%, 0%);\n]|</p><h2>rgba(r, g, b, a)</h2><p>A translucent color.</p><ul>\n<li><code>r</code>, <code>g</code>, <code>b</code> can be either integers between 0 and 255, or percentages.</li>\n<li><code>a</code> is a floating point number between 0 and 1.</li>\n</ul><p>|[\n  color: rgb(128, 10, 54, 0.5);\n]|</p><h2>#xxyyzz</h2><p>An opaque color.</p><ul>\n<li><code>xx</code>, <code>yy</code>, <code>zz</code> are hexadecimal numbers specifying <code>r</code>, <code>g</code>, <code>b</code>\n  variants with between 1 and 4 hexadecimal digits per component.</li>\n</ul><p>|[\n  color: #f0c;\n  background-color: #ff00cc;\n  border-color: #ffff0000cccc;\n]|</p><h2>\\@name</h2><p>Reference to a color that has been defined with \\@define-color</p><p>|[\n  color: @bg_color;\n]|</p><h2>mix(color1, color2, factor)</h2><p>A linear combination of <code>color1</code> and <code>color2</code>.</p><ul>\n<li><code>factor</code> is a floating point number between 0 and 1.</li>\n</ul><p>|[\n  color: mix(#ff1e0a, @bg_color, 0.8);\n]|</p><h2>shade(color, factor)</h2><p>A lighter or darker variant of <code>color</code>.</p><ul>\n<li><code>factor</code> is a floating point number.</li>\n</ul><p>|[\n  color: shade(@fg_color, 0.5);\n]|</p><h2>lighter(color)</h2><p>A lighter variant of <code>color</code>.</p><p>|[\n  color: lighter(@fg_color);\n]|</p><h2>darker(color)</h2><p>A darker variant of <code>color</code>.</p><p>|[\n  color: darker(@bg_color);\n]|</p><h2>alpha(color, factor)</h2><p>Modifies passed color\u2019s alpha by a factor.</p><ul>\n<li><code>factor</code> is a floating point number. <code>factor</code> &lt; 1.0 results in a more\n  transparent color while <code>factor</code> &gt; 1.0 results in a more opaque color.</li>\n</ul><p>|[\n  color: alpha(@fg_color, 0.5);\n]|</p><h1>Gradients</h1><p>Linear or radial gradients can be used as background images.</p><h2>Linear Gradients</h2><p>A linear gradient along the line from (<code>start_x</code>, <code>start_y</code>) to\n(<code>end_x</code>, <code>end_y</code>) is specified using the following syntax:</p><p>&gt; <code>-gtk-gradient (linear, start_x start_y, end_x end_y, color-stop (position, color), ...)</code></p><ul>\n<li><code>start_x</code> and <code>end_x</code> can be either a floating point number between\n0 and 1, or one of the special values: \u201cleft\u201d, \u201cright\u201d, or \u201ccenter\u201d.</li>\n<li><code>start_y</code> and <code>end_y</code> can be either a floating point number between 0 and 1, or one\nof the special values: \u201ctop\u201d, \u201cbottom\u201d or \u201ccenter\u201d.</li>\n<li><code>position</code> is a floating point number between 0 and 1.</li>\n<li><code>color</code> is a color expression (see above).</li>\n</ul><p>The color-stop can be repeated multiple times to add more than one color\nstop. \u201cfrom (color)\u201d and \u201cto (color)\u201d can be used as abbreviations for\ncolor stops with position 0 and 1, respectively.</p><h2>Example: Linear Gradient</h2>\n<p><img alt=\"\" src=\"gradient1.png\" />\n|[\n-gtk-gradient (linear,\n               left top, right bottom,\n               from(@yellow), to(@blue));\n]|</p><h2>Example: Linear Gradient 2</h2>\n<p><img alt=\"\" src=\"gradient2.png\" />\n|[\n-gtk-gradient (linear,\n               0 0, 0 1,\n               color-stop(0, @yellow),\n               color-stop(0.2, @blue),\n               color-stop(1, #0f0))\n]|</p><h2>Radial Gradients</h2><p>A radial gradient along the two circles defined by (<code>start_x</code>,\n<code>start_y</code>, <code>start_radius</code>) and (<code>end_x</code>, <code>end_y</code>, <code>end_radius</code>) is\nspecified using the following syntax:</p><p>&gt; <code>-gtk-gradient (radial, start_x start_y, start_radius, end_x end_y, end_radius, color-stop (position, color), ...)</code></p><p>where <code>start_radius</code> and <code>end_radius</code> are floating point numbers\nand the other parameters are as before.</p><h2>Example: Radial Gradient</h2>\n<p><img alt=\"\" src=\"gradient3.png\" />\n|[\n-gtk-gradient (radial,\n               center center, 0,\n               center center, 1,\n               from(@yellow), to(@green))\n]|</p><h2>Example: Radial Gradient 2</h2>\n<p><img alt=\"\" src=\"gradient4.png\" />\n|[\n-gtk-gradient (radial,\n               0.4 0.4, 0.1,\n               0.6 0.6, 0.7,\n               color-stop (0, #f00),\n               color-stop (0.1, #a0f),\n               color-stop (0.2, @yellow),\n               color-stop (1, @green))\n]|</p><h1>Border images # {#border-images}</h1><p>Images and gradients can also be used in slices for the purpose of creating\nscalable borders.\nFor more information, see the <a href=\"http://www.w3.org/TR/css3-background/#border-images\">CSS3 documentation for the border-image property</a>.</p><p><img alt=\"\" src=\"slices.png\" /></p><p>The parameters of the slicing process are controlled by four\nseparate properties.</p><ul>\n<li>Image Source</li>\n<li>Image Slice</li>\n<li>Image Width</li>\n<li>Image Repeat</li>\n</ul><p>Note that you can use the <code>border-image</code> shorthand property to set\nvalues for the properties at the same time.</p><h2>Image Source</h2><p>The border image source can be specified either as a\nURL or a gradient:\n|[\n  border-image-source: url(path);\n]|\nor\n|[\n  border-image-source: -gtk-gradient(...);\n]|</p><h2>Image Slice</h2><p>|[\n  border-image-slice: top right bottom left;\n]|</p><p>The sizes specified by the <code>top</code>, <code>right</code>, <code>bottom</code>, and <code>left</code> parameters\nare the offsets (in pixels) from the relevant edge where the image\nshould be \u201ccut off\u201d to build the slices used for the rendering\nof the border.</p><h2>Image Width</h2><p>|[\n  border-image-width: top right bottom left;\n]|</p><p>The sizes specified by the @top, @right, @bottom and @left parameters\nare inward distances from the border box edge, used to specify the\nrendered size of each slice determined by border-image-slice.\nIf this property is not specified, the values of border-width will\nbe used as a fallback.</p><h2>Image Repeat</h2><p>Specifies how the image slices should be rendered in the area\noutlined by border-width.</p><p>|[\n  border-image-repeat: [stretch|repeat|round|space];\n]|\nor\n|[\n  border-image-repeat: [stretch|repeat|round|space] [stretch|repeat|round|space];\n]|</p><ul>\n<li>The default (stretch) is to resize the slice to fill in the\nwhole allocated area.</li>\n</ul><ul>\n<li>If the value of this property is \u201crepeat\u201d, the image slice will\nbe tiled to fill the area.</li>\n</ul><ul>\n<li>If the value of this property is \u201cround\u201d, the image slice will be\ntiled to fill the area, and scaled to fit it exactly a whole number\nof times.</li>\n</ul><ul>\n<li>If the value of this property is \u201cspace\u201d, the image slice will be\ntiled to fill the area, and if it doesn\u2019t fit it exactly a whole\nnumber of times, the extra space is distributed as padding around\nthe slices.</li>\n</ul><ul>\n<li>If two options are specified, the first one affects the\nhorizontal behaviour and the second one the vertical behaviour.  If\nonly one option is specified, it affects both.</li>\n</ul><h2>Example: Border Image</h2>\n<p><img alt=\"\" src=\"border1.png\" />\n|[\nborder-image: url(\"gradient1.png\") 10 10 10 10;\n]|</p><h2>Example: Repeating Border Image</h2>\n<p><img alt=\"\" src=\"border2.png\" />\n|[\nborder-image: url(\"gradient1.png\") 10 10 10 10 repeat;\n]|</p><h2>Example: Stetched Border Image</h2>\n<p><img alt=\"\" src=\"border3.png\" />\n|[\nborder-image: url(\"gradient1.png\") 10 10 10 10 stretch;\n]|</p><h1>Supported Properties</h1><p>Properties are the part that differ the most to common CSS, not all\nproperties are supported (some are planned to be supported\neventually, some others are meaningless or don't map intuitively in\na widget based environment).</p><p>The currently supported properties are:</p><h2>engine: [name|none];</h2><ul>\n<li><code>none</code> means to use the default (ie. builtin engine)\n|[\n engine: clearlooks;\n]|</li>\n</ul><h2>background-color: [color|transparent];</h2><ul>\n<li><code>color</code>: See [Specifying Colors][specifying-colors]\n|[\n background-color: shade (@color1, 0.5);\n]|</li>\n</ul><h2>color: [color|transparent];</h2><ul>\n<li><code>color</code>: See [Specifying Colors][specifying-colors]\n|[\n color: #fff;\n]|</li>\n</ul><h2>border-color: [color|transparent]{1,4};</h2><ul>\n<li><code>color</code>: See [Specifying Colors][specifying-colors]</li>\n<li>Four values used to specify: top right bottom left</li>\n<li>Three values used to specify: top vertical bottom</li>\n<li>Two values used to specify: horizontal vertical</li>\n<li>One value used to specify: color\n|[\n border-color: red green blue;\n]|</li>\n</ul><h2>border-top-color: [color|transparent];</h2><ul>\n<li><code>color</code>: See [Specifying Colors][specifying-colors]\n|[\n border-top-color: @borders;\n]|</li>\n</ul><h2>border-right-color: [color|transparent];</h2><ul>\n<li><code>color</code>: See [Specifying Colors][specifying-colors]\n|[\n border-right-color: @borders;\n]|</li>\n</ul><h2>border-bottom-color: [color|transparent];</h2><ul>\n<li><code>color</code>: See [Specifying Colors][specifying-colors]\n|[\n border-bottom-color: @borders;\n]|</li>\n</ul><h2>border-left-color: [color|transparent];</h2><ul>\n<li><code>color</code>: See [Specifying Colors][specifying-colors]\n|[\n border-left-color: @borders;\n]|</li>\n</ul><h2>font-family: name;</h2><p>The name of the font family or font name to use.</p><ul>\n<li>Note: unlike the CSS2 Specification this does not support using a\n  prioritized list of font family names and/or generic family\n  names.</li>\n</ul><p>|[\n font-family: Sans, Cantarell;\n]|</p><h2>font-style: [normal|oblique|italic];</h2><p>Selects between normal, italic and oblique faces within a font family.</p><p>|[\n font-style: italic;\n]|</p><h2>font-variant: [normal|small-caps];</h2><p>In a small-caps font the lower case letters look similar to the\nuppercase ones, but in a smaller size and with slightly different\nproportions.</p><p>|[\n font-variant: normal;\n]|</p><h2>font-weight: [normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900];</h2><p>Selects the weight of the font. The values '100' to '900' form an\nordered sequence, where each number indicates a weight that is at\nleast as dark as its predecessor. The keyword 'normal' is\nsynonymous with '400', and 'bold' is synonymous with\n'700'. Keywords other than 'normal' and 'bold' have been shown to\nbe often confused with font names and a numerical scale was\ntherefore chosen for the 9-value list.\n- Maps to #PANGO_TYPE_WEIGHT\n|[\n font-weight: bold;\n]|</p><h2>font-size: [absolute-size|relative-size|percentage];</h2><ul>\n<li><code>absolute-size</code>: The size in normal size units like <code>px</code>, <code>pt</code>,\n   and <code>em</code>. Or symbolic sizes like <code>xx-small</code>, <code>x-small</code>, <code>small</code>,\n   <code>medium</code>, <code>large</code>, <code>x-large</code>, <code>xx-large</code>.</li>\n<li><code>relative-size</code>: <code>larger</code> or <code>smaller</code> relative to the parent.</li>\n<li><code>percentage</code>: A percentage difference from the nominal size.\n|[\n font-size: 12px;\n]|</li>\n</ul><h2>font: [family] [style] [variant] [size];</h2><p>A shorthand for setting a few font properties at once.\n- Supports any format accepted by <span data-xref=\"Pango.font_description_from_string\">Pango.font_description_from_string</span>\n- Note: this is somewhat different from the CSS2 Specification for this property.\n|[\n font: Bold 11;\n]|</p><h2>margin: [length|percentage]{1,4};</h2><p>A shorthand for setting the margin space required on all sides of\nan element.\n- Four values used to specify: top right bottom left\n- Three values used to specify: top horizontal bottom\n- Two values used to specify: vertical horizontal\n- One value used to specify: margin\n|[\n margin: 1em 2em 4em;\n]|</p><h2>margin-top: [length|percentage];</h2><p>Sets the margin space required on the top of an element.\n|[\n margin-top: 10px;\n]|</p><h2>margin-right: [length|percentage];</h2><p>Sets the margin space required on the right of an element.\n|[\n margin-right: 0px;\n]|</p><h2>margin-bottom: [length|percentage];</h2><p>Sets the margin space required on the bottom of an element.\n|[\n margin-bottom: 10px;\n]|</p><h2>margin-left: [length|percentage];</h2><p>Sets the margin space required on the left of an element.\n|[\n margin-left: 1em;\n]|</p><h2>padding: [length|percentage]{1,4};</h2><p>A shorthand for setting the padding space required on all sides of\nan element. The padding area is the space between the content of\nthe element and its border.\n- Four values used to specify: top right bottom left\n- Three values used to specify: top horizontal bottom\n- Two values used to specify: vertical horizontal\n- One value used to specify: padding\n|[\n padding: 1em 2em 4em;\n]|</p><h2>padding-top: [length|percentage];</h2><p>Sets the padding space required on the top of an element.\n|[\n padding-top: 10px;\n]|</p><h2>padding-right: [length|percentage];</h2><p>Sets the padding space required on the right of an element.\n|[\n padding-right: 0px;\n]|</p><h2>padding-bottom: [length|percentage];</h2><p>Sets the padding space required on the bottom of an element.\n|[\n padding-bottom: 10px;\n]|</p><h2>padding-left: [length|percentage];</h2><p>Sets the padding space required on the left of an element.\n|[\n padding-left: 1em;\n]|</p><h2>border-width: [width]{1,4};</h2><p>A shorthand for setting the border width on all sides of\nan element.\n- Four values used to specify: top right bottom left\n- Three values used to specify: top vertical bottom\n- Two values used to specify: horizontal vertical\n- One value used to specify: width\n|[\n border-width: 1px 2px 4px;\n]|</p><h2>border-top-width: [width];</h2><p>Sets the border width required on the top of an element.\n|[\n border-top: 10px;\n]|</p><h2>border-right-width: [width];</h2><p>Sets the border width required on the right of an element.\n|[\n border-right: 0px;\n]|</p><h2>border-bottom-width: [width];</h2><p>Sets the border width required on the bottom of an element.\n|[\n border-bottom: 10px;\n]|</p><h2>border-left-width: [width];</h2><p>Sets the border width required on the left of an element.\n|[\n border-left: 1em;\n]|</p><h2>border-radius: [length|percentage]{1,4};</h2><p>Allows setting how rounded all border corners are.\n- Four values used to specify: top-left top-right bottom-right bottom-left\n- Three values used to specify: top-left top-right-and-bottom-left bottom-right\n- Two values used to specify: top-left-and-bottom-right top-right-and-bottom-left\n- One value used to specify: radius on all sides\n|[\n border-radius: 8px\n]|</p><h2>border-style: [none|solid|inset|outset]{1,4};</h2><p>A shorthand property for setting the line style for all four sides\nof the elements border.\n- Four values used to specify: top right bottom left;\n- Three values used to specify: top horizontal bottom\n- Two values used to specify: vertical horizontal\n- One value used to specify: style\n|[\n border-style: solid;\n]|</p><h2>border-image: [source] [slice] [ / width ] [repeat]; A shorthand</h2>\n<p>for setting an image on the borders of elements. See [Border\nImages][border-images].\n|[\n border-image: url(\"/path/to/image.png\") 3 4 4 3 repeat stretch;\n]|</p><h2>border-image-source: [none|url|linear-gradient]{1,4};</h2><p>Defines the image to use instead of the style of the border. If\nthis property is set to none, the style defined by border-style is\nused instead.\n|[\n border-image-source: url(\"/path/to/image.png\");\n]|</p><h2>border-image-slice: [number|percentage]{1,4};</h2><p>Divides the image specified by border-image-source in nine regions:\nthe four corners, the four edges and the middle. It does this by\nspecifying 4 inwards offsets.\n- Four values used to specify: top right bottom left;\n- Three values used to specify: top vertical bottom\n- Two values used to specify: horizontal vertical\n- One value used to specify: slice\n|[\n border-image-slice: 3 3 4 3;\n]|</p><h2>border-image-width: [length|percentage]{1,4};</h2><p>Defines the offset to use for dividing the border image in nine\nparts, the top-left corner, central top edge, top-right-corner,\ncentral right edge, bottom-right corner, central bottom edge,\nbottom-left corner, and central right edge. They represent inward\ndistance from the top, right, bottom, and left edges.\n- Four values used to specify: top right bottom left;\n- Three values used to specify: top horizontal bottom\n- Two values used to specify: vertical horizontal\n- One value used to specify: width\n|[\n border-image-width: 4px 0 4px 0;\n]|</p><h2>border-image-repeat: [none|url|linear-gradient]{1,4};</h2><p>Defines how the middle part of a border image is handled to match\nthe size of the border. It has a one-value syntax which describes\nthe behavior for all sides, and a two-value syntax that sets a\ndifferent value for the horizontal and vertical behavior.\n- Two values used to specify: horizontal vertical\n- One value used to specify: repeat\n|[\n border-image-repeat: stretch;\n]|</p><h2>background-image: [none|url|linear-gradient], ...</h2>\n<p>Sets one or several background images for an element. The images\nare drawn on successive stacking context layers, with the first\nspecified being drawn as if it is the closest to the user. The\nborders of the element are then drawn on top of them, and the\nbackground-color is drawn beneath them.\n- There can be several sources listed, separated by commas.\n|[\n background-image: gtk-gradient (linear,\n                                 left top, right top,\n                                 from (#fff), to (#000));\n]|</p><h2>background-repeat: [repeat|no-repeat|space|round|repeat-x|repeat-y];</h2><p>Defines how background images are repeated. A background image can\nbe repeated along the horizontal axis, the vertical axis, both, or\nnot repeated at all.\n- <code>repeat</code>: The image is repeated in the given direction as much as\n   needed to cover the whole background image painting area. The\n   last image may be clipped if the whole thing won't fit in the\n   remaining area.\n- <code>space</code>: The image is repeated in the given direction as much as\n   needed to cover most of the background image painting area,\n   without clipping an image. The remaining non-covered space is\n   spaced out evenly between the images. The first and last images\n   touches the edge of the element. The value of the\n   background-position CSS property is ignored for the concerned\n   direction, except if one single image is greater than the\n   background image painting area, which is the only case where an\n   image can be clipped when the space value is used.\n- <code>round</code>: The image is repeated in the given direction as much as\n   needed to cover most of the background image painting area,\n   without clipping an image. If it doesn't cover exactly the area,\n   the tiles are resized in that direction in order to match it.\n- <code>no-repeat</code>: The image is not repeated (and hence the background\n   image painting area will not necessarily been entirely\n   covered). The position of the non-repeated background image is\n   defined by the background-position CSS property.\n- Note if not specified, the style doesn\u2019t respect the CSS3\n   specification, since the background will be stretched to fill\n   the area.\n|[\n background-repeat: no-repeat;\n]|</p><h2>text-shadow: horizontal_offset vertical_offset [ blur_radius ] color;</h2><p>A shadow list can be applied to text or symbolic icons, using the CSS3\ntext-shadow syntax, as defined in the\n<a href=\"http://www.w3.org/TR/css3-text/#text-shadow\">CSS3 Specification</a>.</p><ul>\n<li>The offset of the shadow is specified with the\n<code>horizontal_offset</code> and <code>vertical_offset</code> parameters.</li>\n<li>The optional blur radius is parsed, but it is currently not\nrendered by the GTK+ theming engine.</li>\n</ul><p>To set a shadow on an icon, use the <code>icon-shadow</code> property instead,\nwith the same syntax.</p><p>To set multiple shadows on an element, you can specify a comma-separated list\nof shadow elements in the <code>text-shadow</code> or <code>icon-shadow</code> property. Shadows are\nalways rendered front to back (i.e. the first shadow specified is on top of the\nothers). Shadows can thus overlay each other, but they can never overlay the\ntext or icon itself, which is always rendered on top of the shadow layer.</p><p>|[\n  text-shadow: text-shadow: 1 1 0 blue, -4 -4 red;\n]|</p><h2>box-shadow: [ inset ] horizontal_offset vertical_offset [ blur_radius ] [ spread ] color;</h2><p>Themes can apply shadows on framed elements using the CSS3 box-shadow syntax,\nas defined in the\n<a href=\"http://www.w3.org/TR/css3-background/#the-box-shadow\">CSS3 Specification</a>.</p><ul>\n<li>A positive offset will draw a shadow that is offset to the right (down) of the box,</li>\n<li>A negative offset to the left (top).</li>\n<li>The optional spread parameter defines an additional distance to\nexpand the shadow shape in all directions, by the specified radius.</li>\n<li>The optional blur radius parameter is parsed, but it is currently not rendered by\nthe GTK+ theming engine.</li>\n<li>The inset parameter defines whether the drop shadow should be rendered inside or outside\nthe box canvas.</li>\n</ul><p>To set multiple box-shadows on an element, you can specify a comma-separated list\nof shadow elements in the <code>box-shadow</code> property. Shadows are always rendered\nfront to back (i.e. the first shadow specified is on top of the others) so they may\noverlap other boxes or other shadows.</p><p>|[\n  box-shadow: inset 0 1px 1px alpha(black, 0.1);\n]|</p><h2>transition: duration [s|ms] [linear|ease|ease-in|ease-out|ease-in-out] [loop];</h2><p>Styles can specify transitions that will be used to create a\ngradual change in the appearance when a widget state changes.\n- The <code>duration</code> is the amount of time that the animation will take\nfor a complete cycle from start to end.\n- If the loop option is given, the animation will be repated until\nthe state changes again.\n- The option after the duration determines the transition function\nfrom a small set of predefined functions.</p><ul>\n<li>Linear</li>\n</ul><p><img alt=\"\" src=\"linear.png\" /></p><ul>\n<li>Ease transition</li>\n</ul><p><img alt=\"\" src=\"ease.png\" /></p><ul>\n<li>Ease-in-out transition</li>\n</ul><p><img alt=\"\" src=\"ease-in-out.png\" /></p><ul>\n<li>Ease-in transition</li>\n</ul><p><img alt=\"\" src=\"ease-in.png\" /></p><ul>\n<li>Ease-out transition</li>\n</ul><p><img alt=\"\" src=\"ease-out.png\" /></p><p>|[\n  transition: 150ms ease-in-out;\n]|</p><h2>gtk-key-bindings: binding1, binding2, ...;</h2><p>Key binding set name list.</p><h2>Other Properties</h2><p>GtkThemingEngines can register their own, engine-specific style properties\nwith the function <span data-xref=\"Gtk.ThemingEngine.register_property\"/>. These properties\ncan be set in CSS like other properties, using a name of the form\n<code>-namespace-name</code>, where namespace is typically\nthe name of the theming engine, and name is the\nname of the property. Style properties that have been registered by widgets\nusing <span data-xref=\"Gtk.WidgetClass.install_style_property\"/> can also be set in this\nway, using the widget class name for namespace.</p><p>An example for using engine-specific style properties:\n|[\n* {\n    engine: clearlooks;\n    border-radius: 4;\n    -GtkPaned-handle-size: 6;\n    -clearlooks-colorize-scrollbar: false;\n}\n]|</p>",
            "kind": "class",
            "name": "CssProvider"
        },
        {
            "doc": "<p>Dialog boxes are a convenient way to prompt the user for a small amount\nof input, e.g. to display a message, ask a question, or anything else\nthat does not require extensive effort on the user\u2019s part.</p><p>GTK+ treats a dialog as a window split vertically. The top section is a\n<span data-xref=\"Gtk.VBox\"/>, and is where widgets such as a <span data-xref=\"Gtk.Label\"/> or a <span data-xref=\"Gtk.Entry\"/> should\nbe packed. The bottom area is known as the\n\u201caction area\u201d. This is generally used for\npacking buttons into the dialog which may perform functions such as\ncancel, ok, or apply.</p><p><span data-xref=\"Gtk.Dialog\"/> boxes are created with a call to <span data-xref=\"Gtk.Dialog.new\"/> or\n<span data-xref=\"Gtk.Dialog.new_with_buttons\"/>. <span data-xref=\"Gtk.Dialog.new_with_buttons\"/> is\nrecommended; it allows you to set the dialog title, some convenient\nflags, and add simple buttons.</p><p>If \u201cdialog\u201d is a newly created dialog, the two primary areas of the\nwindow can be accessed through <span data-xref=\"Gtk.Dialog.get_content_area\"/> and\n<span data-xref=\"Gtk.Dialog.get_action_area\"/>, as can be seen from the example below.</p><p>A \u201cmodal\u201d dialog (that is, one which freezes the rest of the application\nfrom user input), can be created by calling <span data-xref=\"Gtk.Window.set_modal\"/> on the\ndialog. Use the GTK_WINDOW() macro to cast the widget returned from\n<span data-xref=\"Gtk.Dialog.new\"/> into a <span data-xref=\"Gtk.Window\"/>. When using <span data-xref=\"Gtk.Dialog.new_with_buttons\"/>\nyou can also pass the #GTK_DIALOG_MODAL flag to make a dialog modal.</p><p>If you add buttons to <span data-xref=\"Gtk.Dialog\"/> using <span data-xref=\"Gtk.Dialog.new_with_buttons\"/>,\n<span data-xref=\"Gtk.Dialog.add_button\"/>, <span data-xref=\"Gtk.Dialog.add_buttons\"/>, or\n<span data-xref=\"Gtk.Dialog.add_action_widget\"/>, clicking the button will emit a signal\ncalled <span data-xref=\"Gtk.Dialog-response\"/> with a response ID that you specified. GTK+\nwill never assign a meaning to positive response IDs; these are entirely\nuser-defined. But for convenience, you can use the response IDs in the\n<span data-xref=\"Gtk.ResponseType\"/> enumeration (these all have values less than zero). If\na dialog receives a delete event, the <span data-xref=\"Gtk.Dialog-response\"/> signal will\nbe emitted with a response ID of #GTK_RESPONSE_DELETE_EVENT.</p><p>If you want to block waiting for a dialog to return before returning\ncontrol flow to your code, you can call <span data-xref=\"Gtk.Dialog.run\"/>. This function\nenters a recursive main loop and waits for the user to respond to the\ndialog, returning the response ID corresponding to the button the user\nclicked.</p><p>For the simple dialog in the following example, in reality you\u2019d probably\nuse <span data-xref=\"Gtk.MessageDialog\"/> to save yourself some effort. But you\u2019d need to\ncreate the dialog contents manually if you had more than a simple message\nin the dialog.</p><p>An example for simple GtkDialog usage:\n|[&lt;!-- language=\"C\" --&gt;\n// Function to open a dialog box with a message\nvoid\nquick_message (GtkWindow <em>parent, gchar </em>message)\n{\n GtkWidget <em>dialog, </em>label, *content_area;\n GtkDialogFlags flags;</p><p>// Create the widgets\n flags = GTK_DIALOG_DESTROY_WITH_PARENT;\n dialog = gtk_dialog_new_with_buttons (\"Message\",\n                                       parent,\n                                       flags,\n                                       _(\"_OK\"),\n                                       GTK_RESPONSE_NONE,\n                                       NULL);\n content_area = gtk_dialog_get_content_area (GTK_DIALOG (dialog));\n label = gtk_label_new (message);</p><p>// Ensure that the dialog box is destroyed when the user responds</p><p>g_signal_connect_swapped (dialog,\n                           \"response\",\n                           G_CALLBACK (gtk_widget_destroy),\n                           dialog);</p><p>// Add the label, and show everything we\u2019ve added</p><p>gtk_container_add (GTK_CONTAINER (content_area), label);\n gtk_widget_show_all (dialog);\n}\n]|</p><h1>GtkDialog as GtkBuildable</h1><p>The GtkDialog implementation of the <span data-xref=\"Gtk.Buildable\"/> interface exposes the\n@vbox and @action_area as internal children with the names \u201cvbox\u201d and\n\u201caction_area\u201d.</p><p>GtkDialog supports a custom &lt;action-widgets&gt; element, which can contain\nmultiple &lt;action-widget&gt; elements. The \u201cresponse\u201d attribute specifies a\nnumeric response, and the content of the element is the id of widget\n(which should be a child of the dialogs @action_area). To mark a response\nas default, set the \u201cdefault\u201c attribute of the &lt;action-widget&gt; element\nto true.</p><p>GtkDialog supports adding action widgets by specifying \u201caction\u201c as\nthe \u201ctype\u201c attribute of a &lt;child&gt; element. The widget will be added\neither to the action area or the headerbar of the dialog, depending\non the \u201cuse-header-bar\u201c property. The response id has to be associated\nwith the action widget using the &lt;action-widgets&gt; element.</p><p>An example of a <span data-xref=\"Gtk.Dialog\"/> UI definition fragment:\n|[\n&lt;object class=\"GtkDialog\" id=\"dialog1\"&gt;\n  &lt;child type=\"action\"&gt;\n    &lt;object class=\"GtkButton\" id=\"button_cancel\"/&gt;\n  &lt;/child&gt;\n  &lt;child type=\"action\"&gt;\n    &lt;object class=\"GtkButton\" id=\"button_ok\"/&gt;\n  &lt;/child&gt;\n  &lt;action-widgets&gt;\n    &lt;action-widget response=\"cancel\"&gt;button_cancel&lt;/action-widget&gt;\n    &lt;action-widget response=\"ok\" default=\"true\"&gt;button_ok&lt;/action-widget&gt;\n  &lt;/action-widgets&gt;\n&lt;/object&gt;\n]|</p>",
            "kind": "class",
            "name": "Dialog"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.DrawingArea\"/> widget is used for creating custom user interface\nelements. It\u2019s essentially a blank widget; you can draw on it. After\ncreating a drawing area, the application may want to connect to:</p><ul>\n<li>Mouse and button press signals to respond to input from\n  the user. (Use <span data-xref=\"Gtk.Widget.add_events\"/> to enable events\n  you wish to receive.)</li>\n</ul><ul>\n<li>The <span data-xref=\"Gtk.Widget-realize\"/> signal to take any necessary actions\n  when the widget is instantiated on a particular display.\n  (Create GDK resources in response to this signal.)</li>\n</ul><ul>\n<li>The <span data-xref=\"Gtk.Widget-configure-event\"/> signal to take any necessary\n  actions when the widget changes size.</li>\n</ul><ul>\n<li>The <span data-xref=\"Gtk.Widget-draw\"/> signal to handle redrawing the\n  contents of the widget.</li>\n</ul><p>The following code portion demonstrates using a drawing\narea to display a circle in the normal widget foreground\ncolor.</p><p>Note that GDK automatically clears the exposed area to the\nbackground color before sending the expose event, and that\ndrawing is implicitly clipped to the exposed area.</p><h2>Simple GtkDrawingArea usage</h2><p>|[&lt;!-- language=\"C\" --&gt;\ngboolean\ndraw_callback (GtkWidget <em>widget, cairo_t </em>cr, gpointer data)\n{\n  guint width, height;\n  GdkRGBA color;</p><p>width = gtk_widget_get_allocated_width (widget);\n  height = gtk_widget_get_allocated_height (widget);\n  cairo_arc (cr,\n             width / 2.0, height / 2.0,\n             MIN (width, height) / 2.0,\n             0, 2 * G_PI);</p><p>gtk_style_context_get_color (gtk_widget_get_style_context (widget),\n                               0,\n                               &amp;color);\n  gdk_cairo_set_source_rgba (cr, &amp;color);</p><p>cairo_fill (cr);</p><p>return FALSE;\n}\n[...]\n  GtkWidget *drawing_area = gtk_drawing_area_new ();\n  gtk_widget_set_size_request (drawing_area, 100, 100);\n  g_signal_connect (G_OBJECT (drawing_area), \"draw\",\n                    G_CALLBACK (draw_callback), NULL);\n]|</p><p>Draw signals are normally delivered when a drawing area first comes\nonscreen, or when it\u2019s covered by another window and then uncovered.\nYou can also force an expose event by adding to the \u201cdamage region\u201d\nof the drawing area\u2019s window; <span data-xref=\"Gtk.Widget.queue_draw_area\"/> and\n<span data-xref=\"Gdk.Window.invalidate_rect\">Gdk.Window.prototype.invalidate_rect</span> are equally good ways to do this.\nYou\u2019ll then get a draw signal for the invalid region.</p><p>The available routines for drawing are documented on the\n[GDK Drawing Primitives][gdk3-Cairo-Interaction] page\nand the cairo documentation.</p><p>To receive mouse events on a drawing area, you will need to enable\nthem with <span data-xref=\"Gtk.Widget.add_events\"/>. To receive keyboard events, you\nwill need to set the \u201ccan-focus\u201d property on the drawing area, and you\nshould probably draw some user-visible indication that the drawing\narea is focused. Use <span data-xref=\"Gtk.Widget.has_focus\"/> in your expose event\nhandler to decide whether to draw the focus indicator. See\n<span data-xref=\"Gtk.render_focus\"/> for one way to draw focus.</p>",
            "kind": "class",
            "name": "DrawingArea"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.Entry\"/> widget is a single line text entry\nwidget. A fairly large set of key bindings are supported\nby default. If the entered text is longer than the allocation\nof the widget, the widget will scroll so that the cursor\nposition is visible.</p><p>When using an entry for passwords and other sensitive information,\nit can be put into \u201cpassword mode\u201d using <span data-xref=\"Gtk.Entry.set_visibility\"/>.\nIn this mode, entered text is displayed using a \u201cinvisible\u201d character.\nBy default, GTK+ picks the best invisible character that is available\nin the current font, but it can be changed with\n<span data-xref=\"Gtk.Entry.set_invisible_char\"/>. Since 2.16, GTK+ displays a warning\nwhen Caps Lock or input methods might interfere with entering text in\na password entry. The warning can be turned off with the\n<span data-xref=\"Gtk.Entry-caps-lock-warning\"/> property.</p><p>Since 2.16, GtkEntry has the ability to display progress or activity\ninformation behind the text. To make an entry display such information,\nuse <span data-xref=\"Gtk.Entry.set_progress_fraction\"/> or <span data-xref=\"Gtk.Entry.set_progress_pulse_step\"/>.</p><p>Additionally, GtkEntry can show icons at either side of the entry. These\nicons can be activatable by clicking, can be set up as drag source and\ncan have tooltips. To add an icon, use <span data-xref=\"Gtk.Entry.set_icon_from_gicon\"/> or\none of the various other functions that set an icon from a stock id, an\nicon name or a pixbuf. To trigger an action when the user clicks an icon,\nconnect to the <span data-xref=\"Gtk.Entry-icon-press\"/> signal. To allow DND operations\nfrom an icon, use <span data-xref=\"Gtk.Entry.set_icon_drag_source\"/>. To set a tooltip on\nan icon, use <span data-xref=\"Gtk.Entry.set_icon_tooltip_text\"/> or the corresponding function\nfor markup.</p><p>Note that functionality or information that is only available by clicking\non an icon in an entry may not be accessible at all to users which are not\nable to use a mouse or other pointing device. It is therefore recommended\nthat any such functionality should also be available by other means, e.g.\nvia the context menu of the entry.</p>",
            "kind": "class",
            "name": "Entry"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.EntryBuffer\"/> class contains the actual text displayed in a\n<span data-xref=\"Gtk.Entry\"/> widget.</p><p>A single <span data-xref=\"Gtk.EntryBuffer\"/> object can be shared by multiple <span data-xref=\"Gtk.Entry\"/>\nwidgets which will then share the same text content, but not the cursor\nposition, visibility attributes, icon etc.</p><p><span data-xref=\"Gtk.EntryBuffer\"/> may be derived from. Such a derived class might allow\ntext to be stored in an alternate location, such as non-pageable memory,\nuseful in the case of important passwords. Or a derived class could\nintegrate with an application\u2019s concept of undo/redo.</p>",
            "kind": "class",
            "name": "EntryBuffer"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.EntryCompletion\"/> is an auxiliary object to be used in conjunction with\n<span data-xref=\"Gtk.Entry\"/> to provide the completion functionality. It implements the\n<span data-xref=\"Gtk.CellLayout\"/> interface, to allow the user to add extra cells to the\n<span data-xref=\"Gtk.TreeView\"/> with completion matches.</p><p>\u201cCompletion functionality\u201d means that when the user modifies the text\nin the entry, <span data-xref=\"Gtk.EntryCompletion\"/> checks which rows in the model match\nthe current content of the entry, and displays a list of matches.\nBy default, the matching is done by comparing the entry text\ncase-insensitively against the text column of the model (see\n<span data-xref=\"Gtk.EntryCompletion.set_text_column\"/>), but this can be overridden\nwith a custom match function (see <span data-xref=\"Gtk.EntryCompletion.set_match_func\"/>).</p><p>When the user selects a completion, the content of the entry is\nupdated. By default, the content of the entry is replaced by the\ntext column of the model, but this can be overridden by connecting\nto the <span data-xref=\"Gtk.EntryCompletion-match-selected\"/> signal and updating the\nentry in the signal handler. Note that you should return <code>true</code> from\nthe signal handler to suppress the default behaviour.</p><p>To add completion functionality to an entry, use <span data-xref=\"Gtk.Entry.set_completion\"/>.</p><p>In addition to regular completion matches, which will be inserted into the\nentry when they are selected, <span data-xref=\"Gtk.EntryCompletion\"/> also allows to display\n\u201cactions\u201d in the popup window. Their appearance is similar to menuitems,\nto differentiate them clearly from completion strings. When an action is\nselected, the <span data-xref=\"Gtk.EntryCompletion-action-activated\"/> signal is emitted.</p><p>GtkEntryCompletion uses a <span data-xref=\"Gtk.TreeModelFilter\"/> model to represent the\nsubset of the entire model that is currently matching. While the\nGtkEntryCompletion signals <span data-xref=\"Gtk.EntryCompletion-match-selected\"/> and\n<span data-xref=\"Gtk.EntryCompletion-cursor-on-match\"/> take the original model and an\niter pointing to that model as arguments, other callbacks and signals\n(such as #GtkCellLayoutDataFuncs or <span data-xref=\"Gtk.CellArea-apply-attributes\"/>)\nwill generally take the filter model as argument. As long as you are\nonly calling <span data-xref=\"Gtk.TreeModel.get\"/>, this will make no difference to\nyou. If for some reason, you need the original model, use\n<span data-xref=\"Gtk.TreeModelFilter.get_model\"/>. Don\u2019t forget to use\n<span data-xref=\"Gtk.TreeModelFilter.convert_iter_to_child_iter\"/> to obtain a\nmatching iter.</p>",
            "kind": "class",
            "name": "EntryCompletion"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.EventBox\"/> widget is a subclass of <span data-xref=\"Gtk.Bin\"/> which also has its\nown window. It is useful since it allows you to catch events for widgets\nwhich do not have their own window.</p>",
            "kind": "class",
            "name": "EventBox"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.Expander\"/> allows the user to hide or show its child by clicking\non an expander triangle similar to the triangles used in a <span data-xref=\"Gtk.TreeView\"/>.</p><p>Normally you use an expander as you would use any other descendant\nof <span data-xref=\"Gtk.Bin\"/>; you create the child widget and use <span data-xref=\"Gtk.Container.add\"/>\nto add it to the expander. When the expander is toggled, it will take\ncare of showing and hiding the child automatically.</p><h1>Special Usage</h1><p>There are situations in which you may prefer to show and hide the\nexpanded widget yourself, such as when you want to actually create\nthe widget at expansion time. In this case, create a <span data-xref=\"Gtk.Expander\"/>\nbut do not add a child to it. The expander widget has an\n<span data-xref=\"Gtk.Expander-expanded\"/> property which can be used to monitor\nits expansion state. You should watch this property with a signal\nconnection as follows:</p><p>|[&lt;!-- language=\"C\" --&gt;\nexpander = gtk_expander_new_with_mnemonic (\"_More Options\");\ng_signal_connect (expander, \"notify::expanded\",\n                  G_CALLBACK (expander_callback), NULL);</p><p>...</p><p>static void\nexpander_callback (GObject    <em>object,\n                   GParamSpec </em>param_spec,\n                   gpointer    user_data)\n{\n  GtkExpander *expander;</p><p>expander = GTK_EXPANDER (object);</p><p>if (gtk_expander_get_expanded (expander))\n    {\n      // Show or create widgets\n    }\n  else\n    {\n      // Hide or destroy widgets\n    }\n}\n]|</p><h1>GtkExpander as GtkBuildable</h1><p>The GtkExpander implementation of the GtkBuildable interface supports\nplacing a child in the label position by specifying \u201clabel\u201d as the\n\u201ctype\u201d attribute of a &lt;child&gt; element. A normal content child can be\nspecified without specifying a &lt;child&gt; type attribute.</p><p>An example of a UI definition fragment with GtkExpander:\n|[\n&lt;object class=\"GtkExpander\"&gt;\n  &lt;child type=\"label\"&gt;\n    &lt;object class=\"GtkLabel\" id=\"expander-label\"/&gt;\n  &lt;/child&gt;\n  &lt;child&gt;\n    &lt;object class=\"GtkEntry\" id=\"expander-content\"/&gt;\n  &lt;/child&gt;\n&lt;/object&gt;\n]|</p>",
            "kind": "class",
            "name": "Expander"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.FileChooserButton\"/> is a widget that lets the user select a\nfile.  It implements the <span data-xref=\"Gtk.FileChooser\"/> interface.  Visually, it is a\nfile name with a button to bring up a <span data-xref=\"Gtk.FileChooserDialog\"/>.\nThe user can then use that dialog to change the file associated with\nthat button.  This widget does not support setting the\n<span data-xref=\"Gtk.FileChooser-select-multiple\"/> property to <code>true</code>.</p><h2>Create a button to let the user select a file in /etc</h2><p>|[&lt;!-- language=\"C\" --&gt;\n{\n  GtkWidget *button;</p><p>button = gtk_file_chooser_button_new (_(\"Select a file\"),\n                                        GTK_FILE_CHOOSER_ACTION_OPEN);\n  gtk_file_chooser_set_current_folder (GTK_FILE_CHOOSER (button),\n                                       \"/etc\");\n}\n]|</p><p>The <span data-xref=\"Gtk.FileChooserButton\"/> supports the #GtkFileChooserActions\n<span data-xref=\"Gtk.FileChooserAction\"/>.open and <span data-xref=\"Gtk.FileChooserAction\"/>.select_folder.</p><p>&gt; The <span data-xref=\"Gtk.FileChooserButton\"/> will ellipsize the label, and will thus\n&gt; request little horizontal space.  To give the button more space,\n&gt; you should call <span data-xref=\"Gtk.Widget.get_preferred_size\"/>,\n&gt; <span data-xref=\"Gtk.FileChooserButton.set_width_chars\"/>, or pack the button in\n&gt; such a way that other interface elements give space to the\n&gt; widget.</p>",
            "kind": "class",
            "name": "FileChooserButton"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.FileChooserDialog\"/> is a dialog box suitable for use with\n\u201cFile/Open\u201d or \u201cFile/Save as\u201d commands.  This widget works by\nputting a <span data-xref=\"Gtk.FileChooserWidget\"/> inside a <span data-xref=\"Gtk.Dialog\"/>.  It exposes\nthe <span data-xref=\"Gtk.FileChooser\"/> interface, so you can use all of the\n<span data-xref=\"Gtk.FileChooser\"/> functions on the file chooser dialog as well as\nthose for <span data-xref=\"Gtk.Dialog\"/>.</p><p>Note that <span data-xref=\"Gtk.FileChooserDialog\"/> does not have any methods of its\nown.  Instead, you should use the functions that work on a\n<span data-xref=\"Gtk.FileChooser\"/>.</p><h2>Typical usage ## {#gtkfilechooser-typical-usage}</h2><p>In the simplest of cases, you can the following code to use\n<span data-xref=\"Gtk.FileChooserDialog\"/> to select a file for opening:</p><p>|[\nGtkWidget *dialog;\nGtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_OPEN;\ngint res;</p><p>dialog = gtk_file_chooser_dialog_new (\"Open File\",\n                                      parent_window,\n                                      action,\n                                      <em>(\"_Cancel\"),\n                                      GTK_RESPONSE_CANCEL,\n                                      </em>(\"_Open\"),\n                                      GTK_RESPONSE_ACCEPT,\n                                      NULL);</p><p>res = gtk_dialog_run (GTK_DIALOG (dialog));\nif (res == GTK_RESPONSE_ACCEPT)\n  {\n    char <em>filename;\n    GtkFileChooser </em>chooser = GTK_FILE_CHOOSER (dialog);\n    filename = gtk_file_chooser_get_filename (chooser);\n    open_file (filename);\n    g_free (filename);\n  }</p><p>gtk_widget_destroy (dialog);\n]|</p><p>To use a dialog for saving, you can use this:</p><p>|[\nGtkWidget <em>dialog;\nGtkFileChooser </em>chooser;\nGtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_SAVE;\ngint res;</p><p>dialog = gtk_file_chooser_dialog_new (\"Save File\",\n                                      parent_window,\n                                      action,\n                                      <em>(\"_Cancel\"),\n                                      GTK_RESPONSE_CANCEL,\n                                      </em>(\"_Save\"),\n                                      GTK_RESPONSE_ACCEPT,\n                                      NULL);\nchooser = GTK_FILE_CHOOSER (dialog);</p><p>gtk_file_chooser_set_do_overwrite_confirmation (chooser, TRUE);</p><p>if (user_edited_a_new_document)\n  gtk_file_chooser_set_current_name (chooser,\n                                     _(\"Untitled document\"));\nelse\n  gtk_file_chooser_set_filename (chooser,\n                                 existing_filename);</p><p>res = gtk_dialog_run (GTK_DIALOG (dialog));\nif (res == GTK_RESPONSE_ACCEPT)\n  {\n    char *filename;</p><pre><code>filename = gtk_file_chooser_get_filename (chooser);\nsave_to_file (filename);\ng_free (filename);\n</code></pre>\n<p>}</p><p>gtk_widget_destroy (dialog);\n]|</p><h2>Setting up a file chooser dialog ## {#gtkfilechooserdialog-setting-up}</h2><p>There are various cases in which you may need to use a <span data-xref=\"Gtk.FileChooserDialog\"/>:</p><ul>\n<li>To select a file for opening. Use #GTK_FILE_CHOOSER_ACTION_OPEN.</li>\n</ul><ul>\n<li>To save a file for the first time. Use #GTK_FILE_CHOOSER_ACTION_SAVE,\n  and suggest a name such as \u201cUntitled\u201d with <span data-xref=\"Gtk.FileChooser.set_current_name\"/>.</li>\n</ul><ul>\n<li>To save a file under a different name. Use #GTK_FILE_CHOOSER_ACTION_SAVE,\n  and set the existing filename with <span data-xref=\"Gtk.FileChooser.set_filename\"/>.</li>\n</ul><ul>\n<li>To choose a folder instead of a file. Use #GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER.</li>\n</ul><p>Note that old versions of the file chooser\u2019s documentation suggested\nusing <span data-xref=\"Gtk.FileChooser.set_current_folder\"/> in various\nsituations, with the intention of letting the application\nsuggest a reasonable default folder.  This is no longer\nconsidered to be a good policy, as now the file chooser is\nable to make good suggestions on its own.  In general, you\nshould only cause the file chooser to show a specific folder\nwhen it is appropriate to use <span data-xref=\"Gtk.FileChooser.set_filename\"/>,\ni.e. when you are doing a Save As command and you already\nhave a file saved somewhere.</p><h2>Response Codes ## {#gtkfilechooserdialog-responses}</h2><p><span data-xref=\"Gtk.FileChooserDialog\"/> inherits from <span data-xref=\"Gtk.Dialog\"/>, so buttons that\ngo in its action area have response codes such as</p>\n<h1>GTK_RESPONSE_ACCEPT and #GTK_RESPONSE_CANCEL.  For example, you</h1>\n<p>could call <span data-xref=\"Gtk.FileChooserDialog.new\"/> as follows:</p><p>|[\nGtkWidget *dialog;\nGtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_OPEN;</p><p>dialog = gtk_file_chooser_dialog_new (\"Open File\",\n                                      parent_window,\n                                      action,\n                                      <em>(\"_Cancel\"),\n                                      GTK_RESPONSE_CANCEL,\n                                      </em>(\"_Open\"),\n                                      GTK_RESPONSE_ACCEPT,\n                                      NULL);\n]|</p><p>This will create buttons for \u201cCancel\u201d and \u201cOpen\u201d that use stock\nresponse identifiers from <span data-xref=\"Gtk.ResponseType\"/>.  For most dialog\nboxes you can use your own custom response codes rather than the\nones in <span data-xref=\"Gtk.ResponseType\"/>, but <span data-xref=\"Gtk.FileChooserDialog\"/> assumes that\nits \u201caccept\u201d-type action, e.g. an \u201cOpen\u201d or \u201cSave\u201d button,\nwill have one of the following response codes:</p><ul>\n<li>\n<h1>GTK_RESPONSE_ACCEPT</h1>\n</li>\n<li>\n<h1>GTK_RESPONSE_OK</h1>\n</li>\n<li>\n<h1>GTK_RESPONSE_YES</h1>\n</li>\n<li>\n<h1>GTK_RESPONSE_APPLY</h1>\n</li>\n</ul><p>This is because <span data-xref=\"Gtk.FileChooserDialog\"/> must intercept responses\nand switch to folders if appropriate, rather than letting the\ndialog terminate &amp;mdash; the implementation uses these known\nresponse codes to know which responses can be blocked if\nappropriate.</p><p>To summarize, make sure you use a\n[stock response code][gtkfilechooserdialog-responses]\nwhen you use <span data-xref=\"Gtk.FileChooserDialog\"/> to ensure proper operation.</p>",
            "kind": "class",
            "name": "FileChooserDialog"
        },
        {
            "doc": "<p>Short_description: A file chooser widget\n<span data-xref=\"Gtk.FileChooserWidget\"/> is a widget for choosing files.\nIt exposes the <span data-xref=\"Gtk.FileChooser\"/> interface, and you should\nuse the methods of this interface to interact with the\nwidget.</p>",
            "kind": "class",
            "name": "FileChooserWidget"
        },
        {
            "doc": "<p>A GtkFileFilter can be used to restrict the files being shown in a\n<span data-xref=\"Gtk.FileChooser\"/>. Files can be filtered based on their name (with\n<span data-xref=\"Gtk.FileFilter.add_pattern\"/>), on their mime type (with\n<span data-xref=\"Gtk.FileFilter.add_mime_type\"/>), or by a custom filter function\n(with <span data-xref=\"Gtk.FileFilter.add_custom\"/>).</p><p>Filtering by mime types handles aliasing and subclassing of mime\ntypes; e.g. a filter for text/plain also matches a file with mime\ntype application/rtf, since application/rtf is a subclass of\ntext/plain. Note that <span data-xref=\"Gtk.FileFilter\"/> allows wildcards for the\nsubtype of a mime type, so you can e.g. filter for image/*.</p><p>Normally, filters are used by adding them to a <span data-xref=\"Gtk.FileChooser\"/>,\nsee <span data-xref=\"Gtk.FileChooser.add_filter\"/>, but it is also possible\nto manually use a filter on a file with <span data-xref=\"Gtk.FileFilter.filter\"/>.</p><h1>GtkFileFilter as GtkBuildable</h1><p>The GtkFileFilter implementation of the GtkBuildable interface\nsupports adding rules using the &lt;mime-types&gt;, &lt;patterns&gt; and\n&lt;applications&gt; elements and listing the rules within. Specifying\na &lt;mime-type&gt; or &lt;pattern&gt; has the same effect as as calling\n<span data-xref=\"Gtk.RecentFilter.add_mime_type\"/> or <span data-xref=\"Gtk.RecentFilter.add_pattern\"/>.</p><p>An example of a UI definition fragment specifying GtkFileFilter\nrules:\n|[\n&lt;object class=\"GtkFileFilter\"&gt;\n  &lt;mime-types&gt;\n    &lt;mime-type&gt;text/plain&lt;/mime-type&gt;\n    &lt;mime-type&gt;image/ <em>&lt;/mime-type&gt;\n  &lt;/mime-types&gt;\n  &lt;patterns&gt;\n    &lt;pattern&gt;</em>.txt&lt;/pattern&gt;\n    &lt;pattern&gt;*.png&lt;/pattern&gt;\n  &lt;/patterns&gt;\n&lt;/object&gt;\n]|</p>",
            "kind": "class",
            "name": "FileFilter"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.Fixed\"/> widget is a container which can place child widgets\nat fixed positions and with fixed sizes, given in pixels. <span data-xref=\"Gtk.Fixed\"/>\nperforms no automatic layout management.</p><p>For most applications, you should not use this container! It keeps\nyou from having to learn about the other GTK+ containers, but it\nresults in broken applications.  With <span data-xref=\"Gtk.Fixed\"/>, the following\nthings will result in truncated text, overlapping widgets, and\nother display bugs:</p><ul>\n<li>Themes, which may change widget sizes.</li>\n</ul><ul>\n<li>Fonts other than the one you used to write the app will of course\n  change the size of widgets containing text; keep in mind that\n  users may use a larger font because of difficulty reading the\n  default, or they may be using Windows or the framebuffer port of\n  GTK+, where different fonts are available.</li>\n</ul><ul>\n<li>Translation of text into other languages changes its size. Also,\n  display of non-English text will use a different font in many\n  cases.</li>\n</ul><p>In addition, the fixed widget can\u2019t properly be mirrored in\nright-to-left languages such as Hebrew and Arabic. i.e. normally\nGTK+ will flip the interface to put labels to the right of the\nthing they label, but it can\u2019t do that with <span data-xref=\"Gtk.Fixed\"/>. So your\napplication will not be usable in right-to-left languages.</p><p>Finally, fixed positioning makes it kind of annoying to add/remove\nGUI elements, since you have to reposition all the other\nelements. This is a long-term maintenance problem for your\napplication.</p><p>If you know none of these things are an issue for your application,\nand prefer the simplicity of <span data-xref=\"Gtk.Fixed\"/>, by all means use the\nwidget. But you should be aware of the tradeoffs.</p>",
            "kind": "class",
            "name": "Fixed"
        },
        {
            "doc": "<p>A GtkFlowBox positions child widgets in sequence according to its\norientation.</p><p>For instance, with the horizontal orientation, the widgets will be\narranged from left to right, starting a new row under the previous\nrow when necessary. Reducing the width in this case will require more\nrows, so a larger height will be requested.</p><p>Likewise, with the vertical orientation, the widgets will be arranged\nfrom top to bottom, starting a new column to the right when necessary.\nReducing the height will require more columns, so a larger width will\nbe requested.</p><p>The children of a GtkFlowBox can be dynamically sorted and filtered.</p><p>Although a GtkFlowBox must have only <span data-xref=\"Gtk.FlowBoxChild\"/> children,\nyou can add any kind of widget to it via <span data-xref=\"Gtk.Container.add\"/>, and\na GtkFlowBoxChild widget will automatically be inserted between\nthe box and the widget.</p><p>Also see <span data-xref=\"Gtk.ListBox\"/>.</p><p>GtkFlowBox was added in GTK+ 3.12.</p>",
            "kind": "class",
            "name": "FlowBox"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FlowBoxChild"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.FontButton\"/> is a button which displays the currently selected\nfont an allows to open a font chooser dialog to change the font.\nIt is suitable widget for selecting a font in a preference dialog.</p>",
            "kind": "class",
            "name": "FontButton"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.FontChooserDialog\"/> widget is a dialog for selecting a font.\nIt implements the <span data-xref=\"Gtk.FontChooser\"/> interface.</p><h1>GtkFontChooserDialog as GtkBuildable</h1><p>The GtkFontChooserDialog implementation of the <span data-xref=\"Gtk.Buildable\"/>\ninterface exposes the buttons with the names \u201cselect_button\u201d\nand \u201ccancel_button\u201d.</p>",
            "kind": "class",
            "name": "FontChooserDialog"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.FontChooserWidget\"/> widget lists the available fonts,\nstyles and sizes, allowing the user to select a font. It is\nused in the <span data-xref=\"Gtk.FontChooserDialog\"/> widget to provide a\ndialog box for selecting fonts.</p><p>To set the font which is initially selected, use\n<span data-xref=\"Gtk.FontChooser.set_font\"/> or <span data-xref=\"Gtk.FontChooser.set_font_desc\"/>.</p><p>To get the selected font use <span data-xref=\"Gtk.FontChooser.get_font\"/> or\n<span data-xref=\"Gtk.FontChooser.get_font_desc\"/>.</p><p>To change the text which is shown in the preview area, use\n<span data-xref=\"Gtk.FontChooser.set_preview_text\"/>.</p>",
            "kind": "class",
            "name": "FontChooserWidget"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FontSelection"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FontSelectionDialog"
        },
        {
            "doc": "<p>The frame widget is a Bin that surrounds its child\nwith a decorative frame and an optional label.\nIf present, the label is drawn in a gap in the\ntop side of the frame. The position of the\nlabel can be controlled with <span data-xref=\"Gtk.Frame.set_label_align\"/>.</p><h1>GtkFrame as GtkBuildable</h1><p>The GtkFrame implementation of the GtkBuildable interface supports\nplacing a child in the label position by specifying \u201clabel\u201d as the\n\u201ctype\u201d attribute of a &lt;child&gt; element. A normal content child can\nbe specified without specifying a &lt;child&gt; type attribute.</p><p>An example of a UI definition fragment with GtkFrame:\n|[\n&lt;object class=\"GtkFrame\"&gt;\n  &lt;child type=\"label\"&gt;\n    &lt;object class=\"GtkLabel\" id=\"frame-label\"/&gt;\n  &lt;/child&gt;\n  &lt;child&gt;\n    &lt;object class=\"GtkEntry\" id=\"frame-content\"/&gt;\n  &lt;/child&gt;\n&lt;/object&gt;\n]|</p>",
            "kind": "class",
            "name": "Frame"
        },
        {
            "doc": "<p>GtkGrid is a container which arranges its child widgets in\nrows and columns. It is a very similar to <span data-xref=\"Gtk.Table\"/> and <span data-xref=\"Gtk.Box\"/>,\nbut it consistently uses <span data-xref=\"Gtk.Widget\"/>\u2019s <span data-xref=\"Gtk.Widget-margin\"/> and <span data-xref=\"Gtk.Widget-expand\"/>\nproperties instead of custom child properties, and it fully supports\n[height-for-width geometry management][geometry-management].</p><p>Children are added using <span data-xref=\"Gtk.Grid.attach\"/>. They can span multiple\nrows or columns. It is also possible to add a child next to an\nexisting child, using <span data-xref=\"Gtk.Grid.attach_next_to\"/>. The behaviour of\nGtkGrid when several children occupy the same grid cell is undefined.</p><p>GtkGrid can be used like a <span data-xref=\"Gtk.Box\"/> by just using <span data-xref=\"Gtk.Container.add\"/>,\nwhich will place children next to each other in the direction determined\nby the <span data-xref=\"Gtk.Orientable-orientation\"/> property.</p>",
            "kind": "class",
            "name": "Grid"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.HBox\"/> is a container that organizes child widgets into a single row.</p><p>Use the <span data-xref=\"Gtk.Box\"/> packing interface to determine the arrangement,\nspacing, width, and alignment of <span data-xref=\"Gtk.HBox\"/> children.</p><p>All children are allocated the same height.</p><p>GtkHBox has been deprecated. You can use <span data-xref=\"Gtk.Box\"/> instead, which is a\nvery quick and easy\u00a0change. If you have derived your own classes from\nGtkHBox, you can simply change the inheritance to derive directly\nfrom <span data-xref=\"Gtk.Box\"/>. No further changes are needed, since the default\nvalue of the <span data-xref=\"Gtk.Orientable-orientation\"/> property is\n<span data-xref=\"Gtk.Orientation\"/>.horizontal.\nIf you don\u2019t need first-child or last-child styling, and want your code\nto be future-proof, the recommendation is to switch to <span data-xref=\"Gtk.Grid\"/> instead\nof nested boxes. For more information about migrating to <span data-xref=\"Gtk.Grid\"/>,\nsee [Migrating from other containers to GtkGrid][gtk-migrating-GtkGrid].</p>",
            "kind": "class",
            "name": "HBox"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "HButtonBox"
        },
        {
            "doc": "<p>The HPaned widget is a container widget with two\nchildren arranged horizontally. The division between\nthe two panes is adjustable by the user by dragging\na handle. See <span data-xref=\"Gtk.Paned\"/> for details.</p><p>GtkHPaned has been deprecated, use <span data-xref=\"Gtk.Paned\"/> instead.</p>",
            "kind": "class",
            "name": "HPaned"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.HSV\"/> is the \u201ccolor wheel\u201d part of a complete color selector widget.\nIt allows to select a color by determining its HSV components in an\nintuitive way. Moving the selection around the outer ring changes the hue,\nand moving the selection point inside the inner triangle changes value and\nsaturation.</p><p><span data-xref=\"Gtk.HSV\"/> has been deprecated together with <span data-xref=\"Gtk.ColorSelection\"/>, where\nit was used.</p>",
            "kind": "class",
            "name": "HSV"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.HScale\"/> widget is used to allow the user to select a value using\na horizontal slider. To create one, use <span data-xref=\"Gtk.HScale.new_with_range\"/>.</p><p>The position to show the current value, and the number of decimal places\nshown can be set using the parent <span data-xref=\"Gtk.Scale\"/> class\u2019s functions.</p><p>GtkHScale has been deprecated, use <span data-xref=\"Gtk.Scale\"/> instead.</p>",
            "kind": "class",
            "name": "HScale"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.HScrollbar\"/> widget is a widget arranged horizontally creating a\nscrollbar. See <span data-xref=\"Gtk.Scrollbar\"/> for details on\nscrollbars. <span data-xref=\"Gtk.Adjustment\"/> pointers may be added to handle the\nadjustment of the scrollbar or it may be left <code>null</code> in which case one\nwill be created for you. See <span data-xref=\"Gtk.Scrollbar\"/> for a description of what the\nfields in an adjustment represent for a scrollbar.</p><p>GtkHScrollbar has been deprecated, use <span data-xref=\"Gtk.Scrollbar\"/> instead.</p>",
            "kind": "class",
            "name": "HScrollbar"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.HSeparator\"/> widget is a horizontal separator, used to group the\nwidgets within a window. It displays a horizontal line with a shadow to\nmake it appear sunken into the interface.</p><p>&gt; The <span data-xref=\"Gtk.HSeparator\"/> widget is not used as a separator within menus.\n&gt; To create a separator in a menu create an empty <span data-xref=\"Gtk.SeparatorMenuItem\"/>\n&gt; widget using <span data-xref=\"Gtk.SeparatorMenuItem.new\"/> and add it to the menu with\n&gt; <span data-xref=\"Gtk.MenuShell.append\"/>.</p><p>GtkHSeparator has been deprecated, use <span data-xref=\"Gtk.Separator\"/> instead.</p>",
            "kind": "class",
            "name": "HSeparator"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.HandleBox\"/> widget allows a portion of a window to be \"torn\noff\". It is a bin widget which displays its child and a handle that\nthe user can drag to tear off a separate window (the \u201cfloat\nwindow\u201d) containing the child widget. A thin\n\u201cghost\u201d is drawn in the original location of the\nhandlebox. By dragging the separate window back to its original\nlocation, it can be reattached.</p><p>When reattaching, the ghost and float window, must be aligned\nalong one of the edges, the \u201csnap edge\u201d.\nThis either can be specified by the application programmer\nexplicitly, or GTK+ will pick a reasonable default based\non the handle position.</p><p>To make detaching and reattaching the handlebox as minimally confusing\nas possible to the user, it is important to set the snap edge so that\nthe snap edge does not move when the handlebox is deattached. For\ninstance, if the handlebox is packed at the bottom of a VBox, then\nwhen the handlebox is detached, the bottom edge of the handlebox's\nallocation will remain fixed as the height of the handlebox shrinks,\nso the snap edge should be set to <span data-xref=\"Gtk.PositionType\"/>.bottom.</p><p>&gt; <span data-xref=\"Gtk.HandleBox\"/> has been deprecated. It is very specialized, lacks features\n&gt; to make it useful and most importantly does not fit well into modern\n&gt; application design. Do not use it. There is no replacement.</p>",
            "kind": "class",
            "name": "HandleBox"
        },
        {
            "doc": "<p>GtkHeaderBar is similar to a horizontal <span data-xref=\"Gtk.Box\"/>. It allows children to\nbe placed at the start or the end. In addition, it allows a title and\nsubtitle to be displayed. The title will be centered with respect to\nthe width of the box, even if the children at either side take up\ndifferent amounts of space. The height of the titlebar will be\nset to provide sufficient space for the subtitle, even if none is\ncurrently set. If a subtitle is not needed, the space reservation\ncan be turned off with <span data-xref=\"Gtk.HeaderBar.set_has_subtitle\"/>.</p><p>GtkHeaderBar can add typical window frame controls, such as minimize,\nmaximize and close buttons, or the window icon.</p>",
            "kind": "class",
            "name": "HeaderBar"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.IMContext\"/> defines the interface for GTK+ input methods. An input method\nis used by GTK+ text input widgets like <span data-xref=\"Gtk.Entry\"/> to map from key events to\nUnicode character strings.</p><p>The default input method can be set programmatically via the\n<span data-xref=\"Gtk.Settings-gtk-im-module\"/> GtkSettings property. Alternatively, you may set\nthe GTK_IM_MODULE environment variable as documented in\n[Running GTK+ Applications][gtk-running].</p><p>The <span data-xref=\"Gtk.Entry\"/> <span data-xref=\"Gtk.Entry-im-module\"/> and <span data-xref=\"Gtk.TextView\"/> <span data-xref=\"Gtk.TextView-im-module\"/>\nproperties may also be used to set input methods for specific widget\ninstances. For instance, a certain entry widget might be expected to contain\ncertain characters which would be easier to input with a certain input\nmethod.</p><p>An input method may consume multiple key events in sequence and finally\noutput the composed result. This is called preediting, and an input method\nmay provide feedback about this process by displaying the intermediate\ncomposition states as preedit text. For instance, the default GTK+ input\nmethod implements the input of arbitrary Unicode code points by holding down\nthe Control and Shift keys and then typing \u201cU\u201d followed by the hexadecimal\ndigits of the code point.  When releasing the Control and Shift keys,\npreediting ends and the character is inserted as text. Ctrl+Shift+u20AC for\nexample results in the \u20ac sign.</p><p>Additional input methods can be made available for use by GTK+ widgets as\nloadable modules. An input method module is a small shared library which\nimplements a subclass of <span data-xref=\"Gtk.IMContext\"/> or <span data-xref=\"Gtk.IMContextSimple\"/> and exports\nthese four functions:</p><p>|[&lt;!-- language=\"C\" --&gt;\nvoid im_module_init(<span data-xref=\"GObject.TypeModule\">GObject.TypeModule</span> *module);\n]|\nThis function should register the <span data-xref=\"GLib.Type\">GLib.Type</span> of the <span data-xref=\"Gtk.IMContext\"/> subclass which\nimplements the input method by means of <span data-xref=\"GObject.TypeModule.register_type\">GObject.TypeModule.prototype.register_type</span>. Note\nthat <span data-xref=\"GObject.type_register_static\">GObject.type_register_static</span> cannot be used as the type needs to be\nregistered dynamically.</p><p>|[&lt;!-- language=\"C\" --&gt;\nvoid im_module_exit(void);\n]|\nHere goes any cleanup code your input method might require on module unload.</p><p>|[&lt;!-- language=\"C\" --&gt;\nvoid im_module_list(const <span data-xref=\"Gtk.IMContextInfo\"/> <em><em><em>contexts, int </em>n_contexts)\n{\n  </em>contexts = info_list;\n  </em>n_contexts = G_N_ELEMENTS (info_list);\n}\n]|\nThis function returns the list of input methods provided by the module. The\nexample implementation above shows a common solution and simply returns a\npointer to statically defined array of <span data-xref=\"Gtk.IMContextInfo\"/> items for each\nprovided input method.</p><p>|[&lt;!-- language=\"C\" --&gt;\n<span data-xref=\"Gtk.IMContext\"/> * im_module_create(const #gchar *context_id);\n]|\nThis function should return a pointer to a newly created instance of the\n<span data-xref=\"Gtk.IMContext\"/> subclass identified by @context_id. The context ID is the same\nas specified in the <span data-xref=\"Gtk.IMContextInfo\"/> array returned by im_module_list().</p><p>After a new loadable input method module has been installed on the system,\nthe configuration file <code>gtk.immodules</code> needs to be\nregenerated by [gtk-query-immodules-3.0][gtk-query-immodules-3.0],\nin order for the new input method to become available to GTK+ applications.</p>",
            "kind": "class",
            "name": "IMContext"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "IMContextSimple"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "IMMulticontext"
        },
        {
            "doc": "<p>Browse the available stock icons using\nthe \u201cgtk3-demo\u201d application.</p><p>An icon factory manages a collection of <span data-xref=\"Gtk.IconSet\"/>; a <span data-xref=\"Gtk.IconSet\"/> manages a\nset of variants of a particular icon (i.e. a <span data-xref=\"Gtk.IconSet\"/> contains variants for\ndifferent sizes and widget states). Icons in an icon factory are named by a\nstock ID, which is a simple string identifying the icon. Each <span data-xref=\"Gtk.Style\"/> has a\nlist of <span data-xref=\"Gtk.IconFactory\"/> derived from the current theme; those icon factories\nare consulted first when searching for an icon. If the theme doesn\u2019t set a\nparticular icon, GTK+ looks for the icon in a list of default icon factories,\nmaintained by <span data-xref=\"Gtk.IconFactory.add_default\"/> and\n<span data-xref=\"Gtk.IconFactory.remove_default\"/>. Applications with icons should add a default\nicon factory with their icons, which will allow themes to override the icons\nfor the application.</p><p>To display an icon, always use <span data-xref=\"Gtk.Style.lookup_icon_set\"/> on the widget that\nwill display the icon, or the convenience function\n<span data-xref=\"Gtk.Widget.render_icon\"/>. These functions take the theme into account when\nlooking up the icon to use for a given stock ID.</p><h1>GtkIconFactory as GtkBuildable # {<span data-xref=\"Gtk.IconFactory\"/>-BUILDER-UI}</h1><p>GtkIconFactory supports a custom &lt;sources&gt; element, which can contain\nmultiple &lt;source&gt; elements. The following attributes are allowed:</p><ul>\n<li>stock-id</li>\n</ul><pre><code>The stock id of the source, a string. This attribute is\nmandatory\n</code></pre><ul>\n<li>filename</li>\n</ul><pre><code>The filename of the source, a string.  This attribute is\noptional\n</code></pre><ul>\n<li>icon-name</li>\n</ul><pre><code>The icon name for the source, a string.  This attribute is\noptional.\n</code></pre><ul>\n<li>size</li>\n</ul><pre><code>Size of the icon, a &lt;span data-xref=\"Gtk.IconSize\"/&gt; enum value.  This attribute is\noptional.\n</code></pre><ul>\n<li>direction</li>\n</ul><pre><code>Direction of the source, a &lt;span data-xref=\"Gtk.TextDirection\"/&gt; enum value.  This\nattribute is optional.\n</code></pre><ul>\n<li>state</li>\n</ul><pre><code>State of the source, a &lt;span data-xref=\"Gtk.StateType\"/&gt; enum value.  This\nattribute is optional.\n</code></pre><h2>A <span data-xref=\"Gtk.IconFactory\"/> UI definition fragment.</h2><p>|[\n&lt;object class=\"GtkIconFactory\" id=\"iconfactory1\"&gt;\n  &lt;sources&gt;\n    &lt;source stock-id=\"apple-red\" filename=\"apple-red.png\"/&gt;\n  &lt;/sources&gt;\n&lt;/object&gt;\n&lt;object class=\"GtkWindow\" id=\"window1\"&gt;\n  &lt;child&gt;\n    &lt;object class=\"GtkButton\" id=\"apple_button\"&gt;\n      &lt;property name=\"label\"&gt;apple-red&lt;/property&gt;\n      &lt;property name=\"use-stock\"&gt;True&lt;/property&gt;\n    &lt;/object&gt;\n  &lt;/child&gt;\n&lt;/object&gt;\n]|</p>",
            "kind": "class",
            "name": "IconFactory"
        },
        {
            "doc": "<p>Contains information found when looking up an icon in\nan icon theme.</p>",
            "kind": "class",
            "name": "IconInfo"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.IconTheme\"/> provides a facility for looking up icons by name\nand size. The main reason for using a name rather than simply\nproviding a filename is to allow different icons to be used\ndepending on what \u201cicon theme\u201d is selected\nby the user. The operation of icon themes on Linux and Unix\nfollows the <a href=\"http://www.freedesktop.org/Standards/icon-theme-spec\">Icon Theme Specification</a>\nThere is a default icon theme,\nnamed <code>hicolor</code> where applications should install\ntheir icons, but more additional application themes can be\ninstalled as operating system vendors and users choose.</p><p>Named icons are similar to the deprecated [Stock Items][gtkstock],\nand the distinction between the two may be a bit confusing.\nA few things to keep in mind:</p><ul>\n<li>Stock images usually are used in conjunction with\n  [Stock Items][gtkstock], such as %GTK_STOCK_OK or\n  %GTK_STOCK_OPEN. Named icons are easier to set up and therefore\n  are more useful for new icons that an application wants to\n  add, such as application icons or window icons.</li>\n</ul><ul>\n<li>Stock images can only be loaded at the symbolic sizes defined\n  by the <span data-xref=\"Gtk.IconSize\"/> enumeration, or by custom sizes defined\n  by <span data-xref=\"Gtk.icon_size_register\"/>, while named icons are more flexible\n  and any pixel size can be specified.</li>\n</ul><ul>\n<li>Because stock images are closely tied to stock items, and thus\n  to actions in the user interface, stock images may come in\n  multiple variants for different widget states or writing\n  directions.</li>\n</ul><p>A good rule of thumb is that if there is a stock image for what\nyou want to use, use it, otherwise use a named icon. It turns\nout that internally stock images are generally defined in\nterms of one or more named icons. (An example of the\nmore than one case is icons that depend on writing direction;\n%GTK_STOCK_GO_FORWARD uses the two themed icons\n\u201cgtk-stock-go-forward-ltr\u201d and \u201cgtk-stock-go-forward-rtl\u201d.)</p><p>In many cases, named themes are used indirectly, via <span data-xref=\"Gtk.Image\"/>\nor stock items, rather than directly, but looking up icons\ndirectly is also simple. The <span data-xref=\"Gtk.IconTheme\"/> object acts\nas a database of all the icons in the current theme. You\ncan create new <span data-xref=\"Gtk.IconTheme\"/> objects, but it\u2019s much more\nefficient to use the standard icon theme for the <span data-xref=\"Gdk.Screen\">Gdk.Screen</span>\nso that the icon information is shared with other people\nlooking up icons. In the case where the default screen is\nbeing used, looking up an icon can be as simple as:\n|[&lt;!-- language=\"C\" --&gt;\nGError <em>error = NULL;\nGtkIconTheme </em>icon_theme;\nGdkPixbuf *pixbuf;</p><p>icon_theme = gtk_icon_theme_get_default ();\npixbuf = gtk_icon_theme_load_icon (icon_theme,\n                                   \"my-icon-name\", // icon name\n                                   48, // icon size\n                                   0,  // flags\n                                   &amp;error);\nif (!pixbuf)\n  {\n    g_warning (\"Couldn\u2019t load icon: %s\", error-&gt;message);\n    g_error_free (error);\n  }\nelse\n  {\n    // Use the pixbuf\n    g_object_unref (pixbuf);\n  }\n]|</p>",
            "kind": "class",
            "name": "IconTheme"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.IconView\"/> provides an alternative view on a <span data-xref=\"Gtk.TreeModel\"/>.\nIt displays the model as a grid of icons with labels. Like\n<span data-xref=\"Gtk.TreeView\"/>, it allows to select one or multiple items\n(depending on the selection mode, see <span data-xref=\"Gtk.IconView.set_selection_mode\"/>).\nIn addition to selection with the arrow keys, <span data-xref=\"Gtk.IconView\"/> supports\nrubberband selection, which is controlled by dragging the pointer.</p><p>Note that if the tree model is backed by an actual tree store (as\nopposed to a flat list where the mapping to icons is obvious),\n<span data-xref=\"Gtk.IconView\"/> will only display the first level of the tree and\nignore the tree\u2019s branches.</p>",
            "kind": "class",
            "name": "IconView"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.Image\"/> widget displays an image. Various kinds of object\ncan be displayed as an image; most typically, you would load a\n<span data-xref=\"GdkPixbuf.Pixbuf\">GdkPixbuf.Pixbuf</span> (\"pixel buffer\") from a file, and then display that.\nThere\u2019s a convenience function to do this, <span data-xref=\"Gtk.Image.new_from_file\"/>,\nused as follows:\n|[&lt;!-- language=\"C\" --&gt;\n  GtkWidget *image;\n  image = gtk_image_new_from_file (\"myfile.png\");\n]|\nIf the file isn\u2019t loaded successfully, the image will contain a\n\u201cbroken image\u201d icon similar to that used in many web browsers.\nIf you want to handle errors in loading the file yourself,\nfor example by displaying an error message, then load the image with\n<span data-xref=\"GdkPixbuf.Pixbuf.new_from_file\">GdkPixbuf.Pixbuf.new_from_file</span>, then create the <span data-xref=\"Gtk.Image\"/> with\n<span data-xref=\"Gtk.Image.new_from_pixbuf\"/>.</p><p>The image file may contain an animation, if so the <span data-xref=\"Gtk.Image\"/> will\ndisplay an animation (<span data-xref=\"GdkPixbuf.PixbufAnimation\">GdkPixbuf.PixbufAnimation</span>) instead of a static image.</p><p><span data-xref=\"Gtk.Image\"/> is a subclass of <span data-xref=\"Gtk.Misc\"/>, which implies that you can\nalign it (center, left, right) and add padding to it, using\n<span data-xref=\"Gtk.Misc\"/> methods.</p><p><span data-xref=\"Gtk.Image\"/> is a \u201cno window\u201d widget (has no <span data-xref=\"Gdk.Window\">Gdk.Window</span> of its own),\nso by default does not receive events. If you want to receive events\non the image, such as button clicks, place the image inside a\n<span data-xref=\"Gtk.EventBox\"/>, then connect to the event signals on the event box.</p><h2>Handling button press events on a <span data-xref=\"Gtk.Image\"/>.</h2><p>|[&lt;!-- language=\"C\" --&gt;\n  static gboolean\n  button_press_callback (GtkWidget      <em>event_box,\n                         GdkEventButton </em>event,\n                         gpointer        data)\n  {\n    g_print (\"Event box clicked at coordinates %f,%f\\n\",\n             event-&gt;x, event-&gt;y);</p><pre><code>// Returning TRUE means we handled the event, so the signal\n// emission should be stopped (don\u2019t call any further callbacks\n// that may be connected). Return FALSE to continue invoking callbacks.\nreturn TRUE;\n</code></pre>\n<p>}</p><p>static GtkWidget<em>\n  create_image (void)\n  {\n    GtkWidget </em>image;\n    GtkWidget *event_box;</p><pre><code>image = gtk_image_new_from_file (\"myfile.png\");\n</code></pre><pre><code>event_box = gtk_event_box_new ();\n</code></pre><pre><code>gtk_container_add (GTK_CONTAINER (event_box), image);\n</code></pre><pre><code>g_signal_connect (G_OBJECT (event_box),\n                  \"button_press_event\",\n                  G_CALLBACK (button_press_callback),\n                  image);\n</code></pre><pre><code>return image;\n</code></pre>\n<p>}\n]|</p><p>When handling events on the event box, keep in mind that coordinates\nin the image may be different from event box coordinates due to\nthe alignment and padding settings on the image (see <span data-xref=\"Gtk.Misc\"/>).\nThe simplest way to solve this is to set the alignment to 0.0\n(left/top), and set the padding to zero. Then the origin of\nthe image will be the same as the origin of the event box.</p><p>Sometimes an application will want to avoid depending on external data\nfiles, such as image files. GTK+ comes with a program to avoid this,\ncalled \u201cgdk-pixbuf-csource\u201d. This library\nallows you to convert an image into a C variable declaration, which\ncan then be loaded into a <span data-xref=\"GdkPixbuf.Pixbuf\">GdkPixbuf.Pixbuf</span> using\n<span data-xref=\"GdkPixbuf.Pixbuf.new_from_inline\">GdkPixbuf.Pixbuf.new_from_inline</span>.</p>",
            "kind": "class",
            "name": "Image"
        },
        {
            "doc": "<p>A GtkImageMenuItem is a menu item which has an icon next to the text label.</p><p>Note that the user can disable display of menu icons, so make sure to still\nfill in the text label.</p>",
            "kind": "class",
            "name": "ImageMenuItem"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.InfoBar\"/> is a widget that can be used to show messages to\nthe user without showing a dialog. It is often temporarily shown\nat the top or bottom of a document. In contrast to <span data-xref=\"Gtk.Dialog\"/>, which\nhas a action area at the bottom, <span data-xref=\"Gtk.InfoBar\"/> has an action area\nat the side.</p><p>The API of <span data-xref=\"Gtk.InfoBar\"/> is very similar to <span data-xref=\"Gtk.Dialog\"/>, allowing you\nto add buttons to the action area with <span data-xref=\"Gtk.InfoBar.add_button\"/> or\n<span data-xref=\"Gtk.InfoBar.new_with_buttons\"/>. The sensitivity of action widgets\ncan be controlled with <span data-xref=\"Gtk.InfoBar.set_response_sensitive\"/>.\nTo add widgets to the main content area of a <span data-xref=\"Gtk.InfoBar\"/>, use\n<span data-xref=\"Gtk.InfoBar.get_content_area\"/> and add your widgets to the container.</p><p>Similar to <span data-xref=\"Gtk.MessageDialog\"/>, the contents of a <span data-xref=\"Gtk.InfoBar\"/> can by\nclassified as error message, warning, informational message, etc,\nby using <span data-xref=\"Gtk.InfoBar.set_message_type\"/>. GTK+ may use the message type\nto determine how the message is displayed.</p><p>A simple example for using a GtkInfoBar:\n|[&lt;!-- language=\"C\" --&gt;\n// set up info bar\nGtkWidget <em>widget;\nGtkInfoBar </em>bar;</p><p>widget = gtk_info_bar_new ();\nbar = GTK_INFO_BAR (bar);</p><p>gtk_widget_set_no_show_all (widget, TRUE);\nmessage_label = gtk_label_new (\"\");\ngtk_widget_show (message_label);\ncontent_area = gtk_info_bar_get_content_area (bar);\ngtk_container_add (GTK_CONTAINER (content_area),\n                   message_label);\ngtk_info_bar_add_button (bar,\n                         _(\"_OK\"),\n                         GTK_RESPONSE_OK);\ng_signal_connect (bar,\n                  \"response\",\n                  G_CALLBACK (gtk_widget_hide),\n                  NULL);\ngtk_grid_attach (GTK_GRID (grid),\n                 widget,\n                 0, 2, 1, 1);</p><p>...</p><p>// show an error message\ngtk_label_set_text (GTK_LABEL (message_label), message);\ngtk_info_bar_set_message_type (bar,\n                               GTK_MESSAGE_ERROR);\ngtk_widget_show (bar);\n]|</p><h1>GtkInfoBar as GtkBuildable</h1><p>The GtkInfoBar implementation of the GtkBuildable interface exposes\nthe content area and action area as internal children with the names\n\u201ccontent_area\u201d and \u201caction_area\u201d.</p><p>GtkInfoBar supports a custom &lt;action-widgets&gt; element, which can contain\nmultiple &lt;action-widget&gt; elements. The \u201cresponse\u201d attribute specifies a\nnumeric response, and the content of the element is the id of widget\n(which should be a child of the dialogs @action_area).</p>",
            "kind": "class",
            "name": "InfoBar"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.Invisible\"/> widget is used internally in GTK+, and is probably not\nvery useful for application developers.</p><p>It is used for reliable pointer grabs and selection handling in the code\nfor drag-and-drop.</p>",
            "kind": "class",
            "name": "Invisible"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.Label\"/> widget displays a small amount of text. As the name\nimplies, most labels are used to label another widget such as a\n<span data-xref=\"Gtk.Button\"/>, a <span data-xref=\"Gtk.MenuItem\"/>, or a <span data-xref=\"Gtk.ComboBox\"/>.</p><h1>GtkLabel as GtkBuildable</h1><p>The GtkLabel implementation of the GtkBuildable interface supports a\ncustom &lt;attributes&gt; element, which supports any number of &lt;attribute&gt;\nelements. The &lt;attribute&gt; element has attributes named \u201cname\u201c, \u201cvalue\u201c,\n\u201cstart\u201c and \u201cend\u201c and allows you to specify <span data-xref=\"Pango.Attribute\">Pango.Attribute</span> values for\nthis label.</p><p>An example of a UI definition fragment specifying Pango attributes:\n|[\n&lt;object class=\"GtkLabel\"&gt;\n  &lt;attributes&gt;\n    &lt;attribute name=\"weight\" value=\"PANGO_WEIGHT_BOLD\"/&gt;\n    &lt;attribute name=\"background\" value=\"red\" start=\"5\" end=\"10\"/&gt;\"\n  &lt;/attributes&gt;\n&lt;/object&gt;\n]|</p><p>The start and end attributes specify the range of characters to which the\nPango attribute applies. If start and end are not specified, the attribute is\napplied to the whole text. Note that specifying ranges does not make much\nsense with translatable attributes. Use markup embedded in the translatable\ncontent instead.</p><h1>Mnemonics</h1><p>Labels may contain \u201cmnemonics\u201d. Mnemonics are\nunderlined characters in the label, used for keyboard navigation.\nMnemonics are created by providing a string with an underscore before\nthe mnemonic character, such as <code>\"_File\"</code>, to the\nfunctions <span data-xref=\"Gtk.Label.new_with_mnemonic\"/> or\n<span data-xref=\"Gtk.Label.set_text_with_mnemonic\"/>.</p><p>Mnemonics automatically activate any activatable widget the label is\ninside, such as a <span data-xref=\"Gtk.Button\"/>; if the label is not inside the\nmnemonic\u2019s target widget, you have to tell the label about the target\nusing <span data-xref=\"Gtk.Label.set_mnemonic_widget\"/>. Here\u2019s a simple example where\nthe label is inside a button:</p><p>|[&lt;!-- language=\"C\" --&gt;\n  // Pressing Alt+H will activate this button\n  button = gtk_button_new ();\n  label = gtk_label_new_with_mnemonic (\"_Hello\");\n  gtk_container_add (GTK_CONTAINER (button), label);\n]|</p><p>There\u2019s a convenience function to create buttons with a mnemonic label\nalready inside:</p><p>|[&lt;!-- language=\"C\" --&gt;\n  // Pressing Alt+H will activate this button\n  button = gtk_button_new_with_mnemonic (\"_Hello\");\n]|</p><p>To create a mnemonic for a widget alongside the label, such as a\n<span data-xref=\"Gtk.Entry\"/>, you have to point the label at the entry with\n<span data-xref=\"Gtk.Label.set_mnemonic_widget\"/>:</p><p>|[&lt;!-- language=\"C\" --&gt;\n  // Pressing Alt+H will focus the entry\n  entry = gtk_entry_new ();\n  label = gtk_label_new_with_mnemonic (\"_Hello\");\n  gtk_label_set_mnemonic_widget (GTK_LABEL (label), entry);\n]|</p><h1>Markup (styled text)</h1><p>To make it easy to format text in a label (changing colors,\nfonts, etc.), label text can be provided in a simple\n[markup format][PangoMarkupFormat].</p><p>Here\u2019s how to create a label with a small font:\n|[&lt;!-- language=\"C\" --&gt;\n  label = gtk_label_new (NULL);\n  gtk_label_set_markup (GTK_LABEL (label), \"&lt;small&gt;Small text&lt;/small&gt;\");\n]|</p><p>(See [complete documentation][PangoMarkupFormat] of available\ntags in the Pango manual.)</p><p>The markup passed to <span data-xref=\"Gtk.Label.set_markup\"/> must be valid; for example,\nliteral &lt;, &gt; and &amp; characters must be escaped as &amp;lt;, &amp;gt;, and &amp;amp;.\nIf you pass text obtained from the user, file, or a network to\n<span data-xref=\"Gtk.Label.set_markup\"/>, you\u2019ll want to escape it with\n<span data-xref=\"GLib.markup_escape_text\">GLib.markup_escape_text</span> or <span data-xref=\"GLib.markup_printf_escaped\">GLib.markup_printf_escaped</span>.</p><p>Markup strings are just a convenient way to set the <span data-xref=\"Pango.AttrList\">Pango.AttrList</span> on\na label; <span data-xref=\"Gtk.Label.set_attributes\"/> may be a simpler way to set\nattributes in some cases. Be careful though; <span data-xref=\"Pango.AttrList\">Pango.AttrList</span> tends to\ncause internationalization problems, unless you\u2019re applying attributes\nto the entire string (i.e. unless you set the range of each attribute\nto [0, %G_MAXINT)). The reason is that specifying the start_index and\nend_index for a <span data-xref=\"Pango.Attribute\">Pango.Attribute</span> requires knowledge of the exact string\nbeing displayed, so translations will cause problems.</p><h1>Selectable labels</h1><p>Labels can be made selectable with <span data-xref=\"Gtk.Label.set_selectable\"/>.\nSelectable labels allow the user to copy the label contents to\nthe clipboard. Only labels that contain useful-to-copy information\n&amp;mdash; such as error messages &amp;mdash; should be made selectable.</p><h1>Text layout</h1><p>A label can contain any number of paragraphs, but will have\nperformance problems if it contains more than a small number.\nParagraphs are separated by newlines or other paragraph separators\nunderstood by Pango.</p><p>Labels can automatically wrap text if you call\n<span data-xref=\"Gtk.Label.set_line_wrap\"/>.</p><p><span data-xref=\"Gtk.Label.set_justify\"/> sets how the lines in a label align\nwith one another. If you want to set how the label as a whole\naligns in its available space, see <span data-xref=\"Gtk.Misc.set_alignment\"/>.</p><p>The <span data-xref=\"Gtk.Label-width-chars\"/> and <span data-xref=\"Gtk.Label-max-width-chars\"/> properties\ncan be used to control the size allocation of ellipsized or wrapped\nlabels. For ellipsizing labels, if either is specified (and less\nthan the actual text size), it is used as the minimum width, and the actual\ntext size is used as the natural width of the label. For wrapping labels,\nwidth-chars is used as the minimum width, if specified, and max-width-chars\nis used as the natural width. Even if max-width-chars specified, wrapping\nlabels will be rewrapped to use all of the available width.</p><p>Note that the interpretation of <span data-xref=\"Gtk.Label-width-chars\"/> and\n<span data-xref=\"Gtk.Label-max-width-chars\"/> has changed a bit with the introduction of\n[width-for-height geometry management.][geometry-management]</p><h1>Links</h1><p>Since 2.18, GTK+ supports markup for clickable hyperlinks in addition\nto regular Pango markup. The markup for links is borrowed from HTML,\nusing the <code>&amp;lt;a&amp;gt;</code> with \u201chref\u201c and \u201ctitle\u201c attributes. GTK+ renders links\nsimilar to the way they appear in web browsers, with colored, underlined\ntext. The \u201ctitle\u201c attribute is displayed as a tooltip on the link.</p><p>An example looks like this:</p><p>|[&lt;!-- language=\"C\" --&gt;\nconst gchar *text =\n\"Go to the\"\n\"&lt;a href=\\\"http://www.gtk.org title=\"&amp;lt;i&amp;gt;Our&amp;lt;/i&amp;gt; website\\\"&gt;\"\n\"GTK+ website&lt;/a&gt; for more...\";\ngtk_label_set_markup (label, text);\n]|</p><p>It is possible to implement custom handling for links and their tooltips with\nthe <span data-xref=\"Gtk.Label-activate-link\"/> signal and the <span data-xref=\"Gtk.Label.get_current_uri\"/> function.</p>",
            "kind": "class",
            "name": "Label"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.Layout\"/> is similar to <span data-xref=\"Gtk.DrawingArea\"/> in that it\u2019s a \u201cblank slate\u201d\nand doesn\u2019t do anything but paint a blank background by default. It's\ndifferent in that it supports scrolling natively (you can add it to a\n<span data-xref=\"Gtk.ScrolledWindow\"/>), and it can contain child widgets, since it\u2019s a\n<span data-xref=\"Gtk.Container\"/>. However if you\u2019re just going to draw, a <span data-xref=\"Gtk.DrawingArea\"/>\nis a better choice since it has lower overhead.</p><p>When handling expose events on a <span data-xref=\"Gtk.Layout\"/>, you must draw to\nGTK_LAYOUT (layout)-&gt;bin_window, rather than to\nGTK_WIDGET (layout)-&gt;window, as you would for a drawing\narea.</p>",
            "kind": "class",
            "name": "Layout"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.LevelBar\"/> is a bar widget that can be used\nas a level indicator. Typical use cases are displaying the strength\nof a password, or showing the charge level of a battery.</p><p>Use <span data-xref=\"Gtk.LevelBar.set_value\"/> to set the current value, and\n<span data-xref=\"Gtk.LevelBar.add_offset_value\"/> to set the value offsets at which\nthe bar will be considered in a different state. GTK will add two offsets\nby default on the level bar: #GTK_LEVEL_BAR_OFFSET_LOW and</p>\n<h1>GTK_LEVEL_BAR_OFFSET_HIGH, with values 0.25 and 0.75 respectively.</h1><h2>Adding a custom offset on the bar</h2><p>|[&lt;!-- language=\"C\" --&gt;</p><p>static GtkWidget <em>\ncreate_level_bar (void)\n{\n  GtkWidget </em>widget;\n  GtkLevelBar *bar;</p><p>widget = gtk_level_bar_new ();\n  bar = GTK_LEVEL_BAR (widget);</p><p>/&lt;!----&gt;<em> This changes the value of the default low offset\n  </em>&lt;!----&gt;/</p><p>gtk_level_bar_add_offset_value (bar,\n                                  GTK_LEVEL_BAR_OFFSET_LOW,\n                                  0.10);</p><p>/&lt;!----&gt;* This adds a new offset to the bar; the application will\n   be able to change its color by using the following selector,\n   either by adding it to its CSS file or using\n   <span data-xref=\"Gtk.CssProvider.load_from_data\"/> and\n   <span data-xref=\"Gtk.StyleContext.add_provider\"/></p><ul>\n<li>.level-bar.fill-block.level-my-offset {</li>\n<li>background-color: green;</li>\n<li>border-style: solid;</li>\n<li>border-color: black;</li>\n<li>border-style: 1px;</li>\n<li>}\n   *&lt;!----&gt;/</li>\n</ul><p>gtk_level_bar_add_offset_value (bar, \"my-offset\", 0.60);</p><p>return widget;\n}\n]|</p><p>The default interval of values is between zero and one, but it\u2019s possible to\nmodify the interval using <span data-xref=\"Gtk.LevelBar.set_min_value\"/> and\n<span data-xref=\"Gtk.LevelBar.set_max_value\"/>. The value will be always drawn in proportion to\nthe admissible interval, i.e. a value of 15 with a specified interval between\n10 and 20 is equivalent to a value of 0.5 with an interval between 0 and 1.\nWhen #GTK_LEVEL_BAR_MODE_DISCRETE is used, the bar level is rendered\nas a finite and number of separated blocks instead of a single one. The number\nof blocks that will be rendered is equal to the number of units specified by\nthe admissible interval.\nFor instance, to build a bar rendered with five blocks, it\u2019s sufficient to\nset the minimum value to 0 and the maximum value to 5 after changing the indicator\nmode to discrete.</p>",
            "kind": "class",
            "name": "LevelBar"
        },
        {
            "doc": "<p>A GtkLinkButton is a <span data-xref=\"Gtk.Button\"/> with a hyperlink, similar to the one\nused by web browsers, which triggers an action when clicked. It is useful\nto show quick links to resources.</p><p>A link button is created by calling either <span data-xref=\"Gtk.LinkButton.new\"/> or\n<span data-xref=\"Gtk.LinkButton.new_with_label\"/>. If using the former, the URI you pass\nto the constructor is used as a label for the widget.</p><p>The URI bound to a GtkLinkButton can be set specifically using\n<span data-xref=\"Gtk.LinkButton.set_uri\"/>, and retrieved using <span data-xref=\"Gtk.LinkButton.get_uri\"/>.</p><p>By default, GtkLinkButton calls <span data-xref=\"Gtk.show_uri\"/> when the button is\nclicked. This behaviour can be overridden by connecting to the\n<span data-xref=\"Gtk.LinkButton-activate-link\"/> signal and returning <code>true</code> from the\nsignal handler.</p>",
            "kind": "class",
            "name": "LinkButton"
        },
        {
            "doc": "<p>A GtkListBox is a vertical container that contains GtkListBoxRow\nchildren. These rows can by dynamically sorted and filtered, and\nheaders can be added dynamically depending on the row content.\nIt also allows keyboard and mouse navigation and selection like\na typical list.</p><p>Using GtkListBox is often an alternative to <span data-xref=\"Gtk.TreeView\"/>, especially\nwhen the list contents has a more complicated layout than what is allowed\nby a <span data-xref=\"Gtk.CellRenderer\"/>, or when the contents is interactive (i.e. has a\nbutton in it).</p><p>Although a <span data-xref=\"Gtk.ListBox\"/> must have only <span data-xref=\"Gtk.ListBoxRow\"/> children you can\nadd any kind of widget to it via <span data-xref=\"Gtk.Container.add\"/>, and a <span data-xref=\"Gtk.ListBoxRow\"/>\nwidget will automatically be inserted between the list and the widget.</p><p>The GtkListBox widget was added in GTK+ 3.10.</p>",
            "kind": "class",
            "name": "ListBox"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ListBoxRow"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.ListStore\"/> object is a list model for use with a <span data-xref=\"Gtk.TreeView\"/>\nwidget.  It implements the <span data-xref=\"Gtk.TreeModel\"/> interface, and consequentialy,\ncan use all of the methods available there.  It also implements the\n<span data-xref=\"Gtk.TreeSortable\"/> interface so it can be sorted by the view.\nFinally, it also implements the tree\n[drag and drop][gtk3-GtkTreeView-drag-and-drop]\ninterfaces.</p><p>The <span data-xref=\"Gtk.ListStore\"/> can accept most GObject types as a column type, though\nit can\u2019t accept all custom types.  Internally, it will keep a copy of\ndata passed in (such as a string or a boxed pointer).  Columns that\naccept #GObjects are handled a little differently.  The\n<span data-xref=\"Gtk.ListStore\"/> will keep a reference to the object instead of copying the\nvalue.  As a result, if the object is modified, it is up to the\napplication writer to call <span data-xref=\"Gtk.TreeModel.row_changed\"/> to emit the</p>\n<h1>GtkTreeModel::row_changed signal.  This most commonly affects lists with</h1>\n<h1>GdkPixbufs stored.</h1><p>An example for creating a simple list store:\n|[&lt;!-- language=\"C\" --&gt;\nenum {\n  COLUMN_STRING,\n  COLUMN_INT,\n  COLUMN_BOOLEAN,\n  N_COLUMNS\n};</p><p>{\n  GtkListStore <em>list_store;\n  GtkTreePath </em>path;\n  GtkTreeIter iter;\n  gint i;</p><p>list_store = gtk_list_store_new (N_COLUMNS,\n                                   G_TYPE_STRING,\n                                   G_TYPE_INT,\n                                   G_TYPE_BOOLEAN);</p><p>for (i = 0; i &lt; 10; i++)\n    {\n      gchar *some_data;</p><pre><code>  some_data = get_some_data (i);\n</code></pre><pre><code>  // Add a new row to the model\n  gtk_list_store_append (list_store, &amp;amp;iter);\n  gtk_list_store_set (list_store, &amp;amp;iter,\n                      COLUMN_STRING, some_data,\n                      COLUMN_INT, i,\n                      COLUMN_BOOLEAN,  FALSE,\n                      -1);\n</code></pre><pre><code>  // As the store will keep a copy of the string internally,\n  // we free some_data.\n  g_free (some_data);\n}\n</code></pre><p>// Modify a particular row\n  path = gtk_tree_path_new_from_string (\"4\");\n  gtk_tree_model_get_iter (GTK_TREE_MODEL (list_store),\n                           &amp;iter,\n                           path);\n  gtk_tree_path_free (path);\n  gtk_list_store_set (list_store, &amp;iter,\n                      COLUMN_BOOLEAN, TRUE,\n                      -1);\n}\n]|</p><h1>Performance Considerations</h1><p>Internally, the <span data-xref=\"Gtk.ListStore\"/> was implemented with a linked list with\na tail pointer prior to GTK+ 2.6.  As a result, it was fast at data\ninsertion and deletion, and not fast at random data access.  The\n<span data-xref=\"Gtk.ListStore\"/> sets the #GTK_TREE_MODEL_ITERS_PERSIST flag, which means\nthat #GtkTreeIters can be cached while the row exists.  Thus, if\naccess to a particular row is needed often and your code is expected to\nrun on older versions of GTK+, it is worth keeping the iter around.</p><h1>Atomic Operations</h1><p>It is important to note that only the methods\n<span data-xref=\"Gtk.ListStore.insert_with_values\"/> and <span data-xref=\"Gtk.ListStore.insert_with_valuesv\"/>\nare atomic, in the sense that the row is being appended to the store and the\nvalues filled in in a single operation with regard to <span data-xref=\"Gtk.TreeModel\"/> signaling.\nIn contrast, using e.g. <span data-xref=\"Gtk.ListStore.append\"/> and then <span data-xref=\"Gtk.ListStore.set\"/>\nwill first create a row, which triggers the <span data-xref=\"Gtk.TreeModel-row-inserted\"/> signal\non <span data-xref=\"Gtk.ListStore\"/>. The row, however, is still empty, and any signal handler\nconnecting to <span data-xref=\"Gtk.TreeModel-row-inserted\"/> on this particular store should be prepared\nfor the situation that the row might be empty. This is especially important\nif you are wrapping the <span data-xref=\"Gtk.ListStore\"/> inside a <span data-xref=\"Gtk.TreeModelFilter\"/> and are\nusing a <span data-xref=\"Gtk.TreeModelFilterVisibleFunc\"/>. Using any of the non-atomic operations\nto append rows to the <span data-xref=\"Gtk.ListStore\"/> will cause the\n<span data-xref=\"Gtk.TreeModelFilterVisibleFunc\"/> to be visited with an empty row first; the\nfunction must be prepared for that.</p><h1>GtkListStore as GtkBuildable</h1><p>The GtkListStore implementation of the GtkBuildable interface allows\nto specify the model columns with a &lt;columns&gt; element that may contain\nmultiple &lt;column&gt; elements, each specifying one model column. The \u201ctype\u201d\nattribute specifies the data type for the column.</p><p>Additionally, it is possible to specify content for the list store\nin the UI definition, with the &lt;data&gt; element. It can contain multiple\n&lt;row&gt; elements, each specifying to content for one row of the list model.\nInside a &lt;row&gt;, the &lt;col&gt; elements specify the content for individual cells.</p><p>Note that it is probably more common to define your models in the code,\nand one might consider it a layering violation to specify the content of\na list store in a UI definition, data, not presentation, and common wisdom\nis to separate the two, as far as possible.</p><p>An example of a UI Definition fragment for a list store:\n|[&lt;!-- language=\"C\" --&gt;\n&lt;object class=\"GtkListStore\"&gt;\n  &lt;columns&gt;\n    &lt;column type=\"gchararray\"/&gt;\n    &lt;column type=\"gchararray\"/&gt;\n    &lt;column type=\"gint\"/&gt;\n  &lt;/columns&gt;\n  &lt;data&gt;\n    &lt;row&gt;\n      &lt;col id=\"0\"&gt;John&lt;/col&gt;\n      &lt;col id=\"1\"&gt;Doe&lt;/col&gt;\n      &lt;col id=\"2\"&gt;25&lt;/col&gt;\n    &lt;/row&gt;\n    &lt;row&gt;\n      &lt;col id=\"0\"&gt;Johan&lt;/col&gt;\n      &lt;col id=\"1\"&gt;Dahlin&lt;/col&gt;\n      &lt;col id=\"2\"&gt;50&lt;/col&gt;\n    &lt;/row&gt;\n  &lt;/data&gt;\n&lt;/object&gt;\n]|</p>",
            "kind": "class",
            "name": "ListStore"
        },
        {
            "doc": "<p>GtkLockButton is a widget that can be used in control panels or\npreference dialogs to allow users to obtain and revoke authorizations\nneeded to operate the controls. The required authorization is represented\nby a <span data-xref=\"Gio.Permission\">Gio.Permission</span> object. Concrete implementations of <span data-xref=\"Gio.Permission\">Gio.Permission</span> may use\nPolicyKit or some other authorization framework. To obtain a PolicyKit-based\n<span data-xref=\"Gio.Permission\">Gio.Permission</span>, use polkit_permission_new().</p><p>If the user is not currently allowed to perform the action, but can obtain\nthe permission, the widget looks like this:</p><p><img alt=\"\" src=\"lockbutton-locked.png\" /></p><p>and the user can click the button to request the permission. Depending\non the platform, this may pop up an authentication dialog or ask the user\nto authenticate in some other way. Once the user has obtained the permission,\nthe widget changes to this:</p><p><img alt=\"\" src=\"lockbutton-unlocked.png\" /></p><p>and the permission can be dropped again by clicking the button. If the user\nis not able to obtain the permission at all, the widget looks like this:</p><p><img alt=\"\" src=\"lockbutton-sorry.png\" /></p><p>If the user has the permission and cannot drop it, the button is hidden.</p><p>The text (and tooltips) that are shown in the various cases can be adjusted\nwith the <span data-xref=\"Gtk.LockButton-text-lock\"/>, <span data-xref=\"Gtk.LockButton-text-unlock\"/>,\n<span data-xref=\"Gtk.LockButton-tooltip-lock\"/>, <span data-xref=\"Gtk.LockButton-tooltip-unlock\"/> and\n<span data-xref=\"Gtk.LockButton-tooltip-not-authorized\"/> properties.</p>",
            "kind": "class",
            "name": "LockButton"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.Menu\"/> is a <span data-xref=\"Gtk.MenuShell\"/> that implements a drop down menu\nconsisting of a list of <span data-xref=\"Gtk.MenuItem\"/> objects which can be navigated\nand activated by the user to perform application functions.</p><p>A <span data-xref=\"Gtk.Menu\"/> is most commonly dropped down by activating a\n<span data-xref=\"Gtk.MenuItem\"/> in a <span data-xref=\"Gtk.MenuBar\"/> or popped up by activating a\n<span data-xref=\"Gtk.MenuItem\"/> in another <span data-xref=\"Gtk.Menu\"/>.</p><p>A <span data-xref=\"Gtk.Menu\"/> can also be popped up by activating a <span data-xref=\"Gtk.ComboBox\"/>.\nOther composite widgets such as the <span data-xref=\"Gtk.Notebook\"/> can pop up a\n<span data-xref=\"Gtk.Menu\"/> as well.</p><p>Applications can display a <span data-xref=\"Gtk.Menu\"/> as a popup menu by calling the\n<span data-xref=\"Gtk.Menu.popup\"/> function.  The example below shows how an application\ncan pop up a menu when the 3rd mouse button is pressed.</p><h2>Connecting the popup signal handler.</h2><p>|[&lt;!-- language=\"C\" --&gt;\n  // connect our handler which will popup the menu\n  g_signal_connect_swapped (window, \"button_press_event\",\nG_CALLBACK (my_popup_handler), menu);\n]|</p><h2>Signal handler which displays a popup menu.</h2><p>|[&lt;!-- language=\"C\" --&gt;\nstatic gint\nmy_popup_handler (GtkWidget <em>widget, GdkEvent </em>event)\n{\n  GtkMenu <em>menu;\n  GdkEventButton </em>event_button;</p><p>g_return_val_if_fail (widget != NULL, FALSE);\n  g_return_val_if_fail (GTK_IS_MENU (widget), FALSE);\n  g_return_val_if_fail (event != NULL, FALSE);</p><p>// The \"widget\" is the menu that was supplied when\n  // g_signal_connect_swapped() was called.\n  menu = GTK_MENU (widget);</p><p>if (event-&gt;type == GDK_BUTTON_PRESS)\n    {\n      event_button = (GdkEventButton *) event;\n      if (event_button-&gt;button == GDK_BUTTON_SECONDARY)\n        {\n          gtk_menu_popup (menu, NULL, NULL, NULL, NULL,\n                          event_button-&gt;button, event_button-&gt;time);\n          return TRUE;\n        }\n    }</p><p>return FALSE;\n}\n]|</p>",
            "kind": "class",
            "name": "Menu"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.MenuBar\"/> is a subclass of <span data-xref=\"Gtk.MenuShell\"/> which contains one or\nmore #GtkMenuItems. The result is a standard menu bar which can hold\nmany menu items.</p>",
            "kind": "class",
            "name": "MenuBar"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.MenuButton\"/> widget is used to display a popup when clicked on.\nThis popup can be provided either as a <span data-xref=\"Gtk.Menu\"/>, a <span data-xref=\"Gtk.Popover\"/> or an\nabstract <span data-xref=\"Gio.MenuModel\">Gio.MenuModel</span>.</p><p>The <span data-xref=\"Gtk.MenuButton\"/> widget can hold any valid child widget. That is, it\ncan hold almost any other standard <span data-xref=\"Gtk.Widget\"/>. The most commonly used\nchild is the provided <span data-xref=\"Gtk.Arrow\"/>.</p><p>The positioning of the popup is determined by the <span data-xref=\"Gtk.MenuButton-direction\"/>\nproperty of the menu button.</p><p>For menus, the <span data-xref=\"Gtk.Widget-halign\"/> and <span data-xref=\"Gtk.Widget-valign\"/> properties of the\nmenu are also taken into account. For example, when the direction is\n<span data-xref=\"Gtk.ArrowType\"/>.down and the horizontal alignment is <span data-xref=\"Gtk.Align\"/>.start, the\nmenu will be positioned below the button, with the starting edge\n(depending on the text direction) of the menu aligned with the starting\nedge of the button. If there is not enough space below the button, the\nmenu is popped up above the button instead. If the alignment would move\npart of the menu offscreen, it is \u201cpushed in\u201d.</p><h2>Direction = Down</h2><ul>\n<li>halign = start</li>\n</ul><pre><code>![](down-start.png)\n</code></pre><ul>\n<li>halign = center</li>\n</ul><pre><code>![](down-center.png)\n</code></pre><ul>\n<li>halign = end</li>\n</ul><pre><code>![](down-end.png)\n</code></pre><h2>Direction = Up</h2><ul>\n<li>halign = start</li>\n</ul><pre><code>![](up-start.png)\n</code></pre><ul>\n<li>halign = center</li>\n</ul><pre><code>![](up-center.png)\n</code></pre><ul>\n<li>halign = end</li>\n</ul><pre><code>![](up-end.png)\n</code></pre><h2>Direction = Left</h2><ul>\n<li>valign = start</li>\n</ul><pre><code>![](left-start.png)\n</code></pre><ul>\n<li>valign = center</li>\n</ul><pre><code>![](left-center.png)\n</code></pre><ul>\n<li>valign = end</li>\n</ul><pre><code>![](left-end.png)\n</code></pre><h2>Direction = Right</h2><ul>\n<li>valign = start</li>\n</ul><pre><code>![](right-start.png)\n</code></pre><ul>\n<li>valign = center</li>\n</ul><pre><code>![](right-center.png)\n</code></pre><ul>\n<li>valign = end</li>\n</ul><pre><code>![](right-end.png)\n</code></pre>",
            "kind": "class",
            "name": "MenuButton"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.MenuItem\"/> widget and the derived widgets are the only valid\nchildren for menus. Their function is to correctly handle highlighting,\nalignment, events and submenus.</p><p>As a GtkMenuItem derives from <span data-xref=\"Gtk.Bin\"/> it can hold any valid child widget,\nalthough only a few are really useful.</p><p>By default, a GtkMenuItem sets a <span data-xref=\"Gtk.AccelLabel\"/> as its child.\nGtkMenuItem has direct functions to set the label and its mnemonic.\nFor more advanced label settings, you can fetch the child widget from the GtkBin.</p><p>An example for setting markup and accelerator on a MenuItem:\n|[&lt;!-- language=\"C\" --&gt;\nGtkWidget *child = gtk_bin_get_child (GTK_BIN (menu_item));\ngtk_label_set_markup (GTK_LABEL (child), \"&lt;i&gt;new label&lt;/i&gt; with &lt;b&gt;markup&lt;/b&gt;\");\ngtk_accel_label_set_accel (GTK_ACCEL_LABEL (child), GDK_KEY_1, 0);\n]|</p><h1>GtkMenuItem as GtkBuildable</h1><p>The GtkMenuItem implementation of the <span data-xref=\"Gtk.Buildable\"/> interface supports\nadding a submenu by specifying \u201csubmenu\u201d as the \u201ctype\u201d attribute of\na &lt;child&gt; element.</p><p>An example of UI definition fragment with submenus:\n|[\n&lt;object class=\"GtkMenuItem\"&gt;\n  &lt;child type=\"submenu\"&gt;\n    &lt;object class=\"GtkMenu\"/&gt;\n  &lt;/child&gt;\n&lt;/object&gt;\n]|</p>",
            "kind": "class",
            "name": "MenuItem"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.MenuShell\"/> is the abstract base class used to derive the\n<span data-xref=\"Gtk.Menu\"/> and <span data-xref=\"Gtk.MenuBar\"/> subclasses.</p><p>A <span data-xref=\"Gtk.MenuShell\"/> is a container of <span data-xref=\"Gtk.MenuItem\"/> objects arranged\nin a list which can be navigated, selected, and activated by the\nuser to perform application functions. A <span data-xref=\"Gtk.MenuItem\"/> can have a\nsubmenu associated with it, allowing for nested hierarchical menus.</p><h1>Terminology</h1><p>A menu item can be \u201cselected\u201d, this means that it is displayed\nin the prelight state, and if it has a submenu, that submenu\nwill be popped up.</p><p>A menu is \u201cactive\u201d when it is visible onscreen and the user\nis selecting from it. A menubar is not active until the user\nclicks on one of its menuitems. When a menu is active,\npassing the mouse over a submenu will pop it up.</p><p>There is also is a concept of the current menu and a current\nmenu item. The current menu item is the selected menu item\nthat is furthest down in the hierarchy. (Every active menu shell\ndoes not necessarily contain a selected menu item, but if\nit does, then the parent menu shell must also contain\na selected menu item.) The current menu is the menu that\ncontains the current menu item. It will always have a GTK\ngrab and receive all key presses.</p>",
            "kind": "class",
            "name": "MenuShell"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.MenuToolButton\"/> is a <span data-xref=\"Gtk.ToolItem\"/> that contains a button and\na small additional button with an arrow. When clicked, the arrow\nbutton pops up a dropdown menu.</p><p>Use <span data-xref=\"Gtk.MenuToolButton.new\"/> to create a new\n<span data-xref=\"Gtk.MenuToolButton\"/>.</p><h1>GtkMenuToolButton as GtkBuildable</h1><p>The GtkMenuToolButton implementation of the GtkBuildable interface\nsupports adding a menu by specifying \u201cmenu\u201d as the \u201ctype\u201d attribute\nof a &lt;child&gt; element.</p><p>An example for a UI definition fragment with menus:\n|[\n&lt;object class=\"GtkMenuToolButton\"&gt;\n  &lt;child type=\"menu\"&gt;\n    &lt;object class=\"GtkMenu\"/&gt;\n  &lt;/child&gt;\n&lt;/object&gt;\n]|</p>",
            "kind": "class",
            "name": "MenuToolButton"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.MessageDialog\"/> presents a dialog with some message text. It\u2019s simply a\nconvenience widget; you could construct the equivalent of <span data-xref=\"Gtk.MessageDialog\"/>\nfrom <span data-xref=\"Gtk.Dialog\"/> without too much effort, but <span data-xref=\"Gtk.MessageDialog\"/> saves typing.</p><p>One difference from <span data-xref=\"Gtk.Dialog\"/> is that <span data-xref=\"Gtk.MessageDialog\"/> sets the\n<span data-xref=\"Gtk.Window-skip-taskbar-hint\"/> property to <code>true</code>, so that the dialog is hidden\nfrom the taskbar by default.</p><p>The easiest way to do a modal message dialog is to use <span data-xref=\"Gtk.Dialog.run\"/>, though\nyou can also pass in the <span data-xref=\"Gtk.DialogFlags\"/>.modal flag, <span data-xref=\"Gtk.Dialog.run\"/> automatically\nmakes the dialog modal and waits for the user to respond to it. <span data-xref=\"Gtk.Dialog.run\"/>\nreturns when any dialog button is clicked.</p><p>An example for using a modal dialog:\n|[&lt;!-- language=\"C\" --&gt;\n GtkDialogFlags flags = GTK_DIALOG_DESTROY_WITH_PARENT;\n dialog = gtk_message_dialog_new (parent_window,\n                                  flags,\n                                  GTK_MESSAGE_ERROR,\n                                  GTK_BUTTONS_CLOSE,\n                                  \"Error reading \u201c%s\u201d: %s\",\n                                  filename,\n                                  g_strerror (errno));\n gtk_dialog_run (GTK_DIALOG (dialog));\n gtk_widget_destroy (dialog);\n]|</p><p>You might do a non-modal <span data-xref=\"Gtk.MessageDialog\"/> as follows:</p><p>An example for a non-modal dialog:\n|[&lt;!-- language=\"C\" --&gt;\n GtkDialogFlags flags = GTK_DIALOG_DESTROY_WITH_PARENT;\n dialog = gtk_message_dialog_new (parent_window,\n                                  flags,\n                                  GTK_MESSAGE_ERROR,\n                                  GTK_BUTTONS_CLOSE,\n                                  \"Error reading \u201c%s\u201d: %s\",\n                                  filename,\n                                  g_strerror (errno));</p><p>// Destroy the dialog when the user responds to it\n // (e.g. clicks a button)</p><p>g_signal_connect_swapped (dialog, \"response\",\n                           G_CALLBACK (gtk_widget_destroy),\n                           dialog);\n]|</p><h1>GtkMessageDialog as GtkBuildable</h1><p>The GtkMessageDialog implementation of the GtkBuildable interface exposes\nthe message area as an internal child with the name \u201cmessage_area\u201d.</p>",
            "kind": "class",
            "name": "MessageDialog"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.Misc\"/> widget is an abstract widget which is not useful itself, but\nis used to derive subclasses which have alignment and padding attributes.</p><p>The horizontal and vertical padding attributes allows extra space to be\nadded around the widget.</p><p>The horizontal and vertical alignment attributes enable the widget to be\npositioned within its allocated area. Note that if the widget is added to\na container in such a way that it expands automatically to fill its\nallocated area, the alignment settings will not alter the widgets position.</p><p>Note that the desired effect can in most cases be achieved by using the\n<span data-xref=\"Gtk.Widget-halign\"/>, <span data-xref=\"Gtk.Widget-valign\"/> and <span data-xref=\"Gtk.Widget-margin\"/> properties\non the child widget, so GtkMisc should not be used in new code.</p>",
            "kind": "class",
            "name": "Misc"
        },
        {
            "doc": "<p>This should not be accessed directly. Use the accessor functions below.</p>",
            "kind": "class",
            "name": "MountOperation"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.Notebook\"/> widget is a <span data-xref=\"Gtk.Container\"/> whose children are pages that\ncan be switched between using tab labels along one edge.</p><p>There are many configuration options for GtkNotebook. Among other\nthings, you can choose on which edge the tabs appear\n(see <span data-xref=\"Gtk.Notebook.set_tab_pos\"/>), whether, if there are too many\ntabs to fit the notebook should be made bigger or scrolling\narrows added (see <span data-xref=\"Gtk.Notebook.set_scrollable\"/>), and whether there\nwill be a popup menu allowing the users to switch pages.\n(see <span data-xref=\"Gtk.Notebook.popup_enable\"/>, <span data-xref=\"Gtk.Notebook.popup_disable\"/>)</p><h1>GtkNotebook as GtkBuildable</h1><p>The GtkNotebook implementation of the <span data-xref=\"Gtk.Buildable\"/> interface\nsupports placing children into tabs by specifying \u201ctab\u201d as the\n\u201ctype\u201d attribute of a &lt;child&gt; element. Note that the content\nof the tab must be created before the tab can be filled.\nA tab child can be specified without specifying a &lt;child&gt;\ntype attribute.</p><p>To add a child widget in the notebooks action area, specify\n\"action-start\" or \u201caction-end\u201d as the \u201ctype\u201d attribute of the\n&lt;child&gt; element.</p><p>An example of a UI definition fragment with GtkNotebook:\n|[\n&lt;object class=\"GtkNotebook\"&gt;\n  &lt;child&gt;\n    &lt;object class=\"GtkLabel\" id=\"notebook-content\"&gt;\n      &lt;property name=\"label\"&gt;Content&lt;/property&gt;\n    &lt;/object&gt;\n  &lt;/child&gt;\n  &lt;child type=\"tab\"&gt;\n    &lt;object class=\"GtkLabel\" id=\"notebook-tab\"&gt;\n      &lt;property name=\"label\"&gt;Tab&lt;/property&gt;\n    &lt;/object&gt;\n  &lt;/child&gt;\n&lt;/object&gt;\n]|</p>",
            "kind": "class",
            "name": "Notebook"
        },
        {
            "doc": "<p>GtkNumerableIcon is a subclass of <span data-xref=\"Gio.EmblemedIcon\">Gio.EmblemedIcon</span> that can\nshow a number or short string as an emblem. The number can\nbe overlayed on top of another emblem, if desired.</p><p>It supports theming by taking font and color information\nfrom a provided <span data-xref=\"Gtk.StyleContext\"/>; see\n<span data-xref=\"Gtk.NumerableIcon.set_style_context\"/>.</p><p>Typical numerable icons:\n<img alt=\"\" src=\"numerableicon.png\" />\n<img alt=\"\" src=\"numerableicon2.png\" /></p>",
            "kind": "class",
            "name": "NumerableIcon"
        },
        {
            "doc": "<p>GtkOffscreenWindow is strictly intended to be used for obtaining\nsnapshots of widgets that are not part of a normal widget hierarchy.\nSince <span data-xref=\"Gtk.OffscreenWindow\"/> is a toplevel widget you cannot obtain\nsnapshots of a full window with it since you cannot pack a toplevel\nwidget in another toplevel.</p><p>The idea is to take a widget and manually set the state of it,\nadd it to a GtkOffscreenWindow and then retrieve the snapshot\nas a #cairo_surface_t or <span data-xref=\"GdkPixbuf.Pixbuf\">GdkPixbuf.Pixbuf</span>.</p><p>GtkOffscreenWindow derives from <span data-xref=\"Gtk.Window\"/> only as an implementation\ndetail.  Applications should not use any API specific to <span data-xref=\"Gtk.Window\"/>\nto operate on this object.  It should be treated as a <span data-xref=\"Gtk.Bin\"/> that\nhas no parent widget.</p><p>When contained offscreen widgets are redrawn, GtkOffscreenWindow\nwill emit a <span data-xref=\"Gtk.Widget-damage-event\"/> signal.</p>",
            "kind": "class",
            "name": "OffscreenWindow"
        },
        {
            "doc": "<p>GtkOverlay is a container which contains a single main child, on top\nof which it can place \u201coverlay\u201d widgets. The\nposition of each overlay widget is determined by its <span data-xref=\"Gtk.Widget-halign\"/>\nand <span data-xref=\"Gtk.Widget-valign\"/> properties. E.g. a widget with both alignments\nset to <span data-xref=\"Gtk.Align\"/>.start will be placed at the top left corner of the\nmain widget, whereas an overlay with halign set to <span data-xref=\"Gtk.Align\"/>.center\nand valign set to <span data-xref=\"Gtk.Align\"/>.end will be placed a the bottom edge of\nthe main widget, horizontally centered. The position can be adjusted\nby setting the margin properties of the child to non-zero values.</p><p>More complicated placement of overlays is possible by connecting\nto the <span data-xref=\"Gtk.Overlay-get-child-position\"/> signal.</p><h1>GtkOverlay as GtkBuildable</h1><p>The GtkOverlay implementation of the GtkBuildable interface\nsupports placing a child as an overlay by specifying \u201coverlay\u201d as\nthe \u201ctype\u201d attribute of a <code>&amp;lt;child&amp;gt;</code> element.</p>",
            "kind": "class",
            "name": "Overlay"
        },
        {
            "doc": "<p>A GtkPageSetup object stores the page size, orientation and margins.\nThe idea is that you can get one of these from the page setup dialog\nand then pass it to the <span data-xref=\"Gtk.PrintOperation\"/> when printing.\nThe benefit of splitting this out of the <span data-xref=\"Gtk.PrintSettings\"/> is that\nthese affect the actual layout of the page, and thus need to be set\nlong before user prints.</p><h2>Margins ## {#print-margins}</h2>\n<p>The margins specified in this object are the \u201cprint margins\u201d, i.e. the\nparts of the page that the printer cannot print on. These are different\nfrom the layout margins that a word processor uses; they are typically\nused to determine the minimal size for the layout\nmargins.</p><p>To obtain a <span data-xref=\"Gtk.PageSetup\"/> use <span data-xref=\"Gtk.PageSetup.new\"/> to get the defaults,\nor use <span data-xref=\"Gtk.print_run_page_setup_dialog\"/> to show the page setup dialog\nand receive the resulting page setup.</p><h2>A page setup dialog</h2><p>|[&lt;!-- language=\"C\" --&gt;\nstatic GtkPrintSettings <em>settings = NULL;\nstatic GtkPageSetup </em>page_setup = NULL;</p><p>static void\ndo_page_setup (void)\n{\n  GtkPageSetup *new_page_setup;</p><p>if (settings == NULL)\n    settings = gtk_print_settings_new ();</p><p>new_page_setup = gtk_print_run_page_setup_dialog (GTK_WINDOW (main_window),\n                                                    page_setup, settings);</p><p>if (page_setup)\n    g_object_unref (page_setup);</p><p>page_setup = new_page_setup;\n}\n]|</p><p>Printing support was added in GTK+ 2.10.</p>",
            "kind": "class",
            "name": "PageSetup"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.Paned\"/> has two panes, arranged either\nhorizontally or vertically. The division between\nthe two panes is adjustable by the user by dragging\na handle.</p><p>Child widgets are\nadded to the panes of the widget with <span data-xref=\"Gtk.Paned.pack1\"/> and\n<span data-xref=\"Gtk.Paned.pack2\"/>. The division between the two children is set by default\nfrom the size requests of the children, but it can be adjusted by the\nuser.</p><p>A paned widget draws a separator between the two child widgets and a\nsmall handle that the user can drag to adjust the division. It does not\ndraw any relief around the children or around the separator. (The space\nin which the separator is called the gutter.) Often, it is useful to put\neach child inside a <span data-xref=\"Gtk.Frame\"/> with the shadow type set to <span data-xref=\"Gtk.ShadowType\"/>.in\nso that the gutter appears as a ridge. No separator is drawn if one of\nthe children is missing.</p><p>Each child has two options that can be set, @resize and @shrink. If\n@resize is true, then when the <span data-xref=\"Gtk.Paned\"/> is resized, that child will\nexpand or shrink along with the paned widget. If @shrink is true, then\nthat child can be made smaller than its requisition by the user.\nSetting @shrink to <code>false</code> allows the application to set a minimum size.\nIf @resize is false for both children, then this is treated as if\n@resize is true for both children.</p><p>The application can set the position of the slider as if it were set\nby the user, by calling <span data-xref=\"Gtk.Paned.set_position\"/>.</p><h2>Creating a paned widget with minimum sizes.</h2><p>|[&lt;!-- language=\"C\" --&gt;\nGtkWidget <em>hpaned = gtk_paned_new (GTK_ORIENTATION_HORIZONTAL);\nGtkWidget </em>frame1 = gtk_frame_new (NULL);\nGtkWidget *frame2 = gtk_frame_new (NULL);\ngtk_frame_set_shadow_type (GTK_FRAME (frame1), GTK_SHADOW_IN);\ngtk_frame_set_shadow_type (GTK_FRAME (frame2), GTK_SHADOW_IN);</p><p>gtk_widget_set_size_request (hpaned, 200, -1);</p><p>gtk_paned_pack1 (GTK_PANED (hpaned), frame1, TRUE, FALSE);\ngtk_widget_set_size_request (frame1, 50, -1);</p><p>gtk_paned_pack2 (GTK_PANED (hpaned), frame2, FALSE, FALSE);\ngtk_widget_set_size_request (frame2, 50, -1);\n]|</p>",
            "kind": "class",
            "name": "Paned"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.PlacesSidebar\"/> is a widget that displays a list of frequently-used places in the\nfile system:  the user\u2019s home directory, the user\u2019s bookmarks, and volumes and drives.\nThis widget is used as a sidebar in <span data-xref=\"Gtk.FileChooser\"/> and may be used by file managers\nand similar programs.</p><p>The places sidebar displays drives and volumes, and will automatically mount\nor unmount them when the user selects them.</p><p>Applications can hook to various signals in the places sidebar to customize\nits behavior.  For example, they can add extra commands to the context menu\nof the sidebar.</p><p>While bookmarks are completely in control of the user, the places sidebar also\nallows individual applications to provide extra shortcut folders that are unique\nto each application.  For example, a Paint program may want to add a shortcut\nfor a Clipart folder.  You can do this with <span data-xref=\"Gtk.PlacesSidebar.add_shortcut\"/>.</p><p>To make use of the places sidebar, an application at least needs to connect\nto the <span data-xref=\"Gtk.PlacesSidebar-open-location\"/> signal.  This is emitted when the\nuser selects in the sidebar a location to open.  The application should also\ncall <span data-xref=\"Gtk.PlacesSidebar.set_location\"/> when it changes the currently-viewed\nlocation.</p>",
            "kind": "class",
            "name": "PlacesSidebar"
        },
        {
            "doc": "<p>Together with <span data-xref=\"Gtk.Socket\"/>, <span data-xref=\"Gtk.Plug\"/> provides the ability to embed\nwidgets from one process into another process in a fashion that is\ntransparent to the user. One process creates a <span data-xref=\"Gtk.Socket\"/> widget\nand passes the ID of that widget\u2019s window to the other process,\nwhich then creates a <span data-xref=\"Gtk.Plug\"/> with that window ID. Any widgets\ncontained in the <span data-xref=\"Gtk.Plug\"/> then will appear inside the first\napplication\u2019s window.</p><p>The communication between a <span data-xref=\"Gtk.Socket\"/> and a <span data-xref=\"Gtk.Plug\"/> follows the\n<a href=\"http://www.freedesktop.org/Standards/xembed-spec\">XEmbed Protocol</a>.\nThis protocol has also been implemented in other toolkits,\ne.g. Qt, allowing the same level of\nintegration when embedding a Qt widget\nin GTK+ or vice versa.</p><p>The <span data-xref=\"Gtk.Plug\"/> and <span data-xref=\"Gtk.Socket\"/> widgets are only available when GTK+\nis compiled for the X11 platform and %GDK_WINDOWING_X11 is defined.\nThey can only be used on a #GdkX11Display. To use <span data-xref=\"Gtk.Plug\"/> and\n<span data-xref=\"Gtk.Socket\"/>, you need to include the <code>gtk/gtkx.h</code>\nheader.</p>",
            "kind": "class",
            "name": "Plug"
        },
        {
            "doc": "<p>GtkPopover is a bubble-like context window, primarily meant to\nprovide context-dependent information or options. Popovers are\nattached to a widget, passed at construction time on <span data-xref=\"Gtk.Popover.new\"/>,\nor updated afterwards through <span data-xref=\"Gtk.Popover.set_relative_to\"/>, by\ndefault they will point to the whole widget area, although this\nbehavior can be changed through <span data-xref=\"Gtk.Popover.set_pointing_to\"/>.</p><p>The position of a popover relative to the widget it is attached to\ncan also be changed through <span data-xref=\"Gtk.Popover.set_position\"/>.</p><p>By default, <span data-xref=\"Gtk.Popover\"/> performs a GTK+ grab, in order to ensure\ninput events get redirected to it while it is shown, and also so\nthe popover is dismissed in the expected situations (clicks outside\nthe popover, or the Esc key being pressed). If no such modal behavior\nis desired on a popover, <span data-xref=\"Gtk.Popover.set_modal\"/> may be called on it\nto tweak its behavior.</p><h2>GtkPopover as menu replacement</h2><p>GtkPopover is often used to replace menus. To facilitate this, it\nsupports being populated from a <span data-xref=\"Gio.MenuModel\">Gio.MenuModel</span>, using\n<span data-xref=\"Gtk.Popover.new_from_model\"/>. In addition to all the regular menu\nmodel features, this function supports rendering sections in the\nmodel in a more compact form, as a row of icon buttons instead of\nmenu items.</p><p>To use this rendering, set the \u201ddisplay-hint\u201d attribute of the\nsection to \u201dhorizontal-buttons\u201d and set the icons of your items\nwith the \u201dverb-icon\u201d attribute.</p><p>|[\n&lt;section&gt;\n  &lt;attribute name=\"display-hint\"&gt;horizontal-buttons&lt;/attribute&gt;\n  &lt;item&gt;\n    &lt;attribute name=\"label\"&gt;Cut&lt;/attribute&gt;\n    &lt;attribute name=\"action\"&gt;app.cut&lt;/attribute&gt;\n    &lt;attribute name=\"verb-icon\"&gt;edit-cut-symbolic&lt;/attribute&gt;\n  &lt;/item&gt;\n  &lt;item&gt;\n    &lt;attribute name=\"label\"&gt;Copy&lt;/attribute&gt;\n    &lt;attribute name=\"action\"&gt;app.copy&lt;/attribute&gt;\n    &lt;attribute name=\"verb-icon\"&gt;edit-copy-symbolic&lt;/attribute&gt;\n  &lt;/item&gt;\n  &lt;item&gt;\n    &lt;attribute name=\"label\"&gt;Paste&lt;/attribute&gt;\n    &lt;attribute name=\"action\"&gt;app.paste&lt;/attribute&gt;\n    &lt;attribute name=\"verb-icon\"&gt;edit-paste-symbolic&lt;/attribute&gt;\n  &lt;/item&gt;\n&lt;/section&gt;\n]|</p>",
            "kind": "class",
            "name": "Popover"
        },
        {
            "doc": "<p>A GtkPrintContext encapsulates context information that is required when\ndrawing pages for printing, such as the cairo context and important\nparameters like page size and resolution. It also lets you easily\ncreate <span data-xref=\"Pango.Layout\">Pango.Layout</span> and <span data-xref=\"Pango.Context\">Pango.Context</span> objects that match the font metrics\nof the cairo surface.</p><p>GtkPrintContext objects gets passed to the <span data-xref=\"Gtk.PrintOperation-begin-print\"/>,\n<span data-xref=\"Gtk.PrintOperation-end-print\"/>, <span data-xref=\"Gtk.PrintOperation-request-page-setup\"/> and\n<span data-xref=\"Gtk.PrintOperation-draw-page\"/> signals on the <span data-xref=\"Gtk.PrintOperation\"/>.</p><h2>Using GtkPrintContext in a <span data-xref=\"Gtk.PrintOperation-draw-page\"/> callback</h2><p>|[&lt;!-- language=\"C\" --&gt;\nstatic void\ndraw_page (GtkPrintOperation <em>operation,\n       GtkPrintContext   </em>context,\n       int                page_nr)\n{\n  cairo_t <em>cr;\n  PangoLayout </em>layout;\n  PangoFontDescription *desc;</p><p>cr = gtk_print_context_get_cairo_context (context);</p><p>// Draw a red rectangle, as wide as the paper (inside the margins)\n  cairo_set_source_rgb (cr, 1.0, 0, 0);\n  cairo_rectangle (cr, 0, 0, gtk_print_context_get_width (context), 50);</p><p>cairo_fill (cr);</p><p>// Draw some lines\n  cairo_move_to (cr, 20, 10);\n  cairo_line_to (cr, 40, 20);\n  cairo_arc (cr, 60, 60, 20, 0, M_PI);\n  cairo_line_to (cr, 80, 20);</p><p>cairo_set_source_rgb (cr, 0, 0, 0);\n  cairo_set_line_width (cr, 5);\n  cairo_set_line_cap (cr, CAIRO_LINE_CAP_ROUND);\n  cairo_set_line_join (cr, CAIRO_LINE_JOIN_ROUND);</p><p>cairo_stroke (cr);</p><p>// Draw some text\n  layout = gtk_print_context_create_layout (context);\n  pango_layout_set_text (layout, \"Hello World! Printing is easy\", -1);\n  desc = pango_font_description_from_string (\"sans 28\");\n  pango_layout_set_font_description (layout, desc);\n  pango_font_description_free (desc);</p><p>cairo_move_to (cr, 30, 20);\n  pango_cairo_layout_path (cr, layout);</p><p>// Font Outline\n  cairo_set_source_rgb (cr, 0.93, 1.0, 0.47);\n  cairo_set_line_width (cr, 0.5);\n  cairo_stroke_preserve (cr);</p><p>// Font Fill\n  cairo_set_source_rgb (cr, 0, 0.0, 1.0);\n  cairo_fill (cr);</p><p>g_object_unref (layout);\n}\n]|</p><p>Printing support was added in GTK+ 2.10.</p>",
            "kind": "class",
            "name": "PrintContext"
        },
        {
            "doc": "<p>GtkPrintOperation is the high-level, portable printing API.\nIt looks a bit different than other GTK+ dialogs such as the\n<span data-xref=\"Gtk.FileChooser\"/>, since some platforms don\u2019t expose enough\ninfrastructure to implement a good print dialog. On such\nplatforms, GtkPrintOperation uses the native print dialog.\nOn platforms which do not provide a native print dialog, GTK+\nuses its own, see #GtkPrintUnixDialog.</p><p>The typical way to use the high-level printing API is to create\na GtkPrintOperation object with <span data-xref=\"Gtk.PrintOperation.new\"/> when\nthe user selects to print. Then you set some properties on it,\ne.g. the page size, any <span data-xref=\"Gtk.PrintSettings\"/> from previous print\noperations, the number of pages, the current page, etc.</p><p>Then you start the print operation by calling <span data-xref=\"Gtk.PrintOperation.run\"/>.\nIt will then show a dialog, let the user select a printer and\noptions. When the user finished the dialog various signals will\nbe emitted on the <span data-xref=\"Gtk.PrintOperation\"/>, the main one being\n<span data-xref=\"Gtk.PrintOperation-draw-page\"/>, which you are supposed to catch\nand render the page on the provided <span data-xref=\"Gtk.PrintContext\"/> using Cairo.</p><h1>The high-level printing API</h1><p>|[&lt;!-- language=\"C\" --&gt;\nstatic GtkPrintSettings *settings = NULL;</p><p>static void\ndo_print (void)\n{\n  GtkPrintOperation *print;\n  GtkPrintOperationResult res;</p><p>print = gtk_print_operation_new ();</p><p>if (settings != NULL)\n    gtk_print_operation_set_print_settings (print, settings);</p><p>g_signal_connect (print, \"begin_print\", G_CALLBACK (begin_print), NULL);\n  g_signal_connect (print, \"draw_page\", G_CALLBACK (draw_page), NULL);</p><p>res = gtk_print_operation_run (print, GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG,\n                                 GTK_WINDOW (main_window), NULL);</p><p>if (res == GTK_PRINT_OPERATION_RESULT_APPLY)\n    {\n      if (settings != NULL)\n        g_object_unref (settings);\n      settings = g_object_ref (gtk_print_operation_get_print_settings (print));\n    }</p><p>g_object_unref (print);\n}\n]|</p><p>By default GtkPrintOperation uses an external application to do\nprint preview. To implement a custom print preview, an application\nmust connect to the preview signal. The functions\n<span data-xref=\"Gtk.PrintOperationPreview.render_page\"/>,\n<span data-xref=\"Gtk.PrintOperationPreview.end_preview\"/> and\n<span data-xref=\"Gtk.PrintOperationPreview.is_selected\"/>\nare useful when implementing a print preview.</p>",
            "kind": "class",
            "name": "PrintOperation"
        },
        {
            "doc": "<p>A GtkPrintSettings object represents the settings of a print dialog in\na system-independent way. The main use for this object is that once\nyou\u2019ve printed you can get a settings object that represents the settings\nthe user chose, and the next time you print you can pass that object in so\nthat the user doesn\u2019t have to re-set all his settings.</p><p>Its also possible to enumerate the settings so that you can easily save\nthe settings for the next time your app runs, or even store them in a\ndocument. The predefined keys try to use shared values as much as possible\nso that moving such a document between systems still works.</p><p>Printing support was added in GTK+ 2.10.</p>",
            "kind": "class",
            "name": "PrintSettings"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.ProgressBar\"/> is typically used to display the progress of a long\nrunning operation.  It provides a visual clue that processing\nis underway.  The <span data-xref=\"Gtk.ProgressBar\"/> can be used in two different\nmodes: percentage mode and activity mode.</p><p>When an application can determine how much work needs to take place\n(e.g. read a fixed number of bytes from a file) and can monitor its\nprogress, it can use the <span data-xref=\"Gtk.ProgressBar\"/> in percentage mode and the user\nsees a growing bar indicating the percentage of the work that has\nbeen completed.  In this mode, the application is required to call\n<span data-xref=\"Gtk.ProgressBar.set_fraction\"/> periodically to update the progress bar.</p><p>When an application has no accurate way of knowing the amount of work\nto do, it can use the <span data-xref=\"Gtk.ProgressBar\"/> in activity mode, which shows\nactivity by a block moving back and forth within the progress area. In\nthis mode, the application is required to call <span data-xref=\"Gtk.ProgressBar.pulse\"/>\nperiodically to update the progress bar.</p><p>There is quite a bit of flexibility provided to control the appearance\nof the <span data-xref=\"Gtk.ProgressBar\"/>.  Functions are provided to control the\norientation of the bar, optional text can be displayed along with\nthe bar, and the step size used in activity mode can be set.</p>",
            "kind": "class",
            "name": "ProgressBar"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.RadioAction\"/> is similar to <span data-xref=\"Gtk.RadioMenuItem\"/>. A number of radio\nactions can be linked together so that only one may be active at any\none time.</p>",
            "kind": "class",
            "name": "RadioAction"
        },
        {
            "doc": "<p>A single radio button performs the same basic function as a <span data-xref=\"Gtk.CheckButton\"/>,\nas its position in the object hierarchy reflects. It is only when multiple\nradio buttons are grouped together that they become a different user\ninterface component in their own right.</p><p>Every radio button is a member of some group of radio buttons. When one is\nselected, all other radio buttons in the same group are deselected. A\n<span data-xref=\"Gtk.RadioButton\"/> is one way of giving the user a choice from many options.</p><p>Radio button widgets are created with <span data-xref=\"Gtk.RadioButton.new\"/>, passing <code>null</code>\nas the argument if this is the first radio button in a group. In subsequent\ncalls, the group you wish to add this button to should be passed as an\nargument. Optionally, <span data-xref=\"Gtk.RadioButton.new_with_label\"/> can be used if you\nwant a text label on the radio button.</p><p>Alternatively, when adding widgets to an existing group of radio buttons,\nuse <span data-xref=\"Gtk.RadioButton.new_from_widget\"/> with a <span data-xref=\"Gtk.RadioButton\"/> that already\nhas a group assigned to it. The convenience function\n<span data-xref=\"Gtk.RadioButton.new_with_label_from_widget\"/> is also provided.</p><p>To retrieve the group a <span data-xref=\"Gtk.RadioButton\"/> is assigned to, use\n<span data-xref=\"Gtk.RadioButton.get_group\"/>.</p><p>To remove a <span data-xref=\"Gtk.RadioButton\"/> from one group and make it part of a new one,\nuse <span data-xref=\"Gtk.RadioButton.set_group\"/>.</p><p>The group list does not need to be freed, as each <span data-xref=\"Gtk.RadioButton\"/> will remove\nitself and its list item when it is destroyed.</p><h2>How to create a group of two radio buttons.</h2><p>|[&lt;!-- language=\"C\" --&gt;\nvoid create_radio_buttons (void) {</p><p>GtkWidget <em>window, </em>radio1, <em>radio2, </em>box, *entry;\n   window = gtk_window_new (GTK_WINDOW_TOPLEVEL);\n   box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 2);\n   gtk_box_set_homogeneous (GTK_BOX (box), TRUE);</p><p>// Create a radio button with a GtkEntry widget\n   radio1 = gtk_radio_button_new (NULL);\n   entry = gtk_entry_new ();\n   gtk_container_add (GTK_CONTAINER (radio1), entry);</p><p>// Create a radio button with a label\n   radio2 = gtk_radio_button_new_with_label_from_widget (GTK_RADIO_BUTTON (radio1),\n                                                         \"I\u2019m the second radio button.\");</p><p>// Pack them into a box, then show all the widgets\n   gtk_box_pack_start (GTK_BOX (box), radio1, TRUE, TRUE, 2);\n   gtk_box_pack_start (GTK_BOX (box), radio2, TRUE, TRUE, 2);\n   gtk_container_add (GTK_CONTAINER (window), box);\n   gtk_widget_show_all (window);\n   return;\n}\n]|</p><p>When an unselected button in the group is clicked the clicked button\nreceives the <span data-xref=\"Gtk.ToggleButton-toggled\"/> signal, as does the previously\nselected button.\nInside the <span data-xref=\"Gtk.ToggleButton-toggled\"/> handler, <span data-xref=\"Gtk.ToggleButton.get_active\"/>\ncan be used to determine if the button has been selected or deselected.</p>",
            "kind": "class",
            "name": "RadioButton"
        },
        {
            "doc": "<p>A radio menu item is a check menu item that belongs to a group. At each\ninstant exactly one of the radio menu items from a group is selected.</p><p>The group list does not need to be freed, as each <span data-xref=\"Gtk.RadioMenuItem\"/> will\nremove itself and its list item when it is destroyed.</p><p>The correct way to create a group of radio menu items is approximatively\nthis:</p><h2>How to create a group of radio menu items.</h2><p>|[&lt;!-- language=\"C\" --&gt;\nGSList <em>group = NULL;\nGtkWidget </em>item;\ngint i;</p><p>for (i = 0; i &lt; 5; i++)\n{\n  item = gtk_radio_menu_item_new_with_label (group, \"This is an example\");\n  group = gtk_radio_menu_item_get_group (GTK_RADIO_MENU_ITEM (item));\n  if (i == 1)\n    gtk_check_menu_item_set_active (GTK_CHECK_MENU_ITEM (item), TRUE);\n}\n]|</p>",
            "kind": "class",
            "name": "RadioMenuItem"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.RadioToolButton\"/> is a <span data-xref=\"Gtk.ToolItem\"/> that contains a radio button,\nthat is, a button that is part of a group of toggle buttons where only\none button can be active at a time.</p><p>Use <span data-xref=\"Gtk.RadioToolButton.new\"/> to create a new\n<span data-xref=\"Gtk.RadioToolButton\"/>. Use <span data-xref=\"Gtk.RadioToolButton.new_from_widget\"/> to\ncreate a new <span data-xref=\"Gtk.RadioToolButton\"/> that is part of the same group as an\nexisting <span data-xref=\"Gtk.RadioToolButton\"/>.</p>",
            "kind": "class",
            "name": "RadioToolButton"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.Range\"/> is the common base class for widgets which visualize an\nadjustment, e.g <span data-xref=\"Gtk.Scale\"/> or <span data-xref=\"Gtk.Scrollbar\"/>.</p><p>Apart from signals for monitoring the parameters of the adjustment,\n<span data-xref=\"Gtk.Range\"/> provides properties and methods for influencing the sensitivity\nof the \u201csteppers\u201d. It also provides properties and methods for setting a\n\u201cfill level\u201d on range widgets. See <span data-xref=\"Gtk.Range.set_fill_level\"/>.</p>",
            "kind": "class",
            "name": "Range"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.RcStyle\"/>-struct is used to represent a set\nof information about the appearance of a widget.\nThis can later be composited together with other\n<span data-xref=\"Gtk.RcStyle\"/>-struct&lt;!-- --&gt;s to form a <span data-xref=\"Gtk.Style\"/>.</p>",
            "kind": "class",
            "name": "RcStyle"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.RecentAction\"/> represents a list of recently used files, which\ncan be shown by widgets such as <span data-xref=\"Gtk.RecentChooserDialog\"/> or\n<span data-xref=\"Gtk.RecentChooserMenu\"/>.</p><p>To construct a submenu showing recently used files, use a <span data-xref=\"Gtk.RecentAction\"/>\nas the action for a &lt;menuitem&gt;. To construct a menu toolbutton showing\nthe recently used files in the popup menu, use a <span data-xref=\"Gtk.RecentAction\"/> as the\naction for a &lt;toolitem&gt; element.</p>",
            "kind": "class",
            "name": "RecentAction"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.RecentChooserDialog\"/> is a dialog box suitable for displaying the recently\nused documents.  This widgets works by putting a <span data-xref=\"Gtk.RecentChooserWidget\"/> inside\na <span data-xref=\"Gtk.Dialog\"/>.  It exposes the <span data-xref=\"Gtk.RecentChooserIface\"/> interface, so you can use\nall the <span data-xref=\"Gtk.RecentChooser\"/> functions on the recent chooser dialog as well as\nthose for <span data-xref=\"Gtk.Dialog\"/>.</p><p>Note that <span data-xref=\"Gtk.RecentChooserDialog\"/> does not have any methods of its own.\nInstead, you should use the functions that work on a <span data-xref=\"Gtk.RecentChooser\"/>.</p><h2>Typical usage ## {#gtkrecentchooser-typical-usage}</h2><p>In the simplest of cases, you can use the following code to use\na <span data-xref=\"Gtk.RecentChooserDialog\"/> to select a recently used file:</p><p>|[&lt;!-- language=\"C\" --&gt;\nGtkWidget *dialog;\ngint res;</p><p>dialog = gtk_recent_chooser_dialog_new (\"Recent Documents\",\n                                        parent_window,\n                                        <em>(\"_Cancel\"),\n                                        GTK_RESPONSE_CANCEL,\n                                        </em>(\"_Open\"),\n                                        GTK_RESPONSE_ACCEPT,\n                                        NULL);</p><p>res = gtk_dialog_run (GTK_DIALOG (dialog));\nif (res == GTK_RESPONSE_ACCEPT)\n  {\n    GtkRecentInfo <em>info;\n    GtkRecentChooser </em>chooser = GTK_RECENT_CHOOSER (dialog);</p><pre><code>info = gtk_recent_chooser_get_current_item (chooser);\nopen_file (gtk_recent_info_get_uri (info));\ngtk_recent_info_unref (info);\n</code></pre>\n<p>}</p><p>gtk_widget_destroy (dialog);\n]|</p><p>Recently used files are supported since GTK+ 2.10.</p>",
            "kind": "class",
            "name": "RecentChooserDialog"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.RecentChooserMenu\"/> is a widget suitable for displaying recently used files\ninside a menu.  It can be used to set a sub-menu of a <span data-xref=\"Gtk.MenuItem\"/> using\n<span data-xref=\"Gtk.MenuItem.set_submenu\"/>, or as the menu of a <span data-xref=\"Gtk.MenuToolButton\"/>.</p><p>Note that <span data-xref=\"Gtk.RecentChooserMenu\"/> does not have any methods of its own. Instead,\nyou should use the functions that work on a <span data-xref=\"Gtk.RecentChooser\"/>.</p><p>Note also that <span data-xref=\"Gtk.RecentChooserMenu\"/> does not support multiple filters, as it\nhas no way to let the user choose between them as the <span data-xref=\"Gtk.RecentChooserWidget\"/>\nand <span data-xref=\"Gtk.RecentChooserDialog\"/> widgets do. Thus using <span data-xref=\"Gtk.RecentChooser.add_filter\"/>\non a <span data-xref=\"Gtk.RecentChooserMenu\"/> widget will yield the same effects as using\n<span data-xref=\"Gtk.RecentChooser.set_filter\"/>, replacing any currently set filter\nwith the supplied filter; <span data-xref=\"Gtk.RecentChooser.remove_filter\"/> will remove\nany currently set <span data-xref=\"Gtk.RecentFilter\"/> object and will unset the current filter;\n<span data-xref=\"Gtk.RecentChooser.list_filters\"/> will return a list containing a single\n<span data-xref=\"Gtk.RecentFilter\"/> object.</p><p>Recently used files are supported since GTK+ 2.10.</p>",
            "kind": "class",
            "name": "RecentChooserMenu"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.RecentChooserWidget\"/> is a widget suitable for selecting recently used\nfiles.  It is the main building block of a <span data-xref=\"Gtk.RecentChooserDialog\"/>.  Most\napplications will only need to use the latter; you can use\n<span data-xref=\"Gtk.RecentChooserWidget\"/> as part of a larger window if you have special needs.</p><p>Note that <span data-xref=\"Gtk.RecentChooserWidget\"/> does not have any methods of its own.\nInstead, you should use the functions that work on a <span data-xref=\"Gtk.RecentChooser\"/>.</p><p>Recently used files are supported since GTK+ 2.10.</p>",
            "kind": "class",
            "name": "RecentChooserWidget"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.RecentFilter\"/> can be used to restrict the files being shown\nin a <span data-xref=\"Gtk.RecentChooser\"/>.  Files can be filtered based on their name\n(with <span data-xref=\"Gtk.RecentFilter.add_pattern\"/>), on their mime type (with\n<span data-xref=\"Gtk.FileFilter.add_mime_type\"/>), on the application that has\nregistered them (with <span data-xref=\"Gtk.RecentFilter.add_application\"/>), or by\na custom filter function (with <span data-xref=\"Gtk.RecentFilter.add_custom\"/>).</p><p>Filtering by mime type handles aliasing and subclassing of mime\ntypes; e.g. a filter for text/plain also matches a file with mime\ntype application/rtf, since application/rtf is a subclass of text/plain.\nNote that <span data-xref=\"Gtk.RecentFilter\"/> allows wildcards for the subtype of a\nmime type, so you can e.g. filter for image/*.</p><p>Normally, filters are used by adding them to a <span data-xref=\"Gtk.RecentChooser\"/>,\nsee <span data-xref=\"Gtk.RecentChooser.add_filter\"/>, but it is also possible to\nmanually use a filter on a file with <span data-xref=\"Gtk.RecentFilter.filter\"/>.</p><p>Recently used files are supported since GTK+ 2.10.</p><h2>GtkRecentFilter as GtkBuildable</h2><p>The GtkRecentFilter implementation of the GtkBuildable interface\nsupports adding rules using the &lt;mime-types&gt;, &lt;patterns&gt; and\n&lt;applications&gt; elements and listing the rules within. Specifying\na &lt;mime-type&gt;, &lt;pattern&gt; or &lt;application&gt; has the same effect as\ncalling <span data-xref=\"Gtk.RecentFilter.add_mime_type\"/>,\n<span data-xref=\"Gtk.RecentFilter.add_pattern\"/> or <span data-xref=\"Gtk.RecentFilter.add_application\"/>.</p><p>An example of a UI definition fragment specifying GtkRecentFilter rules:\n|[\n&lt;object class=\"GtkRecentFilter\"&gt;\n  &lt;mime-types&gt;\n    &lt;mime-type&gt;text/plain&lt;/mime-type&gt;\n    &lt;mime-type&gt;image/png&lt;/mime-type&gt;\n  &lt;/mime-types&gt;\n  &lt;patterns&gt;\n    &lt;pattern&gt;<em>.txt&lt;/pattern&gt;\n    &lt;pattern&gt;</em>.png&lt;/pattern&gt;\n  &lt;/patterns&gt;\n  &lt;applications&gt;\n    &lt;application&gt;gimp&lt;/application&gt;\n    &lt;application&gt;gedit&lt;/application&gt;\n    &lt;application&gt;glade&lt;/application&gt;\n  &lt;/applications&gt;\n&lt;/object&gt;\n]|</p>",
            "kind": "class",
            "name": "RecentFilter"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.RecentManager\"/> provides a facility for adding, removing and\nlooking up recently used files. Each recently used file is\nidentified by its URI, and has meta-data associated to it, like\nthe names and command lines of the applications that have\nregistered it, the number of time each application has registered\nthe same file, the mime type of the file and whether the file\nshould be displayed only by the applications that have\nregistered it.</p><p>The recently used files list is per user.</p><p>The <span data-xref=\"Gtk.RecentManager\"/> acts like a database of all the recently\nused files. You can create new <span data-xref=\"Gtk.RecentManager\"/> objects, but\nit is more efficient to use the default manager created by GTK+.</p><p>Adding a new recently used file is as simple as:</p><p>|[&lt;!-- language=\"C\" --&gt;\nGtkRecentManager *manager;</p><p>manager = gtk_recent_manager_get_default ();\ngtk_recent_manager_add_item (manager, file_uri);\n]|</p><p>The <span data-xref=\"Gtk.RecentManager\"/> will try to gather all the needed information\nfrom the file itself through GIO.</p><p>Looking up the meta-data associated with a recently used file\ngiven its URI requires calling <span data-xref=\"Gtk.RecentManager.lookup_item\"/>:</p><p>|[&lt;!-- language=\"C\" --&gt;\nGtkRecentManager <em>manager;\nGtkRecentInfo </em>info;\nGError *error = NULL;</p><p>manager = gtk_recent_manager_get_default ();\ninfo = gtk_recent_manager_lookup_item (manager, file_uri, &amp;error);\nif (error)\n  {\n    g_warning (\"Could not find the file: %s\", error-&gt;message);\n    g_error_free (error);\n  }\nelse\n {\n   // Use the info object\n   gtk_recent_info_unref (info);\n }\n]|</p><p>In order to retrieve the list of recently used files, you can use\n<span data-xref=\"Gtk.RecentManager.get_items\"/>, which returns a list of <span data-xref=\"Gtk.RecentInfo\"/>-structs.</p><p>A <span data-xref=\"Gtk.RecentManager\"/> is the model used to populate the contents of\none, or more <span data-xref=\"Gtk.RecentChooser\"/> implementations.</p><p>Note that the maximum age of the recently used files list is\ncontrollable through the <span data-xref=\"Gtk.Settings-gtk-recent-files-max-age\"/>\nproperty.</p><p>Recently used files are supported since GTK+ 2.10.</p>",
            "kind": "class",
            "name": "RecentManager"
        },
        {
            "doc": "<p>The GtkRevealer widget is a container which animates\nthe transition of its child from invisible to visible.</p><p>The style of transition can be controlled with\n<span data-xref=\"Gtk.Revealer.set_transition_type\"/>.</p><p>These animations respect the <span data-xref=\"Gtk.Settings-gtk-enable-animations\"/>\nsetting.</p><p>The GtkRevealer widget was added in GTK+ 3.10.</p>",
            "kind": "class",
            "name": "Revealer"
        },
        {
            "doc": "<p>A GtkScale is a slider control used to select a numeric value.\nTo use it, you\u2019ll probably want to investigate the methods on\nits base class, <span data-xref=\"Gtk.Range\"/>, in addition to the methods for GtkScale itself.\nTo set the value of a scale, you would normally use <span data-xref=\"Gtk.Range.set_value\"/>.\nTo detect changes to the value, you would normally use the\n<span data-xref=\"Gtk.Range-value-changed\"/> signal.</p><p>Note that using the same upper and lower bounds for the <span data-xref=\"Gtk.Scale\"/> (through\nthe <span data-xref=\"Gtk.Range\"/> methods) will hide the slider itself. This is useful for\napplications that want to show an undeterminate value on the scale, without\nchanging the layout of the application (such as movie or music players).</p><h1>GtkScale as GtkBuildable</h1><p>GtkScale supports a custom &lt;marks&gt; element, which can contain multiple\n&lt;mark&gt; elements. The \u201cvalue\u201d and \u201cposition\u201d attributes have the same\nmeaning as <span data-xref=\"Gtk.Scale.add_mark\"/> parameters of the same name. If the\nelement is not empty, its content is taken as the markup to show at\nthe mark. It can be translated with the usual \u201dtranslatable\u201d and\n\u201ccontext\u201d attributes.</p>",
            "kind": "class",
            "name": "Scale"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.ScaleButton\"/> provides a button which pops up a scale widget.\nThis kind of widget is commonly used for volume controls in multimedia\napplications, and GTK+ provides a <span data-xref=\"Gtk.VolumeButton\"/> subclass that\nis tailored for this use case.</p>",
            "kind": "class",
            "name": "ScaleButton"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.Scrollbar\"/> widget is a horizontal or vertical scrollbar,\ndepending on the value of the <span data-xref=\"Gtk.Orientable-orientation\"/> property.</p><p>The position of the thumb in a scrollbar is controlled by the scroll\nadjustments. See <span data-xref=\"Gtk.Adjustment\"/> for the fields in an adjustment - for\n<span data-xref=\"Gtk.Scrollbar\"/>, the <span data-xref=\"Gtk.Adjustment-value\"/> field represents the position\nof the scrollbar, which must be between the <span data-xref=\"Gtk.Adjustment-lower\"/> field\nand <span data-xref=\"Gtk.Adjustment-upper\"/> - <span data-xref=\"Gtk.Adjustment-page-size\"/>. The\n<span data-xref=\"Gtk.Adjustment-page-size\"/> field represents the size of the visible\nscrollable area. The <span data-xref=\"Gtk.Adjustment-step-increment\"/> and\n<span data-xref=\"Gtk.Adjustment-page-increment\"/> fields are properties when the user asks to\nstep down (using the small stepper arrows) or page down (using for\nexample the <code>Page Down</code> key).</p>",
            "kind": "class",
            "name": "Scrollbar"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.ScrolledWindow\"/> is a <span data-xref=\"Gtk.Bin\"/> subclass: it\u2019s a container\nthe accepts a single child widget. <span data-xref=\"Gtk.ScrolledWindow\"/> adds scrollbars\nto the child widget and optionally draws a beveled frame around the\nchild widget.</p><p>The scrolled window can work in two ways. Some widgets have native\nscrolling support; these widgets implement the <span data-xref=\"Gtk.Scrollable\"/> interface.\nWidgets with native scroll support include <span data-xref=\"Gtk.TreeView\"/>, <span data-xref=\"Gtk.TextView\"/>,\nand <span data-xref=\"Gtk.Layout\"/>.</p><p>For widgets that lack native scrolling support, the <span data-xref=\"Gtk.Viewport\"/>\nwidget acts as an adaptor class, implementing scrollability for child\nwidgets that lack their own scrolling capabilities. Use <span data-xref=\"Gtk.Viewport\"/>\nto scroll child widgets such as <span data-xref=\"Gtk.Grid\"/>, <span data-xref=\"Gtk.Box\"/>, and so on.</p><p>If a widget has native scrolling abilities, it can be added to the\n<span data-xref=\"Gtk.ScrolledWindow\"/> with <span data-xref=\"Gtk.Container.add\"/>. If a widget does not, you\nmust first add the widget to a <span data-xref=\"Gtk.Viewport\"/>, then add the <span data-xref=\"Gtk.Viewport\"/>\nto the scrolled window. <span data-xref=\"Gtk.Container.add\"/> will do this for you for\nwidgets that don\u2019t implement <span data-xref=\"Gtk.Scrollable\"/> natively, so you can\nignore the presence of the viewport.</p><p>The position of the scrollbars is controlled by the scroll\nadjustments. See <span data-xref=\"Gtk.Adjustment\"/> for the fields in an adjustment - for\n<span data-xref=\"Gtk.Scrollbar\"/>, used by <span data-xref=\"Gtk.ScrolledWindow\"/>, the \u201cvalue\u201d field\nrepresents the position of the scrollbar, which must be between the\n\u201clower\u201d field and \u201cupper - page_size.\u201d The \u201cpage_size\u201d field\nrepresents the size of the visible scrollable area. The\n\u201cstep_increment\u201d and \u201cpage_increment\u201d fields are used when the user\nasks to step down (using the small stepper arrows) or page down (using\nfor example the PageDown key).</p><p>If a <span data-xref=\"Gtk.ScrolledWindow\"/> doesn\u2019t behave quite as you would like, or\ndoesn\u2019t have exactly the right layout, it\u2019s very possible to set up\nyour own scrolling with <span data-xref=\"Gtk.Scrollbar\"/> and for example a <span data-xref=\"Gtk.Grid\"/>.</p>",
            "kind": "class",
            "name": "ScrolledWindow"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.SearchBar\"/> is a container made to have a search entry (possibly\nwith additional connex widgets, such as drop-down menus, or buttons)\nbuilt-in. The search bar would appear when a search is started through\ntyping on the keyboard, or the application\u2019s search mode is toggled on.</p><p>For keyboard presses to start a search, events will need to be\nforwarded from the top-level window that contains the search bar.\nSee <span data-xref=\"Gtk.SearchBar.handle_event\"/> for example code. Common shortcuts\nsuch as Ctrl+F should be handled as an application action, or through\nthe menu items.</p><p>You will also need to tell the search bar about which entry you\nare using as your search entry using <span data-xref=\"Gtk.SearchBar.connect_entry\"/>.\nThe following example shows you how to create a more complex search\nentry.</p><h2>Creating a search bar</h2><p><a href=\"https://git.gnome.org/browse/gtk+/tree/examples/search-bar.c\">A simple example</a></p>",
            "kind": "class",
            "name": "SearchBar"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.SearchEntry\"/> is a subclass of <span data-xref=\"Gtk.Entry\"/> that has\nbeen tailored for use as a search entry.</p><p>It will show an inactive symbolic \u201cfind\u201d icon when the\nsearch entry is empty, and a symbolic \u201cclear\u201d icon when\nthere is text. Clicking on the \u201cclear\u201d icon will empty\nthe search entry.</p><p>Note that the search/clear icon is shown using a secondary\nicon, and thus does not work if you are using the secondary\nicon position for some other purpose.</p><p>To make filtering appear more reactive, it is a good idea to\nnot react to every change in the entry text immediately, but\nonly after a short delay. To support this, <span data-xref=\"Gtk.SearchEntry\"/>\nemits the <span data-xref=\"Gtk.SearchEntry-search-changed\"/> signal which can\nbe used instead of the <span data-xref=\"Gtk.Editable-changed\"/> signal.</p>",
            "kind": "class",
            "name": "SearchEntry"
        },
        {
            "doc": "<p>GtkSeparator is a horizontal or vertical separator widget, depending on the\nvalue of the <span data-xref=\"Gtk.Orientable-orientation\"/> property, used to group the widgets within a\nwindow. It displays a line with a shadow to make it appear sunken into the\ninterface.</p>",
            "kind": "class",
            "name": "Separator"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.SeparatorMenuItem\"/> is a separator used to group\nitems within a menu. It displays a horizontal line with a shadow to\nmake it appear sunken into the interface.</p>",
            "kind": "class",
            "name": "SeparatorMenuItem"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.SeparatorToolItem\"/> is a <span data-xref=\"Gtk.ToolItem\"/> that separates groups of other</p>\n<h1>GtkToolItems. Depending on the theme, a <span data-xref=\"Gtk.SeparatorToolItem\"/> will</h1>\n<p>often look like a vertical line on horizontally docked toolbars.</p><p>If the <span data-xref=\"Gtk.Toolbar\"/> child property \u201cexpand\u201d is <code>true</code> and the property\n<span data-xref=\"Gtk.SeparatorToolItem-draw\"/> is <code>false</code>, a <span data-xref=\"Gtk.SeparatorToolItem\"/> will act as\na \u201cspring\u201d that forces other items to the ends of the toolbar.</p><p>Use <span data-xref=\"Gtk.SeparatorToolItem.new\"/> to create a new <span data-xref=\"Gtk.SeparatorToolItem\"/>.</p>",
            "kind": "class",
            "name": "SeparatorToolItem"
        },
        {
            "doc": "<p>GtkSettings provide a mechanism to share global settings between\napplications.</p><p>On the X window system, this sharing is realized by an\n<a href=\"http://www.freedesktop.org/wiki/Specifications/xsettings-spec\">XSettings</a>\nmanager that is usually part of the desktop environment, along with\nutilities that let the user change these settings. In the absence of\nan Xsettings manager, GTK+ reads default values for settings from\n<code>settings.ini</code> files in\n<code>/etc/gtk-3.0</code>, <code>$XDG_CONFIG_DIRS/gtk-3.0</code>\nand <code>$XDG_CONFIG_HOME/gtk-3.0</code>.\nThese files must be valid key files (see <span data-xref=\"GLib.KeyFile\">GLib.KeyFile</span>), and have\na section called Settings. Themes can also provide default values\nfor settings by installing a <code>settings.ini</code> file\nnext to their <code>gtk.css</code> file.</p><p>Applications can override system-wide settings with\n<span data-xref=\"Gtk.Settings.set_string_property\"/>, <span data-xref=\"Gtk.Settings.set_long_property\"/>,\netc. This should be restricted to special cases though; GtkSettings are\nnot meant as an application configuration facility. When doing so, you\nneed to be aware that settings that are specific to individual widgets\nmay not be available before the widget type has been realized at least\nonce. The following example demonstrates a way to do this:\n|[&lt;!-- language=\"C\" --&gt;\n  gtk_init (&amp;argc, &amp;argv);</p><p>// make sure the type is realized\n  g_type_class_unref (g_type_class_ref (GTK_TYPE_IMAGE_MENU_ITEM));</p><p>g_object_set (gtk_settings_get_default (), \"gtk-enable-animations\", FALSE, NULL);\n]|</p><p>There is one GtkSettings instance per screen. It can be obtained with\n<span data-xref=\"Gtk.Settings.get_for_screen\"/>, but in many cases, it is more convenient\nto use <span data-xref=\"Gtk.Widget.get_settings\"/>. <span data-xref=\"Gtk.Settings.get_default\"/> returns the\nGtkSettings instance for the default screen.</p>",
            "kind": "class",
            "name": "Settings"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.SizeGroup\"/> provides a mechanism for grouping a number of widgets\ntogether so they all request the same amount of space.  This is\ntypically useful when you want a column of widgets to have the same\nsize, but you can\u2019t use a <span data-xref=\"Gtk.Grid\"/> widget.</p><p>In detail, the size requested for each widget in a <span data-xref=\"Gtk.SizeGroup\"/> is\nthe maximum of the sizes that would have been requested for each\nwidget in the size group if they were not in the size group. The mode\nof the size group (see <span data-xref=\"Gtk.SizeGroup.set_mode\"/>) determines whether\nthis applies to the horizontal size, the vertical size, or both sizes.</p><p>Note that size groups only affect the amount of space requested, not\nthe size that the widgets finally receive. If you want the widgets in\na <span data-xref=\"Gtk.SizeGroup\"/> to actually be the same size, you need to pack them in\nsuch a way that they get the size they request and not more. For\nexample, if you are packing your widgets into a table, you would not\ninclude the <span data-xref=\"Gtk.AttachOptions\"/>.fill flag.</p><p><span data-xref=\"Gtk.SizeGroup\"/> objects are referenced by each widget in the size group,\nso once you have added all widgets to a <span data-xref=\"Gtk.SizeGroup\"/>, you can drop\nthe initial reference to the size group with <span data-xref=\"GObject.Object.unref\">GObject.Object.prototype.unref</span>. If the\nwidgets in the size group are subsequently destroyed, then they will\nbe removed from the size group and drop their references on the size\ngroup; when all widgets have been removed, the size group will be\nfreed.</p><p>Widgets can be part of multiple size groups; GTK+ will compute the\nhorizontal size of a widget from the horizontal requisition of all\nwidgets that can be reached from the widget by a chain of size groups\nof type <span data-xref=\"Gtk.SizeGroupMode\"/>.horizontal or <span data-xref=\"Gtk.SizeGroupMode\"/>.both, and the\nvertical size from the vertical requisition of all widgets that can be\nreached from the widget by a chain of size groups of type\n<span data-xref=\"Gtk.SizeGroupMode\"/>.vertical or <span data-xref=\"Gtk.SizeGroupMode\"/>.both.</p><p>Note that only non-contextual sizes of every widget are ever consulted\nby size groups (since size groups have no knowledge of what size a widget\nwill be allocated in one dimension, it cannot derive how much height\na widget will receive for a given width). When grouping widgets that\ntrade height for width in mode <span data-xref=\"Gtk.SizeGroupMode\"/>.vertical or <span data-xref=\"Gtk.SizeGroupMode\"/>.both:\nthe height for the minimum width will be the requested height for all\nwidgets in the group. The same is of course true when horizontally grouping\nwidth for height widgets.</p><p>Widgets that trade height-for-width should set a reasonably large minimum width\nby way of <span data-xref=\"Gtk.Label-width-chars\"/> for instance. Widgets with static sizes as well\nas widgets that grow (such as ellipsizing text) need no such considerations.</p><h1>GtkSizeGroup as GtkBuildable</h1><p>Size groups can be specified in a UI definition by placing an &lt;object&gt;\nelement with <code>class=\"GtkSizeGroup\"</code> somewhere in the UI definition. The\nwidgets that belong to the size group are specified by a &lt;widgets&gt; element\nthat may contain multiple &lt;widget&gt; elements, one for each member of the\nsize group. The \u201dname\u201d attribute gives the id of the widget.</p><p>An example of a UI definition fragment with GtkSizeGroup:\n|[\n&lt;object class=\"GtkSizeGroup\"&gt;\n  &lt;property name=\"mode\"&gt;GTK_SIZE_GROUP_HORIZONTAL&lt;/property&gt;\n  &lt;widgets&gt;\n    &lt;widget name=\"radio1\"/&gt;\n    &lt;widget name=\"radio2\"/&gt;\n  &lt;/widgets&gt;\n&lt;/object&gt;\n]|</p>",
            "kind": "class",
            "name": "SizeGroup"
        },
        {
            "doc": "<p>Together with <span data-xref=\"Gtk.Plug\"/>, <span data-xref=\"Gtk.Socket\"/> provides the ability to embed\nwidgets from one process into another process in a fashion that\nis transparent to the user. One process creates a <span data-xref=\"Gtk.Socket\"/> widget\nand passes that widget\u2019s window ID to the other process, which then\ncreates a <span data-xref=\"Gtk.Plug\"/> with that window ID. Any widgets contained in the\n<span data-xref=\"Gtk.Plug\"/> then will appear inside the first application\u2019s window.</p><p>The socket\u2019s window ID is obtained by using <span data-xref=\"Gtk.Socket.get_id\"/>.\nBefore using this function, the socket must have been realized,\nand for hence, have been added to its parent.</p><h2>Obtaining the window ID of a socket.</h2><p>|[&lt;!-- language=\"C\" --&gt;\nGtkWidget *socket = gtk_socket_new ();\ngtk_widget_show (socket);\ngtk_container_add (GTK_CONTAINER (parent), socket);</p><p>// The following call is only necessary if one of\n// the ancestors of the socket is not yet visible.\ngtk_widget_realize (socket);\ng_print (\"The ID of the sockets window is %#x\\n\",\n         gtk_socket_get_id (socket));\n]|</p><p>Note that if you pass the window ID of the socket to another\nprocess that will create a plug in the socket, you must make\nsure that the socket widget is not destroyed until that plug\nis created. Violating this rule will cause unpredictable\nconsequences, the most likely consequence being that the plug\nwill appear as a separate toplevel window. You can check if\nthe plug has been created by using <span data-xref=\"Gtk.Socket.get_plug_window\"/>.\nIf it returns a non-<code>null</code> value, then the plug has been\nsuccessfully created inside of the socket.</p><p>When GTK+ is notified that the embedded window has been destroyed,\nthen it will destroy the socket as well. You should always,\ntherefore, be prepared for your sockets to be destroyed at any\ntime when the main event loop is running. To prevent this from\nhappening, you can connect to the <span data-xref=\"Gtk.Socket-plug-removed\"/> signal.</p><p>The communication between a <span data-xref=\"Gtk.Socket\"/> and a <span data-xref=\"Gtk.Plug\"/> follows the\n<a href=\"http://www.freedesktop.org/Standards/xembed-spec\">XEmbed Protocol</a>.\nThis protocol has also been implemented in other toolkits,\ne.g. Qt, allowing the same level of\nintegration when embedding a Qt widget\nin GTK or vice versa.</p><p>The <span data-xref=\"Gtk.Plug\"/> and <span data-xref=\"Gtk.Socket\"/> widgets are only available when GTK+\nis compiled for the X11 platform and %GDK_WINDOWING_X11 is defined.\nThey can only be used on a #GdkX11Display. To use <span data-xref=\"Gtk.Plug\"/> and\n<span data-xref=\"Gtk.Socket\"/>, you need to include the <code>gtk/gtkx.h</code>\nheader.</p>",
            "kind": "class",
            "name": "Socket"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.SpinButton\"/> is an ideal way to allow the user to set the value of\nsome attribute. Rather than having to directly type a number into a\n<span data-xref=\"Gtk.Entry\"/>, GtkSpinButton allows the user to click on one of two arrows\nto increment or decrement the displayed value. A value can still be\ntyped in, with the bonus that it can be checked to ensure it is in a\ngiven range.</p><p>The main properties of a GtkSpinButton are through an adjustment.\nSee the <span data-xref=\"Gtk.Adjustment\"/> section for more details about an adjustment's\nproperties.</p><h2>Using a GtkSpinButton to get an integer</h2><p>|[&lt;!-- language=\"C\" --&gt;\n// Provides a function to retrieve an integer value from a GtkSpinButton\n// and creates a spin button to model percentage values.</p><p>gint\ngrab_int_value (GtkSpinButton *button,\n                gpointer       user_data)\n{\n  return gtk_spin_button_get_value_as_int (button);\n}</p><p>void\ncreate_integer_spin_button (void)\n{</p><p>GtkWidget <em>window, </em>button;\n  GtkAdjustment *adjustment;</p><p>adjustment = gtk_adjustment_new (50.0, 0.0, 100.0, 1.0, 5.0, 0.0);</p><p>window = gtk_window_new (GTK_WINDOW_TOPLEVEL);\n  gtk_container_set_border_width (GTK_CONTAINER (window), 5);</p><p>// creates the spinbutton, with no decimal places\n  button = gtk_spin_button_new (adjustment, 1.0, 0);\n  gtk_container_add (GTK_CONTAINER (window), button);</p><p>gtk_widget_show_all (window);\n}\n]|</p><h2>Using a GtkSpinButton to get a floating point value</h2><p>|[&lt;!-- language=\"C\" --&gt;\n// Provides a function to retrieve a floating point value from a\n// GtkSpinButton, and creates a high precision spin button.</p><p>gfloat\ngrab_float_value (GtkSpinButton *button,\n                  gpointer       user_data)\n{\n  return gtk_spin_button_get_value (button);\n}</p><p>void\ncreate_floating_spin_button (void)\n{\n  GtkWidget <em>window, </em>button;\n  GtkAdjustment *adjustment;</p><p>adjustment = gtk_adjustment_new (2.500, 0.0, 5.0, 0.001, 0.1, 0.0);</p><p>window = gtk_window_new (GTK_WINDOW_TOPLEVEL);\n  gtk_container_set_border_width (GTK_CONTAINER (window), 5);</p><p>// creates the spinbutton, with three decimal places\n  button = gtk_spin_button_new (adjustment, 0.001, 3);\n  gtk_container_add (GTK_CONTAINER (window), button);</p><p>gtk_widget_show_all (window);\n}\n]|</p>",
            "kind": "class",
            "name": "SpinButton"
        },
        {
            "doc": "<p>A GtkSpinner widget displays an icon-size spinning animation.\nIt is often used as an alternative to a <span data-xref=\"Gtk.ProgressBar\"/> for\ndisplaying indefinite activity, instead of actual progress.</p><p>To start the animation, use <span data-xref=\"Gtk.Spinner.start\"/>, to stop it\nuse <span data-xref=\"Gtk.Spinner.stop\"/>.</p>",
            "kind": "class",
            "name": "Spinner"
        },
        {
            "doc": "<p>The GtkStack widget is a container which only shows\none of its children at a time. In contrast to GtkNotebook,\nGtkStack does not provide a means for users to change the\nvisible child. Instead, the <span data-xref=\"Gtk.StackSwitcher\"/> widget can be\nused with GtkStack to provide this functionality.</p><p>Transitions between pages can be animated as slides or\nfades. This can be controlled with <span data-xref=\"Gtk.Stack.set_transition_type\"/>.\nThese animations respect the <span data-xref=\"Gtk.Settings-gtk-enable-animations\"/>\nsetting.</p><p>The GtkStack widget was added in GTK+ 3.10.</p>",
            "kind": "class",
            "name": "Stack"
        },
        {
            "doc": "<p>The GtkStackSwitcher widget acts as a controller for a\n<span data-xref=\"Gtk.Stack\"/>; it shows a row of buttons to switch between\nthe various pages of the associated stack widget.</p><p>All the content for the buttons comes from the child properties\nof the <span data-xref=\"Gtk.Stack\"/>.</p><p>It is possible to associate multiple <span data-xref=\"Gtk.StackSwitcher\"/> widgets\nwith the same stack widget.</p><p>The GtkStackSwitcher widget was added in 3.10.</p>",
            "kind": "class",
            "name": "StackSwitcher"
        },
        {
            "doc": "<p>The \u201csystem tray\u201d or notification area is normally used for transient icons\nthat indicate some special state. For example, a system tray icon might\nappear to tell the user that they have new mail, or have an incoming instant\nmessage, or something along those lines. The basic idea is that creating an\nicon in the notification area is less annoying than popping up a dialog.</p><p>A <span data-xref=\"Gtk.StatusIcon\"/> object can be used to display an icon in a \u201csystem tray\u201d.\nThe icon can have a tooltip, and the user can interact with it by\nactivating it or popping up a context menu. Critical information should\nnot solely be displayed in a <span data-xref=\"Gtk.StatusIcon\"/>, since it may not be\nvisible (e.g. when the user doesn\u2019t have a notification area on his panel).\nThis can be checked with <span data-xref=\"Gtk.StatusIcon.is_embedded\"/>.</p><p>On X11, the implementation follows the\n<a href=\"http://www.freedesktop.org/wiki/Specifications/systemtray-spec\">FreeDesktop System Tray Specification</a>.\nImplementations of the \u201ctray\u201d side of this specification can\nbe found e.g. in the GNOME 2 and KDE panel applications.</p><p>Note that a GtkStatusIcon is not a widget, but just\na <span data-xref=\"GObject.Object\">GObject.Object</span>. Making it a widget would be impractical, since the system tray\non Win32 doesn\u2019t allow to embed arbitrary widgets.</p>",
            "kind": "class",
            "name": "StatusIcon"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.Statusbar\"/> is usually placed along the bottom of an application's\nmain <span data-xref=\"Gtk.Window\"/>. It may provide a regular commentary of the application's\nstatus (as is usually the case in a web browser, for example), or may be\nused to simply output a message when the status changes, (when an upload\nis complete in an FTP client, for example).</p><p>Status bars in GTK+ maintain a stack of messages. The message at\nthe top of the each bar\u2019s stack is the one that will currently be displayed.</p><p>Any messages added to a statusbar\u2019s stack must specify a\ncontext id that is used to uniquely identify\nthe source of a message. This context id can be generated by\n<span data-xref=\"Gtk.Statusbar.get_context_id\"/>, given a message and the statusbar that\nit will be added to. Note that messages are stored in a stack, and when\nchoosing which message to display, the stack structure is adhered to,\nregardless of the context identifier of a message.</p><p>One could say that a statusbar maintains one stack of messages for\ndisplay purposes, but allows multiple message producers to maintain\nsub-stacks of the messages they produced (via context ids).</p><p>Status bars are created using <span data-xref=\"Gtk.Statusbar.new\"/>.</p><p>Messages are added to the bar\u2019s stack with <span data-xref=\"Gtk.Statusbar.push\"/>.</p><p>The message at the top of the stack can be removed using\n<span data-xref=\"Gtk.Statusbar.pop\"/>. A message can be removed from anywhere in the\nstack if its message id was recorded at the time it was added. This\nis done using <span data-xref=\"Gtk.Statusbar.remove\"/>.</p>",
            "kind": "class",
            "name": "Statusbar"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.Style\"/> object encapsulates the information that provides the look and\nfeel for a widget.</p><p>&gt; In GTK+ 3.0, GtkStyle has been deprecated and replaced by\n&gt; <span data-xref=\"Gtk.StyleContext\"/>.</p><p>Each <span data-xref=\"Gtk.Widget\"/> has an associated <span data-xref=\"Gtk.Style\"/> object that is used when\nrendering that widget. Also, a <span data-xref=\"Gtk.Style\"/> holds information for the five\npossible widget states though not every widget supports all five\nstates; see <span data-xref=\"Gtk.StateType\"/>.</p><p>Usually the <span data-xref=\"Gtk.Style\"/> for a widget is the same as the default style that\nis set by GTK+ and modified the theme engine.</p><p>Usually applications should not need to use or modify the <span data-xref=\"Gtk.Style\"/> of\ntheir widgets.</p>",
            "kind": "class",
            "name": "Style"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.StyleContext\"/> is an object that stores styling information affecting\na widget defined by <span data-xref=\"Gtk.WidgetPath\"/>.</p><p>In order to construct the final style information, <span data-xref=\"Gtk.StyleContext\"/>\nqueries information from all attached #GtkStyleProviders. Style providers\ncan be either attached explicitly to the context through\n<span data-xref=\"Gtk.StyleContext.add_provider\"/>, or to the screen through\n<span data-xref=\"Gtk.StyleContext.add_provider_for_screen\"/>. The resulting style is a\ncombination of all providers\u2019 information in priority order.</p><p>For GTK+ widgets, any <span data-xref=\"Gtk.StyleContext\"/> returned by\n<span data-xref=\"Gtk.Widget.get_style_context\"/> will already have a <span data-xref=\"Gtk.WidgetPath\"/>, a\n<span data-xref=\"Gdk.Screen\">Gdk.Screen</span> and RTL/LTR information set. The style context will be also\nupdated automatically if any of these settings change on the widget.</p><p>If you are using the theming layer standalone, you will need to set a\nwidget path and a screen yourself to the created style context through\n<span data-xref=\"Gtk.StyleContext.set_path\"/> and <span data-xref=\"Gtk.StyleContext.set_screen\"/>, as well\nas updating the context yourself using <span data-xref=\"Gtk.StyleContext.invalidate\"/>\nwhenever any of the conditions change, such as a change in the\n<span data-xref=\"Gtk.Settings-gtk-theme-name\"/> setting or a hierarchy change in the rendered\nwidget.</p><h1>Transition Animations</h1><p><span data-xref=\"Gtk.StyleContext\"/> has built-in support for state change transitions.\nNote that these animations respect the <span data-xref=\"Gtk.Settings-gtk-enable-animations\"/>\nsetting.</p><p>For simple widgets where state changes affect the whole widget area,\ncalling <span data-xref=\"Gtk.StyleContext.notify_state_change\"/> with a <code>null</code> region\nis sufficient to trigger the transition animation. And GTK+ already\ndoes that when <span data-xref=\"Gtk.Widget.set_state\"/> or <span data-xref=\"Gtk.Widget.set_state_flags\"/>\nare called.</p><p>If a widget needs to declare several animatable regions (i.e. not\naffecting the whole widget area), its <span data-xref=\"Gtk.Widget-draw\"/> signal handler\nneeds to wrap the render operations for the different regions with\ncalls to <span data-xref=\"Gtk.StyleContext.push_animatable_region\"/> and\n<span data-xref=\"Gtk.StyleContext.pop_animatable_region\"/>. These functions take an\nidentifier for the region which must be unique within the style context.\nFor simple widgets with a fixed set of animatable regions, using an\nenumeration works well:</p><p>An example for Using an enumeration to identify animatable regions:</p><p>|[&lt;!-- language=\"C\" --&gt;\nenum {\n  REGION_ENTRY,\n  REGION_BUTTON_UP,\n  REGION_BUTTON_DOWN\n};</p><p>...</p><p>gboolean\nspin_button_draw (GtkWidget <em>widget,\n                  cairo_t   </em>cr)\n{\n  GtkStyleContext *context;</p><p>context = gtk_widget_get_style_context (widget);</p><p>gtk_style_context_push_animatable_region (context,\n                                            GUINT_TO_POINTER (REGION_ENTRY));</p><p>gtk_render_background (cr, 0, 0, 100, 30);\n  gtk_render_frame (cr, 0, 0, 100, 30);</p><p>gtk_style_context_pop_animatable_region (context);</p><p>...\n}\n]|</p><p>For complex widgets with an arbitrary number of animatable regions, it\nis up to the implementation to come up with a way to uniquely identify\neach animatable region. Using pointers to internal structs is one way\nto achieve this:</p><p>An example for using struct pointers to identify animatable regions:\n|[&lt;!-- language=\"C\" --&gt;\nvoid\nnotebook_draw_tab (GtkWidget    <em>widget,\n                   NotebookPage </em>page,\n                   cairo_t      *cr)\n{\n  gtk_style_context_push_animatable_region (context, page);\n  gtk_render_extension (cr, page-&gt;x, page-&gt;y, page-&gt;width, page-&gt;height);\n  gtk_style_context_pop_animatable_region (context);\n}\n]|</p><p>The widget also needs to notify the style context about a state change\nfor a given animatable region so the animation is triggered.</p><p>An example for triggering a state change animation on a region:\n|[&lt;!-- language=\"C\" --&gt;\ngboolean\nnotebook_motion_notify (GtkWidget      <em>widget,\n                        GdkEventMotion </em>event)\n{\n  GtkStyleContext <em>context;\n  NotebookPage </em>page;</p><p>context = gtk_widget_get_style_context (widget);\n  page = find_page_under_pointer (widget, event);\n  gtk_style_context_notify_state_change (context,\n                                         gtk_widget_get_window (widget),\n                                         page,\n                                         GTK_STATE_PRELIGHT,\n                                         TRUE);\n  ...\n}\n]|</p><p><span data-xref=\"Gtk.StyleContext.notify_state_change\"/> accepts <code>null</code> region IDs as a\nspecial value, in this case, the whole widget area will be updated\nby the animation.</p><h1>Style Classes and Regions # {#gtkstylecontext-classes}</h1><p>Widgets can add style classes to their context, which can be used\nto associate different styles by class\n(see [Selectors][gtkcssprovider-selectors]).\nTheme engines can also use style classes to vary their rendering.</p><p>Widgets can also add regions with flags to their context.</p><p>The regions used by GTK+ widgets are:</p><h2>row</h2>\n<p>Used by <span data-xref=\"Gtk.TreeView\"/>. Can be used with the flags: <code>even</code>, <code>odd</code>.</p><h2>column</h2>\n<p>Used by <span data-xref=\"Gtk.TreeView\"/>. Can be used with the flags: <code>first</code>, <code>last</code>, <code>sorted</code>.</p><h2>column-header</h2>\n<p>Used by <span data-xref=\"Gtk.TreeView\"/>.</p><h2>tab</h2>\n<p>Used by <span data-xref=\"Gtk.Notebook\"/>. Can be used with the flags: <code>even</code>, <code>odd</code>, <code>first</code>, <code>last</code>.</p><h1>Custom styling in UI libraries and applications</h1><p>If you are developing a library with custom #GtkWidgets that\nrender differently than standard components, you may need to add a\n<span data-xref=\"Gtk.StyleProvider\"/> yourself with the %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK\npriority, either a <span data-xref=\"Gtk.CssProvider\"/> or a custom object implementing the\n<span data-xref=\"Gtk.StyleProvider\"/> interface. This way theming engines may still attempt\nto style your UI elements in a different way if needed so.</p><p>If you are using custom styling on an applications, you probably want then\nto make your style information prevail to the theme\u2019s, so you must use\na <span data-xref=\"Gtk.StyleProvider\"/> with the %GTK_STYLE_PROVIDER_PRIORITY_APPLICATION\npriority, keep in mind that the user settings in\n<code>XDG_CONFIG_HOME/gtk-3.0/gtk.css</code> will\nstill take precedence over your changes, as it uses the\n%GTK_STYLE_PROVIDER_PRIORITY_USER priority.</p><p>If a custom theming engine is needed, you probably want to implement a\n<span data-xref=\"Gtk.StyleProvider\"/> yourself so it points to your <span data-xref=\"Gtk.ThemingEngine\"/>\nimplementation, as <span data-xref=\"Gtk.CssProvider\"/> uses <span data-xref=\"Gtk.ThemingEngine.load\"/>\nwhich loads the theming engine module from the standard paths.</p>",
            "kind": "class",
            "name": "StyleContext"
        },
        {
            "doc": "<p>GtkStyleProperties provides the storage for style information\nthat is used by <span data-xref=\"Gtk.StyleContext\"/> and other <span data-xref=\"Gtk.StyleProvider\"/>\nimplementations.</p><p>Before style properties can be stored in GtkStyleProperties, they\nmust be registered with <span data-xref=\"Gtk.StyleProperties.register_property\"/>.</p><p>Unless you are writing a <span data-xref=\"Gtk.StyleProvider\"/> implementation, you\nare unlikely to use this API directly, as <span data-xref=\"Gtk.StyleContext.get\"/>\nand its variants are the preferred way to access styling information\nfrom widget implementations and theming engine implementations\nshould use the APIs provided by <span data-xref=\"Gtk.ThemingEngine\"/> instead.</p>",
            "kind": "class",
            "name": "StyleProperties"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.Switch\"/> is a widget that has two states: on or off. The user can control\nwhich state should be active by clicking the empty area, or by dragging the\nhandle.</p><p>GtkSwitch can also handle situations where the underlying state changes with\na delay. See <span data-xref=\"Gtk.Switch-state-set\"/> for details.</p>",
            "kind": "class",
            "name": "Switch"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.Table\"/> functions allow the programmer to arrange widgets in rows and\ncolumns, making it easy to align many widgets next to each other,\nhorizontally and vertically.</p><p>Tables are created with a call to <span data-xref=\"Gtk.Table.new\"/>, the size of which can\nlater be changed with <span data-xref=\"Gtk.Table.resize\"/>.</p><p>Widgets can be added to a table using <span data-xref=\"Gtk.Table.attach\"/> or the more\nconvenient (but slightly less flexible) <span data-xref=\"Gtk.Table.attach_defaults\"/>.</p><p>To alter the space next to a specific row, use <span data-xref=\"Gtk.Table.set_row_spacing\"/>,\nand for a column, <span data-xref=\"Gtk.Table.set_col_spacing\"/>.\nThe gaps between all rows or columns can be changed by\ncalling <span data-xref=\"Gtk.Table.set_row_spacings\"/> or <span data-xref=\"Gtk.Table.set_col_spacings\"/>\nrespectively. Note that spacing is added between the\nchildren, while padding added by <span data-xref=\"Gtk.Table.attach\"/> is added on\neither side of the widget it belongs to.</p><p><span data-xref=\"Gtk.Table.set_homogeneous\"/>, can be used to set whether all cells in the\ntable will resize themselves to the size of the largest widget in the table.</p><p>&gt; <span data-xref=\"Gtk.Table\"/> has been deprecated. Use <span data-xref=\"Gtk.Grid\"/> instead. It provides the same\n&gt; capabilities as GtkTable for arranging widgets in a rectangular grid, but\n&gt; does support height-for-width geometry management.</p>",
            "kind": "class",
            "name": "Table"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.TearoffMenuItem\"/> is a special <span data-xref=\"Gtk.MenuItem\"/> which is used to\ntear off and reattach its menu.</p><p>When its menu is shown normally, the <span data-xref=\"Gtk.TearoffMenuItem\"/> is drawn as a\ndotted line indicating that the menu can be torn off.  Activating it\ncauses its menu to be torn off and displayed in its own window\nas a tearoff menu.</p><p>When its menu is shown as a tearoff menu, the <span data-xref=\"Gtk.TearoffMenuItem\"/> is drawn\nas a dotted line which has a left pointing arrow graphic indicating that\nthe tearoff menu can be reattached.  Activating it will erase the tearoff\nmenu window.</p><p>&gt; <span data-xref=\"Gtk.TearoffMenuItem\"/> is deprecated and should not be used in newly\n&gt; written code. Menus are not meant to be torn around.</p>",
            "kind": "class",
            "name": "TearoffMenuItem"
        },
        {
            "doc": "<p>You may wish to begin by reading the\n[text widget conceptual overview][TextWidget]\nwhich gives an overview of all the objects and data\ntypes related to the text widget and how they work together.</p>",
            "kind": "class",
            "name": "TextBuffer"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.TextChildAnchor\"/> is a spot in the buffer where child widgets can\nbe \u201canchored\u201d (inserted inline, as if they were characters). The anchor\ncan have multiple widgets anchored, to allow for multiple views.</p>",
            "kind": "class",
            "name": "TextChildAnchor"
        },
        {
            "doc": "<p>You may wish to begin by reading the\n[text widget conceptual overview][TextWidget]\nwhich gives an overview of all the objects and data\ntypes related to the text widget and how they work together.</p><p>A <span data-xref=\"Gtk.TextMark\"/> is like a bookmark in a text buffer; it preserves a position in\nthe text. You can convert the mark to an iterator using\n<span data-xref=\"Gtk.TextBuffer.get_iter_at_mark\"/>. Unlike iterators, marks remain valid across\nbuffer mutations, because their behavior is defined when text is inserted or\ndeleted. When text containing a mark is deleted, the mark remains in the\nposition originally occupied by the deleted text. When text is inserted at a\nmark, a mark with \u201cleft gravity\u201d will be moved to the\nbeginning of the newly-inserted text, and a mark with \u201cright\ngravity\u201d will be moved to the end.</p><p>Note that \u201cleft\u201d and \u201cright\u201d here refer to logical direction (left\nis the toward the start of the buffer); in some languages such as\nHebrew the logically-leftmost text is not actually on the left when\ndisplayed.</p><p>Marks are reference counted, but the reference count only controls the validity\nof the memory; marks can be deleted from the buffer at any time with\n<span data-xref=\"Gtk.TextBuffer.delete_mark\"/>. Once deleted from the buffer, a mark is\nessentially useless.</p><p>Marks optionally have names; these can be convenient to avoid passing the\n<span data-xref=\"Gtk.TextMark\"/> object around.</p><p>Marks are typically created using the <span data-xref=\"Gtk.TextBuffer.create_mark\"/> function.</p>",
            "kind": "class",
            "name": "TextMark"
        },
        {
            "doc": "<p>You may wish to begin by reading the\n[text widget conceptual overview][TextWidget]\nwhich gives an overview of all the objects and\ndata types related to the text widget and how they work together.</p><p>Tags should be in the <span data-xref=\"Gtk.TextTagTable\"/> for a given <span data-xref=\"Gtk.TextBuffer\"/>\nbefore using them with that buffer.</p><p><span data-xref=\"Gtk.TextBuffer.create_tag\"/> is the best way to create tags.\nSee \u201cgtk3-demo\u201d for numerous examples.</p><p>For each property of <span data-xref=\"Gtk.TextTag\"/>, there is a \u201cset\u201d property, e.g.\n\u201cfont-set\u201d corresponds to \u201cfont\u201d. These \u201cset\u201d properties reflect\nwhether a property has been set or not.\nThey are maintained by GTK+ and you should not set them independently.</p>",
            "kind": "class",
            "name": "TextTag"
        },
        {
            "doc": "<p>You may wish to begin by reading the\n[text widget conceptual overview][TextWidget]\nwhich gives an overview of all the objects and\ndata types related to the text widget and how they work together.</p><h1>GtkTextTagTables as GtkBuildable</h1><p>The GtkTextTagTable implementation of the GtkBuildable interface\nsupports adding tags by specifying \u201ctag\u201d as the \u201ctype\u201d attribute\nof a &lt;child&gt; element.</p><p>An example of a UI definition fragment specifying tags:\n|[\n&lt;object class=\"GtkTextTagTable\"&gt;\n &lt;child type=\"tag\"&gt;\n   &lt;object class=\"GtkTextTag\"/&gt;\n &lt;/child&gt;\n&lt;/object&gt;\n]|</p>",
            "kind": "class",
            "name": "TextTagTable"
        },
        {
            "doc": "<p>You may wish to begin by reading the\n[text widget conceptual overview][TextWidget]\nwhich gives an overview of all the objects and data\ntypes related to the text widget and how they work together.</p>",
            "kind": "class",
            "name": "TextView"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.ThemingEngine\"/> is the object used for rendering themed content\nin GTK+ widgets. Even though GTK+ has a default implementation,\nit can be overridden in CSS files by enforcing a <span data-xref=\"Gtk.ThemingEngine\"/>\nobject to be loaded as a module.</p><p>In order to implement a theming engine, a <span data-xref=\"Gtk.ThemingEngine\"/> subclass\nmust be created, alongside the CSS file that will reference it, the\ntheming engine would be created as an .so library, and installed in\n$(gtk-modules-dir)/theming-engines/.</p><h1>GtkThemingEngines have limited access to the object they are</h1>\n<p>rendering, the <span data-xref=\"Gtk.ThemingEngine\"/> API has read-only accessors to the\nstyle information contained in the rendered object\u2019s <span data-xref=\"Gtk.StyleContext\"/>.</p>",
            "kind": "class",
            "name": "ThemingEngine"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.ToggleAction\"/> corresponds roughly to a <span data-xref=\"Gtk.CheckMenuItem\"/>. It has an\n\u201cactive\u201d state specifying whether the action has been checked or not.</p>",
            "kind": "class",
            "name": "ToggleAction"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.ToggleButton\"/> is a <span data-xref=\"Gtk.Button\"/> which will remain \u201cpressed-in\u201d when\nclicked. Clicking again will cause the toggle button to return to its\nnormal state.</p><p>A toggle button is created by calling either <span data-xref=\"Gtk.ToggleButton.new\"/> or\n<span data-xref=\"Gtk.ToggleButton.new_with_label\"/>. If using the former, it is advisable to\npack a widget, (such as a <span data-xref=\"Gtk.Label\"/> and/or a <span data-xref=\"Gtk.Image\"/>), into the toggle\nbutton\u2019s container. (See <span data-xref=\"Gtk.Button\"/> for more information).</p><p>The state of a <span data-xref=\"Gtk.ToggleButton\"/> can be set specifically using\n<span data-xref=\"Gtk.ToggleButton.set_active\"/>, and retrieved using\n<span data-xref=\"Gtk.ToggleButton.get_active\"/>.</p><p>To simply switch the state of a toggle button, use <span data-xref=\"Gtk.ToggleButton.toggled\"/>.</p><h2>Creating two <span data-xref=\"Gtk.ToggleButton\"/> widgets.</h2><p>|[&lt;!-- language=\"C\" --&gt;\nvoid make_toggles (void) {\n   GtkWidget <em>dialog, </em>toggle1, <em>toggle2;\n   GtkWidget </em>content_area;\n   const char *text;</p><p>dialog = gtk_dialog_new (text);\n   content_area = gtk_dialog_get_content_area ();</p><p>text = \"Hi, i\u2019m a toggle button.\";\n   toggle1 = gtk_toggle_button_new_with_label (text);</p><p>// Makes this toggle button invisible\n   gtk_toggle_button_set_mode (GTK_TOGGLE_BUTTON (toggle1),\n                               TRUE);</p><p>g_signal_connect (toggle1, \"toggled\",\n                     G_CALLBACK (output_state),\n                     NULL);\n   gtk_box_pack_start (GTK_BOX (content_area),\n                       toggle1, FALSE, FALSE, 2);</p><p>text = \"Hi, i\u2019m a toggle button.\";\n   toggle2 = gtk_toggle_button_new_with_label (text);\n   gtk_toggle_button_set_mode (GTK_TOGGLE_BUTTON (toggle2),\n                               FALSE);\n   g_signal_connect (toggle2, \"toggled\",\n                     G_CALLBACK (output_state),\n                     NULL);\n   gtk_box_pack_start (GTK_BOX (content_area),\n                       toggle2, FALSE, FALSE, 2);</p><p>gtk_widget_show_all (dialog);\n}\n]|</p>",
            "kind": "class",
            "name": "ToggleButton"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.ToggleToolButton\"/> is a <span data-xref=\"Gtk.ToolItem\"/> that contains a toggle\nbutton.</p><p>Use <span data-xref=\"Gtk.ToggleToolButton.new\"/> to create a new\n<span data-xref=\"Gtk.ToggleToolButton\"/>.</p>",
            "kind": "class",
            "name": "ToggleToolButton"
        },
        {
            "doc": "<h1>GtkToolButtons are #GtkToolItems containing buttons.</h1><p>Use <span data-xref=\"Gtk.ToolButton.new\"/> to create a new <span data-xref=\"Gtk.ToolButton\"/>.</p><p>The label of a <span data-xref=\"Gtk.ToolButton\"/> is determined by the properties\n<span data-xref=\"Gtk.ToolButton-label-widget\"/>, <span data-xref=\"Gtk.ToolButton-label\"/>, and\n<span data-xref=\"Gtk.ToolButton-stock-id\"/>. If <span data-xref=\"Gtk.ToolButton-label-widget\"/> is\nnon-<code>null</code>, then that widget is used as the label. Otherwise, if\n<span data-xref=\"Gtk.ToolButton-label\"/> is non-<code>null</code>, that string is used as the label.\nOtherwise, if <span data-xref=\"Gtk.ToolButton-stock-id\"/> is non-<code>null</code>, the label is\ndetermined by the stock item. Otherwise, the button does not have a label.</p><p>The icon of a <span data-xref=\"Gtk.ToolButton\"/> is determined by the properties\n<span data-xref=\"Gtk.ToolButton-icon-widget\"/> and <span data-xref=\"Gtk.ToolButton-stock-id\"/>. If\n<span data-xref=\"Gtk.ToolButton-icon-widget\"/> is non-<code>null</code>, then\nthat widget is used as the icon. Otherwise, if <span data-xref=\"Gtk.ToolButton-stock-id\"/> is\nnon-<code>null</code>, the icon is determined by the stock item. Otherwise,\nthe button does not have a icon.</p>",
            "kind": "class",
            "name": "ToolButton"
        },
        {
            "doc": "<h1>GtkToolItems are widgets that can appear on a toolbar. To</h1>\n<p>create a toolbar item that contain something else than a button, use\n<span data-xref=\"Gtk.ToolItem.new\"/>. Use <span data-xref=\"Gtk.Container.add\"/> to add a child\nwidget to the tool item.</p><p>For toolbar items that contain buttons, see the <span data-xref=\"Gtk.ToolButton\"/>,\n<span data-xref=\"Gtk.ToggleToolButton\"/> and <span data-xref=\"Gtk.RadioToolButton\"/> classes.</p><p>See the <span data-xref=\"Gtk.Toolbar\"/> class for a description of the toolbar widget, and\n<span data-xref=\"Gtk.ToolShell\"/> for a description of the tool shell interface.</p>",
            "kind": "class",
            "name": "ToolItem"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.ToolItemGroup\"/> is used together with <span data-xref=\"Gtk.ToolPalette\"/> to add</p>\n<h1>GtkToolItems to a palette like container with different</h1>\n<p>categories and drag and drop support.</p>",
            "kind": "class",
            "name": "ToolItemGroup"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.ToolPalette\"/> allows you to add #GtkToolItems to a palette-like\ncontainer with different categories and drag and drop support.</p><p>A <span data-xref=\"Gtk.ToolPalette\"/> is created with a call to <span data-xref=\"Gtk.ToolPalette.new\"/>.</p><h1>GtkToolItems cannot be added directly to a <span data-xref=\"Gtk.ToolPalette\"/> -</h1>\n<p>instead they are added to a <span data-xref=\"Gtk.ToolItemGroup\"/> which can than be added\nto a <span data-xref=\"Gtk.ToolPalette\"/>. To add a <span data-xref=\"Gtk.ToolItemGroup\"/> to a <span data-xref=\"Gtk.ToolPalette\"/>,\nuse <span data-xref=\"Gtk.Container.add\"/>.</p><p>|[&lt;!-- language=\"C\" --&gt;\nGtkWidget <em>palette, </em>group;\nGtkToolItem *item;</p><p>palette = gtk_tool_palette_new ();\ngroup = gtk_tool_item_group_new (_(\"Test Category\"));\ngtk_container_add (GTK_CONTAINER (palette), group);</p><p>item = gtk_tool_button_new_new (NULL, _(\"_Open\"));\ngtk_tool_button_set_icon_name (GTK_TOOL_BUTTON (item), \"document-open\");\ngtk_tool_item_group_insert (GTK_TOOL_ITEM_GROUP (group), item, -1);\n]|</p><p>The easiest way to use drag and drop with <span data-xref=\"Gtk.ToolPalette\"/> is to call\n<span data-xref=\"Gtk.ToolPalette.add_drag_dest\"/> with the desired drag source @palette\nand the desired drag target @widget. Then <span data-xref=\"Gtk.ToolPalette.get_drag_item\"/>\ncan be used to get the dragged item in the <span data-xref=\"Gtk.Widget-drag-data-received\"/>\nsignal handler of the drag target.</p><p>|[&lt;!-- language=\"C\" --&gt;\nstatic void\npassive_canvas_drag_data_received (GtkWidget        <em>widget,\n                                   GdkDragContext   </em>context,\n                                   gint              x,\n                                   gint              y,\n                                   GtkSelectionData <em>selection,\n                                   guint             info,\n                                   guint             time,\n                                   gpointer          data)\n{\n  GtkWidget </em>palette;\n  GtkWidget *item;</p><p>// Get the dragged item\n  palette = gtk_widget_get_ancestor (gtk_drag_get_source_widget (context),\n                                     GTK_TYPE_TOOL_PALETTE);\n  if (palette != NULL)\n    item = gtk_tool_palette_get_drag_item (GTK_TOOL_PALETTE (palette),\n                                           selection);</p><p>// Do something with item\n}</p><p>GtkWidget *target, palette;</p><p>palette = gtk_tool_palette_new ();\ntarget = gtk_drawing_area_new ();</p><p>g_signal_connect (G_OBJECT (target), \"drag-data-received\",\n                  G_CALLBACK (passive_canvas_drag_data_received), NULL);\ngtk_tool_palette_add_drag_dest (GTK_TOOL_PALETTE (palette), target,\n                                GTK_DEST_DEFAULT_ALL,\n                                GTK_TOOL_PALETTE_DRAG_ITEMS,\n                                GDK_ACTION_COPY);\n]|</p>",
            "kind": "class",
            "name": "ToolPalette"
        },
        {
            "doc": "<p>A toolbar is created with a call to <span data-xref=\"Gtk.Toolbar.new\"/>.</p><p>A toolbar can contain instances of a subclass of <span data-xref=\"Gtk.ToolItem\"/>. To add\na <span data-xref=\"Gtk.ToolItem\"/> to the a toolbar, use <span data-xref=\"Gtk.Toolbar.insert\"/>. To remove\nan item from the toolbar use <span data-xref=\"Gtk.Container.remove\"/>. To add a button\nto the toolbar, add an instance of <span data-xref=\"Gtk.ToolButton\"/>.</p><p>Toolbar items can be visually grouped by adding instances of\n<span data-xref=\"Gtk.SeparatorToolItem\"/> to the toolbar. If the GtkToolbar child property\n\u201cexpand\u201d is #TRUE and the property <span data-xref=\"Gtk.SeparatorToolItem-draw\"/> is set to</p>\n<h1>FALSE, the effect is to force all following items to the end of the toolbar.</h1><p>Creating a context menu for the toolbar can be done by connecting to\nthe <span data-xref=\"Gtk.Toolbar-popup-context-menu\"/> signal.</p>",
            "kind": "class",
            "name": "Toolbar"
        },
        {
            "doc": "<p>Basic tooltips can be realized simply by using <span data-xref=\"Gtk.Widget.set_tooltip_text\"/>\nor <span data-xref=\"Gtk.Widget.set_tooltip_markup\"/> without any explicit tooltip object.</p><p>When you need a tooltip with a little more fancy contents, like adding an\nimage, or you want the tooltip to have different contents per <span data-xref=\"Gtk.TreeView\"/>\nrow or cell, you will have to do a little more work:</p><ul>\n<li>Set the <span data-xref=\"Gtk.Widget-has-tooltip\"/> property to <code>true</code>, this will make GTK+\n  monitor the widget for motion and related events which are needed to\n  determine when and where to show a tooltip.</li>\n</ul><ul>\n<li>Connect to the <span data-xref=\"Gtk.Widget-query-tooltip\"/> signal.  This signal will be\n  emitted when a tooltip is supposed to be shown. One of the arguments passed\n  to the signal handler is a GtkTooltip object. This is the object that we\n  are about to display as a tooltip, and can be manipulated in your callback\n  using functions like <span data-xref=\"Gtk.Tooltip.set_icon\"/>. There are functions for setting\n  the tooltip\u2019s markup, setting an image from a named icon, or even putting in\n  a custom widget.</li>\n</ul><p>Return <code>true</code> from your query-tooltip handler. This causes the tooltip to be\n  show. If you return <code>false</code>, it will not be shown.</p><p>In the probably rare case where you want to have even more control over the\ntooltip that is about to be shown, you can set your own <span data-xref=\"Gtk.Window\"/> which\nwill be used as tooltip window.  This works as follows:</p><ul>\n<li>Set <span data-xref=\"Gtk.Widget-has-tooltip\"/> and connect to <span data-xref=\"Gtk.Widget-query-tooltip\"/> as before.\n  Use <span data-xref=\"Gtk.Widget.set_tooltip_window\"/> to set a <span data-xref=\"Gtk.Window\"/> created by you as\n  tooltip window.</li>\n</ul><ul>\n<li>In the <span data-xref=\"Gtk.Widget-query-tooltip\"/> callback you can access your window using\n  <span data-xref=\"Gtk.Widget.get_tooltip_window\"/> and manipulate as you wish. The semantics of\n  the return value are exactly as before, return <code>true</code> to show the window,\n  <code>false</code> to not show it.</li>\n</ul>",
            "kind": "class",
            "name": "Tooltip"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.TreeModelFilter\"/> is a tree model which wraps another tree model,\nand can do the following things:</p><ul>\n<li>Filter specific rows, based on data from a \u201cvisible column\u201d, a column\n  storing booleans indicating whether the row should be filtered or not,\n  or based on the return value of a \u201cvisible function\u201d, which gets a\n  model, iter and user_data and returns a boolean indicating whether the\n  row should be filtered or not.</li>\n</ul><ul>\n<li>Modify the \u201cappearance\u201d of the model, using a modify function.\n  This is extremely powerful and allows for just changing some\n  values and also for creating a completely different model based\n  on the given child model.</li>\n</ul><ul>\n<li>Set a different root node, also known as a \u201cvirtual root\u201d. You can pass\n  in a <span data-xref=\"Gtk.TreePath\"/> indicating the root node for the filter at construction\n  time.</li>\n</ul><p>The basic API is similar to <span data-xref=\"Gtk.TreeModelSort\"/>. For an example on its usage,\nsee the section on <span data-xref=\"Gtk.TreeModelSort\"/>.</p><p>When using <span data-xref=\"Gtk.TreeModelFilter\"/>, it is important to realize that\n<span data-xref=\"Gtk.TreeModelFilter\"/> maintains an internal cache of all nodes which are\nvisible in its clients. The cache is likely to be a subtree of the tree\nexposed by the child model. <span data-xref=\"Gtk.TreeModelFilter\"/> will not cache the entire\nchild model when unnecessary to not compromise the caching mechanism\nthat is exposed by the reference counting scheme. If the child model\nimplements reference counting, unnecessary signals may not be emitted\nbecause of reference counting rule 3, see the <span data-xref=\"Gtk.TreeModel\"/>\ndocumentation. (Note that e.g. <span data-xref=\"Gtk.TreeStore\"/> does not implement\nreference counting and will always emit all signals, even when\nthe receiving node is not visible).</p><p>Because of this, limitations for possible visible functions do apply.\nIn general, visible functions should only use data or properties from\nthe node for which the visibility state must be determined, its siblings\nor its parents. Usually, having a dependency on the state of any child\nnode is not possible, unless references are taken on these explicitly.\nWhen no such reference exists, no signals may be received for these child\nnodes (see reference couting rule number 3 in the <span data-xref=\"Gtk.TreeModel\"/> section).</p><p>Determining the visibility state of a given node based on the state\nof its child nodes is a frequently occurring use case. Therefore,\n<span data-xref=\"Gtk.TreeModelFilter\"/> explicitly supports this. For example, when a node\ndoes not have any children, you might not want the node to be visible.\nAs soon as the first row is added to the node\u2019s child level (or the\nlast row removed), the node\u2019s visibility should be updated.</p><p>This introduces a dependency from the node on its child nodes. In order\nto accommodate this, <span data-xref=\"Gtk.TreeModelFilter\"/> must make sure the necessary\nsignals are received from the child model. This is achieved by building,\nfor all nodes which are exposed as visible nodes to <span data-xref=\"Gtk.TreeModelFilter\"/>'s\nclients, the child level (if any) and take a reference on the first node\nin this level. Furthermore, for every row-inserted, row-changed or\nrow-deleted signal (also these which were not handled because the node\nwas not cached), <span data-xref=\"Gtk.TreeModelFilter\"/> will check if the visibility state\nof any parent node has changed.</p><p>Beware, however, that this explicit support is limited to these two\ncases. For example, if you want a node to be visible only if two nodes\nin a child\u2019s child level (2 levels deeper) are visible, you are on your\nown. In this case, either rely on <span data-xref=\"Gtk.TreeStore\"/> to emit all signals\nbecause it does not implement reference counting, or for models that\ndo implement reference counting, obtain references on these child levels\nyourself.</p>",
            "kind": "class",
            "name": "TreeModelFilter"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.TreeModelSort\"/> is a model which implements the <span data-xref=\"Gtk.TreeSortable\"/>\ninterface.  It does not hold any data itself, but rather is created with\na child model and proxies its data.  It has identical column types to\nthis child model, and the changes in the child are propagated.  The\nprimary purpose of this model is to provide a way to sort a different\nmodel without modifying it. Note that the sort function used by\n<span data-xref=\"Gtk.TreeModelSort\"/> is not guaranteed to be stable.</p><p>The use of this is best demonstrated through an example.  In the\nfollowing sample code we create two <span data-xref=\"Gtk.TreeView\"/> widgets each with a\nview of the same data.  As the model is wrapped here by a\n<span data-xref=\"Gtk.TreeModelSort\"/>, the two #GtkTreeViews can each sort their\nview of the data without affecting the other.  By contrast, if we\nsimply put the same model in each widget, then sorting the first would\nsort the second.</p><h2>Using a <span data-xref=\"Gtk.TreeModelSort\"/></h2><p>|[&lt;!-- language=\"C\" --&gt;\n{\n  GtkTreeView <em>tree_view1;\n  GtkTreeView </em>tree_view2;\n  GtkTreeModel <em>sort_model1;\n  GtkTreeModel </em>sort_model2;\n  GtkTreeModel *child_model;</p><p>// get the child model\n  child_model = get_my_model ();</p><p>// Create the first tree\n  sort_model1 = gtk_tree_model_sort_new_with_model (child_model);\n  tree_view1 = gtk_tree_view_new_with_model (sort_model1);</p><p>// Create the second tree\n  sort_model2 = gtk_tree_model_sort_new_with_model (child_model);\n  tree_view2 = gtk_tree_view_new_with_model (sort_model2);</p><p>// Now we can sort the two models independently\n  gtk_tree_sortable_set_sort_column_id (GTK_TREE_SORTABLE (sort_model1),\n                                        COLUMN_1, GTK_SORT_ASCENDING);\n  gtk_tree_sortable_set_sort_column_id (GTK_TREE_SORTABLE (sort_model2),\n                                        COLUMN_1, GTK_SORT_DESCENDING);\n}\n]|</p><p>To demonstrate how to access the underlying child model from the sort\nmodel, the next example will be a callback for the <span data-xref=\"Gtk.TreeSelection\"/>\n<span data-xref=\"Gtk.TreeSelection-changed\"/> signal.  In this callback, we get a string\nfrom COLUMN_1 of the model.  We then modify the string, find the same\nselected row on the child model, and change the row there.</p><h2>Accessing the child model of in a selection changed callback</h2><p>|[&lt;!-- language=\"C\" --&gt;\nvoid\nselection_changed (GtkTreeSelection <em>selection, gpointer data)\n{\n  GtkTreeModel </em>sort_model = NULL;\n  GtkTreeModel <em>child_model;\n  GtkTreeIter sort_iter;\n  GtkTreeIter child_iter;\n  char </em>some_data = NULL;\n  char *modified_data;</p><p>// Get the current selected row and the model.\n  if (! gtk_tree_selection_get_selected (selection,\n                                         &amp;sort_model,\n                                         &amp;sort_iter))\n    return;</p><p>// Look up the current value on the selected row and get\n  // a new value to change it to.\n  gtk_tree_model_get (GTK_TREE_MODEL (sort_model), &amp;sort_iter,\n                      COLUMN_1, &amp;some_data,\n                      -1);</p><p>modified_data = change_the_data (some_data);\n  g_free (some_data);</p><p>// Get an iterator on the child model, instead of the sort model.\n  gtk_tree_model_sort_convert_iter_to_child_iter (GTK_TREE_MODEL_SORT (sort_model),\n                                                  &amp;child_iter,\n                                                  &amp;sort_iter);</p><p>// Get the child model and change the value of the row. In this\n  // example, the child model is a GtkListStore. It could be any other\n  // type of model, though.\n  child_model = gtk_tree_model_sort_get_model (GTK_TREE_MODEL_SORT (sort_model));\n  gtk_list_store_set (GTK_LIST_STORE (child_model), &amp;child_iter,\n                      COLUMN_1, &amp;modified_data,\n                      -1);\n  g_free (modified_data);\n}\n]|</p>",
            "kind": "class",
            "name": "TreeModelSort"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.TreeSelection\"/> object is a helper object to manage the selection\nfor a <span data-xref=\"Gtk.TreeView\"/> widget.  The <span data-xref=\"Gtk.TreeSelection\"/> object is\nautomatically created when a new <span data-xref=\"Gtk.TreeView\"/> widget is created, and\ncannot exist independently of this widget.  The primary reason the\n<span data-xref=\"Gtk.TreeSelection\"/> objects exists is for cleanliness of code and API.\nThat is, there is no conceptual reason all these functions could not be\nmethods on the <span data-xref=\"Gtk.TreeView\"/> widget instead of a separate function.</p><p>The <span data-xref=\"Gtk.TreeSelection\"/> object is gotten from a <span data-xref=\"Gtk.TreeView\"/> by calling\n<span data-xref=\"Gtk.TreeView.get_selection\"/>.  It can be manipulated to check the\nselection status of the tree, as well as select and deselect individual\nrows.  Selection is done completely view side.  As a result, multiple\nviews of the same model can have completely different selections.\nAdditionally, you cannot change the selection of a row on the model that\nis not currently displayed by the view without expanding its parents\nfirst.</p><p>One of the important things to remember when monitoring the selection of\na view is that the <span data-xref=\"Gtk.TreeSelection-changed\"/> signal is mostly a hint.\nThat is, it may only emit one signal when a range of rows is selected.\nAdditionally, it may on occasion emit a <span data-xref=\"Gtk.TreeSelection-changed\"/> signal\nwhen nothing has happened (mostly as a result of programmers calling\nselect_row on an already selected row).</p>",
            "kind": "class",
            "name": "TreeSelection"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.TreeStore\"/> object is a list model for use with a <span data-xref=\"Gtk.TreeView\"/>\nwidget.  It implements the <span data-xref=\"Gtk.TreeModel\"/> interface, and consequentialy,\ncan use all of the methods available there.  It also implements the\n<span data-xref=\"Gtk.TreeSortable\"/> interface so it can be sorted by the view.  Finally,\nit also implements the tree\n[drag and drop][gtk3-GtkTreeView-drag-and-drop]\ninterfaces.</p><h1>GtkTreeStore as GtkBuildable</h1><p>The GtkTreeStore implementation of the <span data-xref=\"Gtk.Buildable\"/> interface allows\nto specify the model columns with a &lt;columns&gt; element that may contain\nmultiple &lt;column&gt; elements, each specifying one model column. The \u201ctype\u201d\nattribute specifies the data type for the column.</p><p>An example of a UI Definition fragment for a tree store:\n|[\n&lt;object class=\"GtkTreeStore\"&gt;\n  &lt;columns&gt;\n    &lt;column type=\"gchararray\"/&gt;\n    &lt;column type=\"gchararray\"/&gt;\n    &lt;column type=\"gint\"/&gt;\n  &lt;/columns&gt;\n&lt;/object&gt;\n]|</p>",
            "kind": "class",
            "name": "TreeStore"
        },
        {
            "doc": "<p>Widget that displays any object that implements the <span data-xref=\"Gtk.TreeModel\"/> interface.</p><p>Please refer to the\n[tree widget conceptual overview][TreeWidget]\nfor an overview of all the objects and data types related\nto the tree widget and how they work together.</p><p>Several different coordinate systems are exposed in the GtkTreeView API.\nThese are:</p><p><img alt=\"\" src=\"tree-view-coordinates.png\" /></p><p>Coordinate systems in GtkTreeView API:</p><ul>\n<li>Widget coordinates: Coordinates relative to the widget (usually <code>widget-&amp;gt;window</code>).</li>\n</ul><ul>\n<li>Bin window coordinates: Coordinates relative to the window that GtkTreeView renders to.</li>\n</ul><ul>\n<li>Tree coordinates: Coordinates relative to the entire scrollable area of GtkTreeView. These\n  coordinates start at (0, 0) for row 0 of the tree.</li>\n</ul><p>Several functions are available for converting between the different\ncoordinate systems.  The most common translations are between widget and bin\nwindow coordinates and between bin window and tree coordinates. For the\nformer you can use <span data-xref=\"Gtk.TreeView.convert_widget_to_bin_window_coords\"/>\n(and vice versa), for the latter <span data-xref=\"Gtk.TreeView.convert_bin_window_to_tree_coords\"/>\n(and vice versa).</p><h1>GtkTreeView as GtkBuildable</h1><p>The GtkTreeView implementation of the GtkBuildable interface accepts\n<span data-xref=\"Gtk.TreeViewColumn\"/> objects as &lt;child&gt; elements and exposes the internal\n<span data-xref=\"Gtk.TreeSelection\"/> in UI definitions.</p><p>An example of a UI definition fragment with GtkTreeView:\n|[\n&lt;object class=\"GtkTreeView\" id=\"treeview\"&gt;\n  &lt;property name=\"model\"&gt;liststore1&lt;/property&gt;\n  &lt;child&gt;\n    &lt;object class=\"GtkTreeViewColumn\" id=\"test-column\"&gt;\n      &lt;property name=\"title\"&gt;Test&lt;/property&gt;\n      &lt;child&gt;\n        &lt;object class=\"GtkCellRendererText\" id=\"test-renderer\"/&gt;\n        &lt;attributes&gt;\n          &lt;attribute name=\"text\"&gt;1&lt;/attribute&gt;\n        &lt;/attributes&gt;\n      &lt;/child&gt;\n    &lt;/object&gt;\n  &lt;/child&gt;\n  &lt;child internal-child=\"selection\"&gt;\n    &lt;object class=\"GtkTreeSelection\" id=\"selection\"&gt;\n      &lt;signal name=\"changed\" handler=\"on_treeview_selection_changed\"/&gt;\n    &lt;/object&gt;\n  &lt;/child&gt;\n&lt;/object&gt;\n]|</p>",
            "kind": "class",
            "name": "TreeView"
        },
        {
            "doc": "<p>The GtkTreeViewColumn object represents a visible column in a <span data-xref=\"Gtk.TreeView\"/> widget.\nIt allows to set properties of the column header, and functions as a holding pen for\nthe cell renderers which determine how the data in the column is displayed.</p><p>Please refer to the [tree widget conceptual overview][TreeWidget]\nfor an overview of all the objects and data types related to the tree widget and how\nthey work together.</p>",
            "kind": "class",
            "name": "TreeViewColumn"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.UIManager\"/> constructs a user interface (menus and toolbars) from\none or more UI definitions, which reference actions from one or more\naction groups.</p><h1>UI Definitions # {#XML-UI}</h1><p>The UI definitions are specified in an XML format which can be\nroughly described by the following DTD.</p><p>&gt; Do not confuse the GtkUIManager UI Definitions described here with\n&gt; the similarly named [GtkBuilder UI Definitions][BUILDER-UI].</p><p>|[\n&lt;!ELEMENT ui          (menubar|toolbar|popup|accelerator)<em> &gt;\n&lt;!ELEMENT menubar     (menuitem|separator|placeholder|menu)</em> &gt;\n&lt;!ELEMENT menu        (menuitem|separator|placeholder|menu)<em> &gt;\n&lt;!ELEMENT popup       (menuitem|separator|placeholder|menu)</em> &gt;\n&lt;!ELEMENT toolbar     (toolitem|separator|placeholder)<em> &gt;\n&lt;!ELEMENT placeholder (menuitem|toolitem|separator|placeholder|menu)</em> &gt;\n&lt;!ELEMENT menuitem     EMPTY &gt;\n&lt;!ELEMENT toolitem     (menu?) &gt;\n&lt;!ELEMENT separator    EMPTY &gt;\n&lt;!ELEMENT accelerator  EMPTY &gt;\n&lt;!ATTLIST menubar      name                      #IMPLIED\n                       action                    #IMPLIED &gt;\n&lt;!ATTLIST toolbar      name                      #IMPLIED\n                       action                    #IMPLIED &gt;\n&lt;!ATTLIST popup        name                      #IMPLIED\n                       action                    #IMPLIED\n                       accelerators (true|false) #IMPLIED &gt;\n&lt;!ATTLIST placeholder  name                      #IMPLIED\n                       action                    #IMPLIED &gt;\n&lt;!ATTLIST separator    name                      #IMPLIED\n                       action                    #IMPLIED\n                       expand       (true|false) #IMPLIED &gt;\n&lt;!ATTLIST menu         name                      #IMPLIED\n                       action                    #REQUIRED\n                       position     (top|bot)    #IMPLIED &gt;\n&lt;!ATTLIST menuitem     name                      #IMPLIED\n                       action                    #REQUIRED\n                       position     (top|bot)    #IMPLIED\n                       always-show-image (true|false) #IMPLIED &gt;\n&lt;!ATTLIST toolitem     name                      #IMPLIED\n                       action                    #REQUIRED\n                       position     (top|bot)    #IMPLIED &gt;\n&lt;!ATTLIST accelerator  name                      #IMPLIED\n                       action                    #REQUIRED &gt;\n]|</p><p>There are some additional restrictions beyond those specified in the\nDTD, e.g. every toolitem must have a toolbar in its anchestry and\nevery menuitem must have a menubar or popup in its anchestry. Since\na <span data-xref=\"GLib.MarkupParser\">GLib.MarkupParser</span> is used to parse the UI description, it must not only\nbe valid XML, but valid markup.</p><p>If a name is not specified, it defaults to the action. If an action is\nnot specified either, the element name is used. The name and action\nattributes must not contain \u201c/\u201d characters after parsing (since that\nwould mess up path lookup) and must be usable as XML attributes when\nenclosed in doublequotes, thus they must not \u201c\"\u201d characters or references\nto the &amp;quot; entity.</p><h1>A UI definition</h1><p>|[\n&lt;ui&gt;\n  &lt;menubar&gt;\n    &lt;menu name=\"FileMenu\" action=\"FileMenuAction\"&gt;\n      &lt;menuitem name=\"New\" action=\"New2Action\" /&gt;\n      &lt;placeholder name=\"FileMenuAdditions\" /&gt;\n    &lt;/menu&gt;\n    &lt;menu name=\"JustifyMenu\" action=\"JustifyMenuAction\"&gt;\n      &lt;menuitem name=\"Left\" action=\"justify-left\"/&gt;\n      &lt;menuitem name=\"Centre\" action=\"justify-center\"/&gt;\n      &lt;menuitem name=\"Right\" action=\"justify-right\"/&gt;\n      &lt;menuitem name=\"Fill\" action=\"justify-fill\"/&gt;\n    &lt;/menu&gt;\n  &lt;/menubar&gt;\n  &lt;toolbar action=\"toolbar1\"&gt;\n    &lt;placeholder name=\"JustifyToolItems\"&gt;\n      &lt;separator/&gt;\n      &lt;toolitem name=\"Left\" action=\"justify-left\"/&gt;\n      &lt;toolitem name=\"Centre\" action=\"justify-center\"/&gt;\n      &lt;toolitem name=\"Right\" action=\"justify-right\"/&gt;\n      &lt;toolitem name=\"Fill\" action=\"justify-fill\"/&gt;\n      &lt;separator/&gt;\n    &lt;/placeholder&gt;\n  &lt;/toolbar&gt;\n&lt;/ui&gt;\n]|</p><p>The constructed widget hierarchy is very similar to the element tree\nof the XML, with the exception that placeholders are merged into their\nparents. The correspondence of XML elements to widgets should be\nalmost obvious:</p><ul>\n<li>menubar</li>\n</ul><p>a <span data-xref=\"Gtk.MenuBar\"/></p><ul>\n<li>toolbar</li>\n</ul><p>a <span data-xref=\"Gtk.Toolbar\"/></p><ul>\n<li>popup</li>\n</ul><p>a toplevel <span data-xref=\"Gtk.Menu\"/></p><ul>\n<li>menu</li>\n</ul><p>a <span data-xref=\"Gtk.Menu\"/> attached to a menuitem</p><ul>\n<li>menuitem</li>\n</ul><p>a <span data-xref=\"Gtk.MenuItem\"/> subclass, the exact type depends on the action</p><ul>\n<li>toolitem</li>\n</ul><p>a <span data-xref=\"Gtk.ToolItem\"/> subclass, the exact type depends on the\n   action. Note that toolitem elements may contain a menu element,\n   but only if their associated action specifies a\n   <span data-xref=\"Gtk.MenuToolButton\"/> as proxy.</p><ul>\n<li>separator</li>\n</ul><p>a <span data-xref=\"Gtk.SeparatorMenuItem\"/> or <span data-xref=\"Gtk.SeparatorToolItem\"/></p><ul>\n<li>accelerator</li>\n</ul><p>a keyboard accelerator</p><p>The \u201cposition\u201d attribute determines where a constructed widget is positioned\nwrt. to its siblings in the partially constructed tree. If it is\n\u201ctop\u201d, the widget is prepended, otherwise it is appended.</p><h1>UI Merging # {#UI-Merging}</h1><p>The most remarkable feature of <span data-xref=\"Gtk.UIManager\"/> is that it can overlay a set\nof menuitems and toolitems over another one, and demerge them later.</p><p>Merging is done based on the names of the XML elements. Each element is\nidentified by a path which consists of the names of its anchestors, separated\nby slashes. For example, the menuitem named \u201cLeft\u201d in the example above\nhas the path <code>/ui/menubar/JustifyMenu/Left</code> and the\ntoolitem with the same name has path\n<code>/ui/toolbar1/JustifyToolItems/Left</code>.</p><h1>Accelerators</h1><p>Every action has an accelerator path. Accelerators are installed together\nwith menuitem proxies, but they can also be explicitly added with\n&lt;accelerator&gt; elements in the UI definition. This makes it possible to\nhave accelerators for actions even if they have no visible proxies.</p><h1>Smart Separators # {#Smart-Separators}</h1><p>The separators created by <span data-xref=\"Gtk.UIManager\"/> are \u201csmart\u201d, i.e. they do not show up\nin the UI unless they end up between two visible menu or tool items. Separators\nwhich are located at the very beginning or end of the menu or toolbar\ncontaining them, or multiple separators next to each other, are hidden. This\nis a useful feature, since the merging of UI elements from multiple sources\ncan make it hard or impossible to determine in advance whether a separator\nwill end up in such an unfortunate position.</p><p>For separators in toolbars, you can set <code>expand=\"true\"</code> to\nturn them from a small, visible separator to an expanding, invisible one.\nToolitems following an expanding separator are effectively right-aligned.</p><h1>Empty Menus</h1><p>Submenus pose similar problems to separators inconnection with merging. It is\nimpossible to know in advance whether they will end up empty after merging.\n<span data-xref=\"Gtk.UIManager\"/> offers two ways to treat empty submenus:</p><ul>\n<li>make them disappear by hiding the menu item they\u2019re attached to</li>\n</ul><ul>\n<li>add an insensitive \u201cEmpty\u201d item</li>\n</ul><p>The behaviour is chosen based on the \u201chide_if_empty\u201d property of the action\nto which the submenu is associated.</p><h1>GtkUIManager as GtkBuildable # {<span data-xref=\"Gtk.UIManager\"/>-BUILDER-UI}</h1><p>The GtkUIManager implementation of the GtkBuildable interface accepts\nGtkActionGroup objects as &lt;child&gt; elements in UI definitions.</p><p>A GtkUIManager UI definition as described above can be embedded in\nan GtkUIManager &lt;object&gt; element in a GtkBuilder UI definition.</p><p>The widgets that are constructed by a GtkUIManager can be embedded in\nother parts of the constructed user interface with the help of the\n\u201cconstructor\u201d attribute. See the example below.</p><h2>An embedded GtkUIManager UI definition</h2><p>|[\n&lt;object class=\"GtkUIManager\" id=\"uiman\"&gt;\n  &lt;child&gt;\n    &lt;object class=\"GtkActionGroup\" id=\"actiongroup\"&gt;\n      &lt;child&gt;\n        &lt;object class=\"GtkAction\" id=\"file\"&gt;\n          &lt;property name=\"label\"&gt;_File&lt;/property&gt;\n        &lt;/object&gt;\n      &lt;/child&gt;\n    &lt;/object&gt;\n  &lt;/child&gt;\n  &lt;ui&gt;\n    &lt;menubar name=\"menubar1\"&gt;\n      &lt;menu action=\"file\"&gt;\n      &lt;/menu&gt;\n    &lt;/menubar&gt;\n  &lt;/ui&gt;\n&lt;/object&gt;\n&lt;object class=\"GtkWindow\" id=\"main-window\"&gt;\n  &lt;child&gt;\n    &lt;object class=\"GtkMenuBar\" id=\"menubar1\" constructor=\"uiman\"/&gt;\n  &lt;/child&gt;\n&lt;/object&gt;\n]|</p>",
            "kind": "class",
            "name": "UIManager"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.VBox\"/> is a container that organizes child widgets into a single column.</p><p>Use the <span data-xref=\"Gtk.Box\"/> packing interface to determine the arrangement,\nspacing, height, and alignment of <span data-xref=\"Gtk.VBox\"/> children.</p><p>All children are allocated the same width.</p><p>GtkVBox has been deprecated. You can use <span data-xref=\"Gtk.Box\"/> instead, which is a\nvery quick and easy\u00a0change. If you have derived your own classes from\nGtkVBox, you can simply change the inheritance to derive directly\nfrom <span data-xref=\"Gtk.Box\"/>, and set the <span data-xref=\"Gtk.Orientable-orientation\"/> property to\n<span data-xref=\"Gtk.Orientation\"/>.vertical in your instance init function, with a\ncall like:\n|[&lt;!-- language=\"C\" --&gt;\n  gtk_orientable_set_orientation (GTK_ORIENTABLE (object),\n                                  GTK_ORIENTATION_VERTICAL);\n]|\nIf you don\u2019t need first-child or last-child styling and want your code\nto be future-proof, the recommendation is to switch to <span data-xref=\"Gtk.Grid\"/> instead\nof nested boxes. For more information about migrating to <span data-xref=\"Gtk.Grid\"/>,\nsee [Migrating from other containers to GtkGrid][gtk-migrating-GtkGrid].</p>",
            "kind": "class",
            "name": "VBox"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "VButtonBox"
        },
        {
            "doc": "<p>The VPaned widget is a container widget with two\nchildren arranged vertically. The division between\nthe two panes is adjustable by the user by dragging\na handle. See <span data-xref=\"Gtk.Paned\"/> for details.</p><p>GtkVPaned has been deprecated, use <span data-xref=\"Gtk.Paned\"/> instead.</p>",
            "kind": "class",
            "name": "VPaned"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.VScale\"/> widget is used to allow the user to select a value using\na vertical slider. To create one, use <span data-xref=\"Gtk.HScale.new_with_range\"/>.</p><p>The position to show the current value, and the number of decimal places\nshown can be set using the parent <span data-xref=\"Gtk.Scale\"/> class\u2019s functions.</p><p>GtkVScale has been deprecated, use <span data-xref=\"Gtk.Scale\"/> instead.</p>",
            "kind": "class",
            "name": "VScale"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.VScrollbar\"/> widget is a widget arranged vertically creating a\nscrollbar. See <span data-xref=\"Gtk.Scrollbar\"/> for details on\nscrollbars. <span data-xref=\"Gtk.Adjustment\"/> pointers may be added to handle the\nadjustment of the scrollbar or it may be left <code>null</code> in which case one\nwill be created for you. See <span data-xref=\"Gtk.Scrollbar\"/> for a description of what the\nfields in an adjustment represent for a scrollbar.</p><p>GtkVScrollbar has been deprecated, use <span data-xref=\"Gtk.Scrollbar\"/> instead.</p>",
            "kind": "class",
            "name": "VScrollbar"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.VSeparator\"/> widget is a vertical separator, used to group the\nwidgets within a window. It displays a vertical line with a shadow to\nmake it appear sunken into the interface.</p><p>GtkVSeparator has been deprecated, use <span data-xref=\"Gtk.Separator\"/> instead.</p>",
            "kind": "class",
            "name": "VSeparator"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.Viewport\"/> widget acts as an adaptor class, implementing\nscrollability for child widgets that lack their own scrolling\ncapabilities. Use <span data-xref=\"Gtk.Viewport\"/> to scroll child widgets such as\n<span data-xref=\"Gtk.Grid\"/>, <span data-xref=\"Gtk.Box\"/>, and so on.</p><p>If a widget has native scrolling abilities, such as <span data-xref=\"Gtk.TextView\"/>,\n<span data-xref=\"Gtk.TreeView\"/> or <span data-xref=\"Gtk.IconView\"/>, it can be added to a <span data-xref=\"Gtk.ScrolledWindow\"/>\nwith <span data-xref=\"Gtk.Container.add\"/>. If a widget does not, you must first add the\nwidget to a <span data-xref=\"Gtk.Viewport\"/>, then add the viewport to the scrolled window.\n<span data-xref=\"Gtk.Container.add\"/> does this automatically if a child that does not\nimplement <span data-xref=\"Gtk.Scrollable\"/> is added to a <span data-xref=\"Gtk.ScrolledWindow\"/>, so you can\nignore the presence of the viewport.</p><p>The <span data-xref=\"Gtk.Viewport\"/> will start scrolling content only if allocated less\nthan the child widget\u2019s minimum size in a given orientation.</p>",
            "kind": "class",
            "name": "Viewport"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.VolumeButton\"/> is a subclass of <span data-xref=\"Gtk.ScaleButton\"/> that has\nbeen tailored for use as a volume control widget with suitable\nicons, tooltips and accessible labels.</p>",
            "kind": "class",
            "name": "VolumeButton"
        },
        {
            "doc": "<p>GtkWidget is the base class all widgets in GTK+ derive from. It manages the\nwidget lifecycle, states and style.</p><h1>Height-for-width Geometry Management # {#geometry-management}</h1><p>GTK+ uses a height-for-width (and width-for-height) geometry management\nsystem. Height-for-width means that a widget can change how much\nvertical space it needs, depending on the amount of horizontal space\nthat it is given (and similar for width-for-height). The most common\nexample is a label that reflows to fill up the available width, wraps\nto fewer lines, and therefore needs less height.</p><p>Height-for-width geometry management is implemented in GTK+ by way\nof five virtual methods:</p><ul>\n<li><span data-xref=\"Gtk.WidgetClass\"/>.get_request_mode()</li>\n<li><span data-xref=\"Gtk.WidgetClass\"/>.get_preferred_width()</li>\n<li><span data-xref=\"Gtk.WidgetClass\"/>.get_preferred_height()</li>\n<li><span data-xref=\"Gtk.WidgetClass\"/>.get_preferred_height_for_width()</li>\n<li><span data-xref=\"Gtk.WidgetClass\"/>.get_preferred_width_for_height()</li>\n<li><span data-xref=\"Gtk.WidgetClass\"/>.get_preferred_height_and_baseline_for_width()</li>\n</ul><p>There are some important things to keep in mind when implementing\nheight-for-width and when using it in container implementations.</p><p>The geometry management system will query a widget hierarchy in\nonly one orientation at a time. When widgets are initially queried\nfor their minimum sizes it is generally done in two initial passes\nin the <span data-xref=\"Gtk.SizeRequestMode\"/> chosen by the toplevel.</p><p>For example, when queried in the normal\n<span data-xref=\"Gtk.SizeRequestMode\"/>.height_for_width mode:\nFirst, the default minimum and natural width for each widget\nin the interface will be computed using <span data-xref=\"Gtk.Widget.get_preferred_width\"/>.\nBecause the preferred widths for each container depend on the preferred\nwidths of their children, this information propagates up the hierarchy,\nand finally a minimum and natural width is determined for the entire\ntoplevel. Next, the toplevel will use the minimum width to query for the\nminimum height contextual to that width using\n<span data-xref=\"Gtk.Widget.get_preferred_height_for_width\"/>, which will also be a highly\nrecursive operation. The minimum height for the minimum width is normally\nused to set the minimum size constraint on the toplevel\n(unless <span data-xref=\"Gtk.Window.set_geometry_hints\"/> is explicitly used instead).</p><p>After the toplevel window has initially requested its size in both\ndimensions it can go on to allocate itself a reasonable size (or a size\npreviously specified with <span data-xref=\"Gtk.Window.set_default_size\"/>). During the\nrecursive allocation process it\u2019s important to note that request cycles\nwill be recursively executed while container widgets allocate their children.\nEach container widget, once allocated a size, will go on to first share the\nspace in one orientation among its children and then request each child's\nheight for its target allocated width or its width for allocated height,\ndepending. In this way a <span data-xref=\"Gtk.Widget\"/> will typically be requested its size\na number of times before actually being allocated a size. The size a\nwidget is finally allocated can of course differ from the size it has\nrequested. For this reason, <span data-xref=\"Gtk.Widget\"/> caches a  small number of results\nto avoid re-querying for the same sizes in one allocation cycle.</p><p>See\n[GtkContainer\u2019s geometry management section][container-geometry-management]\nto learn more about how height-for-width allocations are performed\nby container widgets.</p><p>If a widget does move content around to intelligently use up the\nallocated size then it must support the request in both</p>\n<h1>GtkSizeRequestModes even if the widget in question only</h1>\n<p>trades sizes in a single orientation.</p><p>For instance, a <span data-xref=\"Gtk.Label\"/> that does height-for-width word wrapping\nwill not expect to have <span data-xref=\"Gtk.WidgetClass\"/>.get_preferred_height() called\nbecause that call is specific to a width-for-height request. In this\ncase the label must return the height required for its own minimum\npossible width. By following this rule any widget that handles\nheight-for-width or width-for-height requests will always be allocated\nat least enough space to fit its own content.</p><p>Here are some examples of how a <span data-xref=\"Gtk.SizeRequestMode\"/>.height_for_width widget\ngenerally deals with width-for-height requests, for <span data-xref=\"Gtk.WidgetClass\"/>.get_preferred_height()\nit will do:</p><p>|[&lt;!-- language=\"C\" --&gt;\nstatic void\nfoo_widget_get_preferred_height (GtkWidget <em>widget,\n                                 gint </em>min_height,\n                                 gint *nat_height)\n{\n   if (i_am_in_height_for_width_mode)\n     {\n       gint min_width;</p><pre><code>   GTK_WIDGET_GET_CLASS (widget)-&amp;gt;get_preferred_width (widget,\n                                                       &amp;amp;min_width,\n                                                       NULL);\n   GTK_WIDGET_GET_CLASS (widget)-&amp;gt;get_preferred_height_for_width\n                                                      (widget,\n                                                       min_width,\n                                                       min_height,\n                                                       nat_height);\n }\n</code></pre>\n<p>else\n     {\n        ... some widgets do both. For instance, if a GtkLabel is\n        rotated to 90 degrees it will return the minimum and\n        natural height for the rotated label here.\n     }\n}\n]|</p><p>And in <span data-xref=\"Gtk.WidgetClass\"/>.get_preferred_width_for_height() it will simply return\nthe minimum and natural width:\n|[&lt;!-- language=\"C\" --&gt;\nstatic void\nfoo_widget_get_preferred_width_for_height (GtkWidget <em>widget,\n                                           gint for_height,\n                                           gint </em>min_width,\n                                           gint *nat_width)\n{\n   if (i_am_in_height_for_width_mode)\n     {\n       GTK_WIDGET_GET_CLASS (widget)-&gt;get_preferred_width (widget,\n                                                           min_width,\n                                                           nat_width);\n     }\n   else\n     {\n        ... again if a widget is sometimes operating in\n        width-for-height mode (like a rotated GtkLabel) it can go\n        ahead and do its real width for height calculation here.\n     }\n}\n]|</p><p>Often a widget needs to get its own request during size request or\nallocation. For example, when computing height it may need to also\ncompute width. Or when deciding how to use an allocation, the widget\nmay need to know its natural size. In these cases, the widget should\nbe careful to call its virtual methods directly, like this:</p><p>|[&lt;!-- language=\"C\" --&gt;\nGTK_WIDGET_GET_CLASS(widget)-&gt;get_preferred_width (widget,\n                                                   &amp;min,\n                                                   &amp;natural);\n]|</p><p>It will not work to use the wrapper functions, such as\n<span data-xref=\"Gtk.Widget.get_preferred_width\"/> inside your own size request\nimplementation. These return a request adjusted by <span data-xref=\"Gtk.SizeGroup\"/>\nand by the <span data-xref=\"Gtk.WidgetClass\"/>.adjust_size_request() virtual method. If a\nwidget used the wrappers inside its virtual method implementations,\nthen the adjustments (such as widget margins) would be applied\ntwice. GTK+ therefore does not allow this and will warn if you try\nto do it.</p><p>Of course if you are getting the size request for\nanother widget, such as a child of a\ncontainer, you must use the wrapper APIs.\nOtherwise, you would not properly consider widget margins,\n<span data-xref=\"Gtk.SizeGroup\"/>, and so forth.</p><p>Since 3.10 Gtk+ also supports baseline vertical alignment of widgets. This\nmeans that widgets are positioned such that the typographical baseline of\nwidgets in the same row are aligned. This happens if a widget supports baselines,\nhas a vertical alignment of <span data-xref=\"Gtk.Align\"/>.baseline, and is inside a container\nthat supports baselines and has a natural \u201crow\u201d that it aligns to the baseline,\nor a baseline assigned to it by the grandparent.</p><p>Baseline alignment support for a widget is done by the <span data-xref=\"Gtk.WidgetClass\"/>.get_preferred_height_and_baseline_for_width()\nvirtual function. It allows you to report a baseline in combination with the\nminimum and natural height. If there is no baseline you can return -1 to indicate\nthis. The default implementation of this virtual function calls into the\n<span data-xref=\"Gtk.WidgetClass\"/>.get_preferred_height() and <span data-xref=\"Gtk.WidgetClass\"/>.get_preferred_height_for_width(),\nso if baselines are not supported it doesn\u2019t need to be implemented.</p><p>If a widget ends up baseline aligned it will be allocated all the space in the parent\nas if it was <span data-xref=\"Gtk.Align\"/>.fill, but the selected baseline can be found via <span data-xref=\"Gtk.Widget.get_allocated_baseline\"/>.\nIf this has a value other than -1 you need to align the widget such that the baseline\nappears at the position.</p><h1>Style Properties</h1><p><span data-xref=\"Gtk.Widget\"/> introduces \u201cstyle\nproperties\u201d - these are basically object properties that are stored\nnot on the object, but in the style object associated to the widget. Style\nproperties are set in [resource files][gtk3-Resource-Files].\nThis mechanism is used for configuring such things as the location of the\nscrollbar arrows through the theme, giving theme authors more control over the\nlook of applications without the need to write a theme engine in C.</p><p>Use <span data-xref=\"Gtk.WidgetClass.install_style_property\"/> to install style properties for\na widget class, <span data-xref=\"Gtk.WidgetClass.find_style_property\"/> or\n<span data-xref=\"Gtk.WidgetClass.list_style_properties\"/> to get information about existing\nstyle properties and <span data-xref=\"Gtk.Widget.style_get_property\"/>, <span data-xref=\"Gtk.Widget.style_get\"/> or\n<span data-xref=\"Gtk.Widget.style_get_valist\"/> to obtain the value of a style property.</p><h1>GtkWidget as GtkBuildable</h1><p>The GtkWidget implementation of the GtkBuildable interface supports a\ncustom &lt;accelerator&gt; element, which has attributes named \u201dkey\u201d, \u201dmodifiers\u201d\nand \u201dsignal\u201d and allows to specify accelerators.</p><p>An example of a UI definition fragment specifying an accelerator:\n|[\n&lt;object class=\"GtkButton\"&gt;\n  &lt;accelerator key=\"q\" modifiers=\"GDK_CONTROL_MASK\" signal=\"clicked\"/&gt;\n&lt;/object&gt;\n]|</p><p>In addition to accelerators, GtkWidget also support a custom &lt;accessible&gt;\nelement, which supports actions and relations. Properties on the accessible\nimplementation of an object can be set by accessing the internal child\n\u201caccessible\u201d of a <span data-xref=\"Gtk.Widget\"/>.</p><p>An example of a UI definition fragment specifying an accessible:\n|[\n&lt;object class=\"GtkButton\" id=\"label1\"/&gt;\n  &lt;property name=\"label\"&gt;I am a Label for a Button&lt;/property&gt;\n&lt;/object&gt;\n&lt;object class=\"GtkButton\" id=\"button1\"&gt;\n  &lt;accessibility&gt;\n    &lt;action action_name=\"click\" translatable=\"yes\"&gt;Click the button.&lt;/action&gt;\n    &lt;relation target=\"label1\" type=\"labelled-by\"/&gt;\n  &lt;/accessibility&gt;\n  &lt;child internal-child=\"accessible\"&gt;\n    &lt;object class=\"AtkObject\" id=\"a11y-button1\"&gt;\n      &lt;property name=\"accessible-name\"&gt;Clickable Button&lt;/property&gt;\n    &lt;/object&gt;\n  &lt;/child&gt;\n&lt;/object&gt;\n]|</p><p>Finally, GtkWidget allows style information such as style classes to\nbe associated with widgets, using the custom &lt;style&gt; element:\n|[\n&lt;object class=\"GtkButton\" id=\"button1\"&gt;\n  &lt;style&gt;\n    &lt;class name=\"my-special-button-class\"/&gt;\n    &lt;class name=\"dark-button\"/&gt;\n  &lt;/style&gt;\n&lt;/object&gt;\n]|</p><h1>Building composite widgets from template XML</h1><p>GtkWidget exposes some facilities to automate the proceedure\nof creating composite widgets using <span data-xref=\"Gtk.Builder\"/> interface description\nlanguage.</p><p>To create composite widgets with <span data-xref=\"Gtk.Builder\"/> XML, one must associate\nthe interface description with the widget class at class initialization\ntime using <span data-xref=\"Gtk.WidgetClass.set_template\"/>.</p><p>The interface description semantics expected in composite template descriptions\nis slightly different from regulare <span data-xref=\"Gtk.Builder\"/> XML.</p><p>Unlike regular interface descriptions, <span data-xref=\"Gtk.WidgetClass.set_template\"/> will\nexpect a &lt;template&gt; tag as a direct child of the toplevel &lt;interface&gt;\ntag. The &lt;template&gt; tag must specify the \u201cclass\u201d attribute which must be\nthe type name of the widget. Optionally, the \u201cparent\u201d attribute may be\nspecified to specify the direct parent type of the widget type, this is\nignored by the GtkBuilder but required for Glade to introspect what kind\nof properties and internal children exist for a given type when the actual\ntype does not exist.</p><p>The XML which is contained inside the &lt;template&gt; tag behaves as if it were\nadded to the &lt;object&gt; tag defining @widget itself. You may set properties\non @widget by inserting &lt;property&gt; tags into the &lt;template&gt; tag, and also\nadd &lt;child&gt; tags to add children and extend @widget in the normal way you\nwould with &lt;object&gt; tags.</p><p>Additionally, &lt;object&gt; tags can also be added before and after the initial\n&lt;template&gt; tag in the normal way, allowing one to define auxilary objects\nwhich might be referenced by other widgets declared as children of the\n&lt;template&gt; tag.</p><p>An example of a GtkBuilder Template Definition:\n|[\n&lt;interface&gt;\n  &lt;template class=\"FooWidget\" parent=\"GtkBox\"&gt;\n    &lt;property name=\"orientation\"&gt;GTK_ORIENTATION_HORIZONTAL&lt;/property&gt;\n    &lt;property name=\"spacing\"&gt;4&lt;/property&gt;\n    &lt;child&gt;\n      &lt;object class=\"GtkButton\" id=\"hello_button\"&gt;\n        &lt;property name=\"label\"&gt;Hello World&lt;/property&gt;\n      &lt;/object&gt;\n    &lt;/child&gt;\n    &lt;child&gt;\n      &lt;object class=\"GtkButton\" id=\"goodbye_button\"&gt;\n        &lt;property name=\"label\"&gt;Goodbye World&lt;/property&gt;\n      &lt;/object&gt;\n    &lt;/child&gt;\n  &lt;/template&gt;\n&lt;/interface&gt;\n]|</p>",
            "kind": "class",
            "name": "Widget"
        },
        {
            "doc": "<p>A GtkWindow is a toplevel window which can contain other widgets.\nWindows normally have decorations that are under the control\nof the windowing system and allow the user to manipulate the window\n(resize it, move it, close it,...).</p><p>GTK+ also allows windows to have a resize grip (a small area in the lower\nright or left corner) which can be clicked to resize the window. To\ncontrol whether a window has a resize grip, use\n<span data-xref=\"Gtk.Window.set_has_resize_grip\"/>.</p><h1>GtkWindow as GtkBuildable</h1><p>The GtkWindow implementation of the GtkBuildable interface supports a\ncustom &lt;accel-groups&gt; element, which supports any number of &lt;group&gt;\nelements representing the <span data-xref=\"Gtk.AccelGroup\"/> objects you want to add to\nyour window (synonymous with <span data-xref=\"Gtk.Window.add_accel_group\"/>.</p><p>An example of a UI definition fragment with accel groups:\n|[\n&lt;object class=\"GtkWindow\"&gt;\n  &lt;accel-groups&gt;\n    &lt;group name=\"accelgroup1\"/&gt;\n  &lt;/accel-groups&gt;\n&lt;/object&gt;</p><p>...</p><p>&lt;object class=\"GtkAccelGroup\" id=\"accelgroup1\"/&gt;\n]|</p><p>The GtkWindow implementation of the GtkBuildable interface supports\nsetting a child as the titlebar by specifying \u201ctitlebar\u201d as the \u201ctype\u201d\nattribute of a &lt;child&gt; element.</p>",
            "kind": "class",
            "name": "Window"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.WindowGroup\"/> objects are referenced by each window in the group,\nso once you have added all windows to a <span data-xref=\"Gtk.WindowGroup\"/>, you can drop\nthe initial reference to the window group with <span data-xref=\"GObject.Object.unref\">GObject.Object.prototype.unref</span>. If the\nwindows in the window group are subsequently destroyed, then they will\nbe removed from the window group and drop their references on the window\ngroup; when all window have been removed, the window group will be\nfreed.</p>",
            "kind": "class",
            "name": "WindowGroup"
        }
    ],
    "functions": [
        {
            "doc": "<p>Finds the first accelerator in any <span data-xref=\"Gtk.AccelGroup\"/> attached\nto <code>object</code> that matches <code>accel_key</code> and <code>accel_mods</code>, and\nactivates that accelerator.</p>",
            "kind": "function",
            "name": "accel_groups_activate"
        },
        {
            "doc": "<p>Gets a list of all accel groups which are attached to <code>object</code>.</p>",
            "kind": "function",
            "name": "accel_groups_from_object"
        },
        {
            "doc": "<p>Gets the value set by <span data-xref=\"Gtk.accelerator_set_default_mod_mask\"/>.</p>",
            "kind": "function",
            "name": "accelerator_get_default_mod_mask"
        },
        {
            "doc": "<p>Converts an accelerator keyval and modifier mask into a string\nwhich can be used to represent the accelerator to the user.</p>",
            "kind": "function",
            "name": "accelerator_get_label"
        },
        {
            "doc": "<p>Converts an accelerator keyval and modifier mask\ninto a (possibly translated) string that can be displayed to\na user, similarly to <span data-xref=\"Gtk.accelerator_get_label\"/>, but handling\nkeycodes.</p><p>This is only useful for system-level components, applications\nshould use <span data-xref=\"Gtk.accelerator_parse\"/> instead.</p>",
            "kind": "function",
            "name": "accelerator_get_label_with_keycode"
        },
        {
            "doc": "<p>Converts an accelerator keyval and modifier mask into a string\nparseable by <span data-xref=\"Gtk.accelerator_parse\"/>. For example, if you pass in</p>\n<h1>GDK_KEY_q and #GDK_CONTROL_MASK, this function returns \u201c&lt;Control&gt;q\u201d.</h1><p>If you need to display accelerators in the user interface,\nsee <span data-xref=\"Gtk.accelerator_get_label\"/>.</p>",
            "kind": "function",
            "name": "accelerator_name"
        },
        {
            "doc": "<p>Converts an accelerator keyval and modifier mask\ninto a string parseable by <span data-xref=\"Gtk.accelerator_parse_with_keycode\"/>,\nsimilarly to <span data-xref=\"Gtk.accelerator_name\"/> but handling keycodes.\nThis is only useful for system-level components, applications\nshould use <span data-xref=\"Gtk.accelerator_parse\"/> instead.</p>",
            "kind": "function",
            "name": "accelerator_name_with_keycode"
        },
        {
            "doc": "<p>Parses a string representing an accelerator. The format looks like\n\u201c&lt;Control&gt;a\u201d or \u201c&lt;Shift&gt;&lt;Alt&gt;F1\u201d or \u201c&lt;Release&gt;z\u201d (the last one is\nfor key release).</p><p>The parser is fairly liberal and allows lower or upper case, and also\nabbreviations such as \u201c&lt;Ctl&gt;\u201d and \u201c&lt;Ctrl&gt;\u201d. Key names are parsed using\n<span data-xref=\"Gdk.keyval_from_name\">Gdk.keyval_from_name</span>. For character keys the name is not the symbol,\nbut the lowercase name, e.g. one would use \u201c&lt;Ctrl&gt;minus\u201d instead of\n\u201c&lt;Ctrl&gt;-\u201d.</p><p>If the parse fails, <code>accelerator_key</code> and <code>accelerator_mods</code> will\nbe set to 0 (zero).</p>",
            "kind": "function",
            "name": "accelerator_parse"
        },
        {
            "doc": "<p>Parses a string representing an accelerator, similarly to\n<span data-xref=\"Gtk.accelerator_parse\"/> but handles keycodes as well. This is only\nuseful for system-level components, applications should use\n<span data-xref=\"Gtk.accelerator_parse\"/> instead.</p><p>If <code>accelerator_codes</code> is given and the result stored in it is non-<code>null</code>,\nthe result must be freed with <span data-xref=\"GLib.free\">GLib.free</span>.</p><p>If a keycode is present in the accelerator and no <code>accelerator_codes</code>\nis given, the parse will fail.</p><p>If the parse fails, <code>accelerator_key</code>, <code>accelerator_mods</code> and\n<code>accelerator_codes</code> will be set to 0 (zero).</p>",
            "kind": "function",
            "name": "accelerator_parse_with_keycode"
        },
        {
            "doc": "<p>Sets the modifiers that will be considered significant for keyboard\naccelerators. The default mod mask is #GDK_CONTROL_MASK |</p>\n<h1>GDK_SHIFT_MASK | #GDK_MOD1_MASK | #GDK_SUPER_MASK |</h1>\n<h1>GDK_HYPER_MASK | #GDK_META_MASK, that is, Control, Shift, Alt,</h1>\n<p>Super, Hyper and Meta. Other modifiers will by default be ignored\nby <span data-xref=\"Gtk.AccelGroup\"/>.\nYou must include at least the three modifiers Control, Shift\nand Alt in any value you pass to this function.</p><p>The default mod mask should be changed on application startup,\nbefore using any accelerator groups.</p>",
            "kind": "function",
            "name": "accelerator_set_default_mod_mask"
        },
        {
            "doc": "<p>Determines whether a given keyval and modifier mask constitute\na valid keyboard accelerator. For example, the #GDK_KEY_a keyval\nplus #GDK_CONTROL_MASK is valid - this is a \u201cCtrl+a\u201d accelerator.\nBut, you can't, for instance, use the #GDK_KEY_Control_L keyval\nas an accelerator.</p>",
            "kind": "function",
            "name": "accelerator_valid"
        },
        {
            "doc": "<p>Returns <code>true</code> if dialogs are expected to use an alternative\nbutton order on the screen <code>screen</code>. See\n<span data-xref=\"Gtk.Dialog.set_alternative_button_order\"/> for more details\nabout alternative button order.</p><p>If you need to use this function, you should probably connect\nto the ::notify:gtk-alternative-button-order signal on the\n<span data-xref=\"Gtk.Settings\"/> object associated to <code>screen</code>, in order to be\nnotified if the button order setting changes.</p>",
            "kind": "function",
            "name": "alternative_dialog_button_order"
        },
        {
            "doc": "<p>Parses a signal description from <code>signal_desc</code> and incorporates\nit into <code>binding_set</code>.</p><p>Signal descriptions may either bind a key combination to\none or more signals:\n|[\n  bind \"key\" {\n    \"signalname\" (param, ...)\n    ...\n  }\n]|</p><p>Or they may also unbind a key combination:\n|[\n  unbind \"key\"\n]|</p><p>Key combinations must be in a format that can be parsed by\n<span data-xref=\"Gtk.accelerator_parse\"/>.</p>",
            "kind": "function",
            "name": "binding_entry_add_signal_from_string"
        },
        {
            "doc": "<p>Override or install a new key binding for <code>keyval</code> with <code>modifiers</code> on\n<code>binding_set</code>.</p>",
            "kind": "function",
            "name": "binding_entry_add_signall"
        },
        {
            "doc": "<p>Remove a binding previously installed via\n<span data-xref=\"Gtk.BindingEntry.add_signal\"/> on <code>binding_set</code>.</p>",
            "kind": "function",
            "name": "binding_entry_remove"
        },
        {
            "doc": "<p>Install a binding on <code>binding_set</code> which causes key lookups\nto be aborted, to prevent bindings from lower priority sets\nto be activated.</p>",
            "kind": "function",
            "name": "binding_entry_skip"
        },
        {
            "doc": "<p>This function returns the binding set named after the type name of\nthe passed in class structure. New binding sets are created on\ndemand by this function.</p>",
            "kind": "function",
            "name": "binding_set_by_class"
        },
        {
            "doc": "<p>Find a binding set by its globally unique name.</p><p>The <code>set_name</code> can either be a name used for <span data-xref=\"Gtk.binding_set_new\"/>\nor the type name of a class used in <span data-xref=\"Gtk.binding_set_by_class\"/>.</p>",
            "kind": "function",
            "name": "binding_set_find"
        },
        {
            "doc": "<p>GTK+ maintains a global list of binding sets. Each binding set has\na unique name which needs to be specified upon creation.</p>",
            "kind": "function",
            "name": "binding_set_new"
        },
        {
            "doc": "<p>Find a key binding matching <code>keyval</code> and <code>modifiers</code> and activate the\nbinding on <code>object</code>.</p>",
            "kind": "function",
            "name": "bindings_activate"
        },
        {
            "doc": "<p>Looks up key bindings for <code>object</code> to find one matching\n<code>event</code>, and if one was found, activate it.</p>",
            "kind": "function",
            "name": "bindings_activate_event"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "builder_error_quark"
        },
        {
            "doc": "<p>This function is supposed to be called in <span data-xref=\"Gtk.Widget-draw\"/>\nimplementations for widgets that support multiple windows.\n<code>cr</code> must be untransformed from invoking of the draw function.\nThis function will return <code>true</code> if the contents of the given\n<code>window</code> are supposed to be drawn and <code>false</code> otherwise. Note\nthat when the drawing was not initiated by the windowing\nsystem this function will return <code>true</code> for all windows, so\nyou need to draw the bottommost window first. Also, do not\nuse \u201celse if\u201d statements to check which window should be drawn.</p>",
            "kind": "function",
            "name": "cairo_should_draw_window"
        },
        {
            "doc": "<p>Transforms the given cairo context <code>cr</code> that from <code>widget</code>-relative\ncoordinates to <code>window</code>-relative coordinates.\nIf the <code>widget</code>\u2019s window is not an ancestor of <code>window</code>, no\nmodification will be applied.</p><p>This is the inverse to the transformation GTK applies when\npreparing an expose event to be emitted with the <span data-xref=\"Gtk.Widget-draw\"/>\nsignal. It is intended to help porting multiwindow widgets from\nGTK+ 2 to the rendering architecture of GTK+ 3.</p>",
            "kind": "function",
            "name": "cairo_transform_to_window"
        },
        {
            "doc": "<p>Checks that the GTK+ library in use is compatible with the\ngiven version. Generally you would pass in the constants</p>\n<h1>GTK_MAJOR_VERSION, #GTK_MINOR_VERSION, #GTK_MICRO_VERSION</h1>\n<p>as the three arguments to this function; that produces\na check that the library in use is compatible with\nthe version of GTK+ the application or module was compiled\nagainst.</p><p>Compatibility is defined by two things: first the version\nof the running library is newer than the version\n<code>required_major</code>.required_minor.<code>required_micro</code>. Second\nthe running library must be binary compatible with the\nversion <code>required_major</code>.required_minor.<code>required_micro</code>\n(same major version.)</p><p>This function is primarily for GTK+ modules; the module\ncan call this function to check that it wasn\u2019t loaded\ninto an incompatible version of GTK+. However, such a\ncheck isn\u2019t completely reliable, since the module may be\nlinked against an old version of GTK+ and calling the\nold version of <span data-xref=\"Gtk.check_version\"/>, but still get loaded\ninto an application using a newer version of GTK+.</p>",
            "kind": "function",
            "name": "check_version"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "css_provider_error_quark"
        },
        {
            "doc": "<p>Adds a GTK+ grab on <code>device</code>, so all the events on <code>device</code> and its\nassociated pointer or keyboard (if any) are delivered to <code>widget</code>.\nIf the <code>block_others</code> parameter is <code>true</code>, any other devices will be\nunable to interact with <code>widget</code> during the grab.</p>",
            "kind": "function",
            "name": "device_grab_add"
        },
        {
            "doc": "<p>Removes a device grab from the given widget.</p><p>You have to pair calls to <span data-xref=\"Gtk.device_grab_add\"/> and\n<span data-xref=\"Gtk.device_grab_remove\"/>.</p>",
            "kind": "function",
            "name": "device_grab_remove"
        },
        {
            "doc": "<p>Prevents <span data-xref=\"Gtk.init\"/>, <span data-xref=\"Gtk.init_check\"/>, <span data-xref=\"Gtk.init_with_args\"/> and\n<span data-xref=\"Gtk.parse_args\"/> from automatically\ncalling <code>setlocale (LC_ALL, \"\")</code>. You would\nwant to use this function if you wanted to set the locale for\nyour program to something other than the user\u2019s locale, or if\nyou wanted to set different values for different locale categories.</p><p>Most programs should not need to call this function.</p>",
            "kind": "function",
            "name": "disable_setlocale"
        },
        {
            "doc": "<p>Distributes <code>extra_space</code> to child <code>sizes</code> by bringing smaller\nchildren up to natural size first.</p><p>The remaining space will be added to the @minimum_size member of the\nGtkRequestedSize struct. If all sizes reach their natural size then\nthe remaining space is returned.</p>",
            "kind": "function",
            "name": "distribute_natural_allocation"
        },
        {
            "doc": "<p>Informs the drag source that the drop is finished, and\nthat the data of the drag will no longer be required.</p>",
            "kind": "function",
            "name": "drag_finish"
        },
        {
            "doc": "<p>Determines the source widget for a drag.</p>",
            "kind": "function",
            "name": "drag_get_source_widget"
        },
        {
            "doc": "<p>Sets the icon for a particular drag to the default\nicon.</p>",
            "kind": "function",
            "name": "drag_set_icon_default"
        },
        {
            "doc": "<p>Sets the icon for a given drag from the given <code>icon</code>.  See the\ndocumentation for <span data-xref=\"Gtk.drag_set_icon_name\"/> for more details about\nusing icons in drag and drop.</p>",
            "kind": "function",
            "name": "drag_set_icon_gicon"
        },
        {
            "doc": "<p>Sets the icon for a given drag from a named themed icon. See\nthe docs for <span data-xref=\"Gtk.IconTheme\"/> for more details. Note that the\nsize of the icon depends on the icon theme (the icon is\nloaded at the symbolic size #GTK_ICON_SIZE_DND), thus\n<code>hot_x</code> and <code>hot_y</code> have to be used with care.</p>",
            "kind": "function",
            "name": "drag_set_icon_name"
        },
        {
            "doc": "<p>Sets <code>pixbuf</code> as the icon for a given drag.</p>",
            "kind": "function",
            "name": "drag_set_icon_pixbuf"
        },
        {
            "doc": "<p>Sets the icon for a given drag from a stock ID.</p>",
            "kind": "function",
            "name": "drag_set_icon_stock"
        },
        {
            "doc": "<p>Sets <code>surface</code> as the icon for a given drag. GTK+ retains\nreferences for the arguments, and will release them when\nthey are no longer needed.</p><p>To position the surface relative to the mouse, use\ncairo_surface_set_device_offset() on <code>surface</code>. The mouse\ncursor will be positioned at the (0,0) coordinate of the\nsurface.</p>",
            "kind": "function",
            "name": "drag_set_icon_surface"
        },
        {
            "doc": "<p>Changes the icon for a widget to a given widget. GTK+\nwill not destroy the icon, so if you don\u2019t want\nit to persist, you should connect to the \u201cdrag-end\u201d\nsignal and destroy it yourself.</p>",
            "kind": "function",
            "name": "drag_set_icon_widget"
        },
        {
            "doc": "<p>Draws a text caret on <code>cr</code> at <code>location</code>. This is not a style function\nbut merely a convenience function for drawing the standard cursor shape.</p>",
            "kind": "function",
            "name": "draw_insertion_cursor"
        },
        {
            "doc": "<p>Checks if any events are pending.</p><p>This can be used to update the UI and invoke timeouts etc.\nwhile doing some time intensive computation.</p><h2>Updating the UI during a long computation</h2><p>|[&lt;!-- language=\"C\" --&gt;\n // computation going on...</p><p>while (gtk_events_pending ())\n   gtk_main_iteration ();</p><p>// ...computation continued\n]|</p>",
            "kind": "function",
            "name": "events_pending"
        },
        {
            "doc": "<p>Analogical to <span data-xref=\"Gtk.true\"/>, this function does nothing\nbut always returns <code>false</code>.</p>",
            "kind": "function",
            "name": "false"
        },
        {
            "doc": "<p>Registers an error quark for <span data-xref=\"Gtk.FileChooser\"/> if necessary.</p>",
            "kind": "function",
            "name": "file_chooser_error_quark"
        },
        {
            "doc": "<p>Returns the binary age as passed to <code>libtool</code>\nwhen building the GTK+ library the process is running against.\nIf <code>libtool</code> means nothing to you, don't\nworry about it.</p>",
            "kind": "function",
            "name": "get_binary_age"
        },
        {
            "doc": "<p>Obtains a copy of the event currently being processed by GTK+.</p><p>For example, if you are handling a <span data-xref=\"Gtk.Button-clicked\"/> signal,\nthe current event will be the <span data-xref=\"Gdk.EventButton\">Gdk.EventButton</span> that triggered\nthe ::clicked signal.</p>",
            "kind": "function",
            "name": "get_current_event"
        },
        {
            "doc": "<p>If there is a current event and it has a device, return that\ndevice, otherwise return <code>null</code>.</p>",
            "kind": "function",
            "name": "get_current_event_device"
        },
        {
            "doc": "<p>If there is a current event and it has a state field, place\nthat state field in <code>state</code> and return <code>true</code>, otherwise return\n<code>false</code>.</p>",
            "kind": "function",
            "name": "get_current_event_state"
        },
        {
            "doc": "<p>If there is a current event and it has a timestamp,\nreturn that timestamp, otherwise return %GDK_CURRENT_TIME.</p>",
            "kind": "function",
            "name": "get_current_event_time"
        },
        {
            "doc": "<p>Returns the GTK+ debug flags.</p><p>This function is intended for GTK+ modules that want\nto adjust their debug output based on GTK+ debug flags.</p>",
            "kind": "function",
            "name": "get_debug_flags"
        },
        {
            "doc": "<p>Returns the <span data-xref=\"Pango.Language\">Pango.Language</span> for the default language currently in\neffect. (Note that this can change over the life of an\napplication.) The default language is derived from the current\nlocale. It determines, for example, whether GTK+ uses the\nright-to-left or left-to-right text direction.</p><p>This function is equivalent to <span data-xref=\"Pango.language_get_default\">Pango.language_get_default</span>.\nSee that function for details.</p>",
            "kind": "function",
            "name": "get_default_language"
        },
        {
            "doc": "<p>If <code>event</code> is <code>null</code> or the event was not associated with any widget,\nreturns <code>null</code>, otherwise returns the widget that received the event\noriginally.</p>",
            "kind": "function",
            "name": "get_event_widget"
        },
        {
            "doc": "<p>Returns the interface age as passed to <code>libtool</code>\nwhen building the GTK+ library the process is running against.\nIf <code>libtool</code> means nothing to you, don't\nworry about it.</p>",
            "kind": "function",
            "name": "get_interface_age"
        },
        {
            "doc": "<p>Get the direction of the current locale. This is the expected\nreading direction for text and UI.</p><p>This function depends on the current locale being set with\nsetlocale() and will default to setting the <span data-xref=\"Gtk.TextDirection\"/>.ltr\ndirection otherwise. <span data-xref=\"Gtk.TextDirection\"/>.none will never be returned.</p><p>GTK+ sets the default text direction according to the locale\nduring <span data-xref=\"Gtk.init\"/>, and you should normally use\n<span data-xref=\"Gtk.Widget.get_direction\"/> or <span data-xref=\"Gtk.Widget.get_default_direction\"/>\nto obtain the current direcion.</p><p>This function is only needed rare cases when the locale is\nchanged after GTK+ has already been initialized. In this case,\nyou can use it to update the default text direction as follows:</p><p>|[&lt;!-- language=\"C\" --&gt;\nsetlocale (LC_ALL, new_locale);\ndirection = gtk_get_locale_direction ();\ngtk_widget_set_default_direction (direction);\n]|</p>",
            "kind": "function",
            "name": "get_locale_direction"
        },
        {
            "doc": "<p>Returns the major version number of the GTK+ library.\n(e.g. in GTK+ version 3.1.5 this is 3.)</p><p>This function is in the library, so it represents the GTK+ library\nyour code is running against. Contrast with the #GTK_MAJOR_VERSION\nmacro, which represents the major version of the GTK+ headers you\nhave included when compiling your code.</p>",
            "kind": "function",
            "name": "get_major_version"
        },
        {
            "doc": "<p>Returns the micro version number of the GTK+ library.\n(e.g. in GTK+ version 3.1.5 this is 5.)</p><p>This function is in the library, so it represents the GTK+ library\nyour code is are running against. Contrast with the</p>\n<h1>GTK_MICRO_VERSION macro, which represents the micro version of the</h1>\n<p>GTK+ headers you have included when compiling your code.</p>",
            "kind": "function",
            "name": "get_micro_version"
        },
        {
            "doc": "<p>Returns the minor version number of the GTK+ library.\n(e.g. in GTK+ version 3.1.5 this is 1.)</p><p>This function is in the library, so it represents the GTK+ library\nyour code is are running against. Contrast with the</p>\n<h1>GTK_MINOR_VERSION macro, which represents the minor version of the</h1>\n<p>GTK+ headers you have included when compiling your code.</p>",
            "kind": "function",
            "name": "get_minor_version"
        },
        {
            "doc": "<p>Returns a <span data-xref=\"GLib.OptionGroup\">GLib.OptionGroup</span> for the commandline arguments recognized\nby GTK+ and GDK.</p><p>You should add this group to your <span data-xref=\"GLib.OptionContext\">GLib.OptionContext</span>\nwith <span data-xref=\"GLib.OptionContext.add_group\">GLib.OptionContext.prototype.add_group</span>, if you are using\n<span data-xref=\"GLib.OptionContext.parse\">GLib.OptionContext.prototype.parse</span> to parse your commandline arguments.</p>",
            "kind": "function",
            "name": "get_option_group"
        },
        {
            "doc": "<p>Queries the current grab of the default window group.</p>",
            "kind": "function",
            "name": "grab_get_current"
        },
        {
            "doc": "<p>Looks up the icon size associated with <code>name</code>.</p>",
            "kind": "function",
            "name": "icon_size_from_name"
        },
        {
            "doc": "<p>Gets the canonical name of the given icon size. The returned string\nis statically allocated and should not be freed.</p>",
            "kind": "function",
            "name": "icon_size_get_name"
        },
        {
            "doc": "<p>Obtains the pixel size of a semantic icon size <code>size</code>:</p>\n<h1>GTK_ICON_SIZE_MENU, #GTK_ICON_SIZE_BUTTON, etc.  This function</h1>\n<p>isn\u2019t normally needed, <span data-xref=\"Gtk.IconTheme.load_icon\"/> is the usual\nway to get an icon for rendering, then just look at the size of\nthe rendered pixbuf. The rendered pixbuf may not even correspond to\nthe width/height returned by <span data-xref=\"Gtk.icon_size_lookup\"/>, because themes\nare free to render the pixbuf however they like, including changing\nthe usual size.</p>",
            "kind": "function",
            "name": "icon_size_lookup"
        },
        {
            "doc": "<p>Obtains the pixel size of a semantic icon size, possibly\nmodified by user preferences for a particular\n<span data-xref=\"Gtk.Settings\"/>. Normally <code>size</code> would be</p>\n<h1>GTK_ICON_SIZE_MENU, #GTK_ICON_SIZE_BUTTON, etc.  This function</h1>\n<p>isn\u2019t normally needed, <span data-xref=\"Gtk.Widget.render_icon_pixbuf\"/> is the usual\nway to get an icon for rendering, then just look at the size of\nthe rendered pixbuf. The rendered pixbuf may not even correspond to\nthe width/height returned by <span data-xref=\"Gtk.icon_size_lookup\"/>, because themes\nare free to render the pixbuf however they like, including changing\nthe usual size.</p>",
            "kind": "function",
            "name": "icon_size_lookup_for_settings"
        },
        {
            "doc": "<p>Registers a new icon size, along the same lines as #GTK_ICON_SIZE_MENU,\netc. Returns the integer value for the size.</p>",
            "kind": "function",
            "name": "icon_size_register"
        },
        {
            "doc": "<p>Registers <code>alias</code> as another name for <code>target</code>.\nSo calling <span data-xref=\"Gtk.icon_size_from_name\"/> with <code>alias</code> as argument\nwill return <code>target</code>.</p>",
            "kind": "function",
            "name": "icon_size_register_alias"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "icon_theme_error_quark"
        },
        {
            "doc": "<p>Call this function before using any other GTK+ functions in your GUI\napplications.  It will initialize everything needed to operate the\ntoolkit and parses some standard command line options.</p><p>Although you are expected to pass the <code>argc</code>, <code>argv</code> parameters from main() to\nthis function, it is possible to pass <code>null</code> if <code>argv</code> is not available or\ncommandline handling is not required.</p><p><code>argc</code> and <code>argv</code> are adjusted accordingly so your own code will\nnever see those standard arguments.</p><p>Note that there are some alternative ways to initialize GTK+:\nif you are calling <span data-xref=\"Gtk.parse_args\"/>, <span data-xref=\"Gtk.init_check\"/>,\n<span data-xref=\"Gtk.init_with_args\"/> or <span data-xref=\"GLib.OptionContext.parse\">GLib.OptionContext.prototype.parse</span> with\nthe option group returned by <span data-xref=\"Gtk.get_option_group\"/>,\nyou don\u2019t have to call <span data-xref=\"Gtk.init\"/>.</p><p>This function will terminate your program if it was unable to\ninitialize the windowing system for some reason. If you want\nyour program to fall back to a textual interface you want to\ncall <span data-xref=\"Gtk.init_check\"/> instead.</p><p>Since 2.18, GTK+ calls <code>signal (SIGPIPE, SIG_IGN)</code>\nduring initialization, to ignore SIGPIPE signals, since these are\nalmost never wanted in graphical applications. If you do need to\nhandle SIGPIPE for some reason, reset the handler after <span data-xref=\"Gtk.init\"/>,\nbut notice that other libraries (e.g. libdbus or gvfs) might do\nsimilar things.</p>",
            "kind": "function",
            "name": "init"
        },
        {
            "doc": "<p>This function does the same work as <span data-xref=\"Gtk.init\"/> with only a single\nchange: It does not terminate the program if the windowing system\ncan\u2019t be initialized. Instead it returns <code>false</code> on failure.</p><p>This way the application can fall back to some other means of\ncommunication with the user - for example a curses or command line\ninterface.</p>",
            "kind": "function",
            "name": "init_check"
        },
        {
            "doc": "<p>This function does the same work as <span data-xref=\"Gtk.init_check\"/>.\nAdditionally, it allows you to add your own commandline options,\nand it automatically generates nicely formatted\n<code>--help</code> output. Note that your program will\nbe terminated after writing out the help output.</p>",
            "kind": "function",
            "name": "init_with_args"
        },
        {
            "doc": "<p>Installs a key snooper function, which will get called on all\nkey events before delivering them normally.</p>",
            "kind": "function",
            "name": "key_snooper_install"
        },
        {
            "doc": "<p>Removes the key snooper function with the given id.</p>",
            "kind": "function",
            "name": "key_snooper_remove"
        },
        {
            "doc": "<p>Runs the main loop until <span data-xref=\"Gtk.main_quit\"/> is called.</p><p>You can nest calls to <span data-xref=\"Gtk.main\"/>. In that case <span data-xref=\"Gtk.main_quit\"/>\nwill make the innermost invocation of the main loop return.</p>",
            "kind": "function",
            "name": "main"
        },
        {
            "doc": "<p>Processes a single GDK event.</p><p>This is public only to allow filtering of events between GDK and GTK+.\nYou will not usually need to call this function directly.</p><p>While you should not call this function directly, you might want to\nknow how exactly events are handled. So here is what this function\ndoes with the event:</p><ol>\n<li>Compress enter/leave notify events. If the event passed build an\n   enter/leave pair together with the next event (peeked from GDK), both\n   events are thrown away. This is to avoid a backlog of (de-)highlighting\n   widgets crossed by the pointer.</li>\n</ol><ol>\n<li>Find the widget which got the event. If the widget can\u2019t be determined\n   the event is thrown away unless it belongs to a INCR transaction.</li>\n</ol><ol>\n<li>Then the event is pushed onto a stack so you can query the currently\n   handled event with <span data-xref=\"Gtk.get_current_event\"/>.</li>\n</ol><ol>\n<li>The event is sent to a widget. If a grab is active all events for widgets\n   that are not in the contained in the grab widget are sent to the latter\n   with a few exceptions:</li>\n<li>Deletion and destruction events are still sent to the event widget for\n     obvious reasons.</li>\n<li>Events which directly relate to the visual representation of the event\n     widget.</li>\n<li>Leave events are delivered to the event widget if there was an enter\n     event delivered to it before without the paired leave event.</li>\n<li>Drag events are not redirected because it is unclear what the semantics\n     of that would be.\n   Another point of interest might be that all key events are first passed\n   through the key snooper functions if there are any. Read the description\n   of <span data-xref=\"Gtk.key_snooper_install\"/> if you need this feature.</li>\n</ol><ol>\n<li>After finishing the delivery the event is popped from the event stack.</li>\n</ol>",
            "kind": "function",
            "name": "main_do_event"
        },
        {
            "doc": "<p>Runs a single iteration of the mainloop.</p><p>If no events are waiting to be processed GTK+ will block\nuntil the next event is noticed. If you don\u2019t want to block\nlook at <span data-xref=\"Gtk.main_iteration_do\"/> or check if any events are\npending with <span data-xref=\"Gtk.events_pending\"/> first.</p>",
            "kind": "function",
            "name": "main_iteration"
        },
        {
            "doc": "<p>Runs a single iteration of the mainloop.\nIf no events are available either return or block depending on\nthe value of <code>blocking</code>.</p>",
            "kind": "function",
            "name": "main_iteration_do"
        },
        {
            "doc": "<p>Asks for the current nesting level of the main loop.</p>",
            "kind": "function",
            "name": "main_level"
        },
        {
            "doc": "<p>Makes the innermost invocation of the main loop return\nwhen it regains control.</p>",
            "kind": "function",
            "name": "main_quit"
        },
        {
            "doc": "<p>Draws an arrow in the given rectangle on <code>cr</code> using the given\nparameters. <code>arrow_type</code> determines the direction of the arrow.</p>",
            "kind": "function",
            "name": "paint_arrow"
        },
        {
            "doc": "<p>Draws a box on <code>cr</code> with the given parameters.</p>",
            "kind": "function",
            "name": "paint_box"
        },
        {
            "doc": "<p>Draws a box in <code>cr</code> using the given style and state and shadow type,\nleaving a gap in one side.</p>",
            "kind": "function",
            "name": "paint_box_gap"
        },
        {
            "doc": "<p>Draws a check button indicator in the given rectangle on <code>cr</code> with\nthe given parameters.</p>",
            "kind": "function",
            "name": "paint_check"
        },
        {
            "doc": "<p>Draws a diamond in the given rectangle on @window using the given\nparameters.</p>",
            "kind": "function",
            "name": "paint_diamond"
        },
        {
            "doc": "<p>Draws an expander as used in <span data-xref=\"Gtk.TreeView\"/>. <code>x</code> and <code>y</code> specify the\ncenter the expander. The size of the expander is determined by the\n\u201cexpander-size\u201d style property of <code>widget</code>.  (If widget is not\nspecified or doesn\u2019t have an \u201cexpander-size\u201d property, an\nunspecified default size will be used, since the caller doesn't\nhave sufficient information to position the expander, this is\nlikely not useful.) The expander is expander_size pixels tall\nin the collapsed position and expander_size pixels wide in the\nexpanded position.</p>",
            "kind": "function",
            "name": "paint_expander"
        },
        {
            "doc": "<p>Draws an extension, i.e. a notebook tab.</p>",
            "kind": "function",
            "name": "paint_extension"
        },
        {
            "doc": "<p>Draws a flat box on <code>cr</code> with the given parameters.</p>",
            "kind": "function",
            "name": "paint_flat_box"
        },
        {
            "doc": "<p>Draws a focus indicator around the given rectangle on <code>cr</code> using the\ngiven style.</p>",
            "kind": "function",
            "name": "paint_focus"
        },
        {
            "doc": "<p>Draws a handle as used in <span data-xref=\"Gtk.HandleBox\"/> and <span data-xref=\"Gtk.Paned\"/>.</p>",
            "kind": "function",
            "name": "paint_handle"
        },
        {
            "doc": "<p>Draws a horizontal line from (<code>x1</code>, <code>y</code>) to (<code>x2</code>, <code>y</code>) in <code>cr</code>\nusing the given style and state.</p>",
            "kind": "function",
            "name": "paint_hline"
        },
        {
            "doc": "<p>Draws a layout on <code>cr</code> using the given parameters.</p>",
            "kind": "function",
            "name": "paint_layout"
        },
        {
            "doc": "<p>Draws a radio button indicator in the given rectangle on <code>cr</code> with\nthe given parameters.</p>",
            "kind": "function",
            "name": "paint_option"
        },
        {
            "doc": "<p>Draws a resize grip in the given rectangle on <code>cr</code> using the given\nparameters.</p>",
            "kind": "function",
            "name": "paint_resize_grip"
        },
        {
            "doc": "<p>Draws a shadow around the given rectangle in <code>cr</code>\nusing the given style and state and shadow type.</p>",
            "kind": "function",
            "name": "paint_shadow"
        },
        {
            "doc": "<p>Draws a shadow around the given rectangle in <code>cr</code>\nusing the given style and state and shadow type, leaving a\ngap in one side.</p>",
            "kind": "function",
            "name": "paint_shadow_gap"
        },
        {
            "doc": "<p>Draws a slider in the given rectangle on <code>cr</code> using the\ngiven style and orientation.</p>",
            "kind": "function",
            "name": "paint_slider"
        },
        {
            "doc": "<p>Draws a spinner on @window using the given parameters.</p>",
            "kind": "function",
            "name": "paint_spinner"
        },
        {
            "doc": "<p>Draws an option menu tab (i.e. the up and down pointing arrows)\nin the given rectangle on <code>cr</code> using the given parameters.</p>",
            "kind": "function",
            "name": "paint_tab"
        },
        {
            "doc": "<p>Draws a vertical line from (<code>x</code>, <code>y1_</code>) to (<code>x</code>, <code>y2_</code>) in <code>cr</code>\nusing the given style and state.</p>",
            "kind": "function",
            "name": "paint_vline"
        },
        {
            "doc": "<p>Returns the name of the default paper size, which\ndepends on the current locale.</p>",
            "kind": "function",
            "name": "paper_size_get_default"
        },
        {
            "doc": "<p>Creates a list of known paper sizes.</p>",
            "kind": "function",
            "name": "paper_size_get_paper_sizes"
        },
        {
            "doc": "<p>Parses command line arguments, and initializes global\nattributes of GTK+, but does not actually open a connection\nto a display. (See <span data-xref=\"Gdk.Display.open\">Gdk.Display.open</span>, <span data-xref=\"Gdk.get_display_arg_name\">Gdk.get_display_arg_name</span>)</p><p>Any arguments used by GTK+ or GDK are removed from the array and\n<code>argc</code> and <code>argv</code> are updated accordingly.</p><p>There is no need to call this function explicitly if you are using\n<span data-xref=\"Gtk.init\"/>, or <span data-xref=\"Gtk.init_check\"/>.</p>",
            "kind": "function",
            "name": "parse_args"
        },
        {
            "doc": "<p>Registers an error quark for <span data-xref=\"Gtk.PrintOperation\"/> if necessary.</p>",
            "kind": "function",
            "name": "print_error_quark"
        },
        {
            "doc": "<p>Runs a page setup dialog, letting the user modify the values from\n<code>page_setup</code>. If the user cancels the dialog, the returned <span data-xref=\"Gtk.PageSetup\"/>\nis identical to the passed in <code>page_setup</code>, otherwise it contains the\nmodifications done in the dialog.</p><p>Note that this function may use a recursive mainloop to show the page\nsetup dialog. See <span data-xref=\"Gtk.print_run_page_setup_dialog_async\"/> if this is\na problem.</p>",
            "kind": "function",
            "name": "print_run_page_setup_dialog"
        },
        {
            "doc": "<p>Runs a page setup dialog, letting the user modify the values from <code>page_setup</code>.</p><p>In contrast to <span data-xref=\"Gtk.print_run_page_setup_dialog\"/>, this function  returns after\nshowing the page setup dialog on platforms that support this, and calls <code>done_cb</code>\nfrom a signal handler for the ::response signal of the dialog.</p>",
            "kind": "function",
            "name": "print_run_page_setup_dialog_async"
        },
        {
            "doc": "<p>Sends an event to a widget, propagating the event to parent widgets\nif the event remains unhandled.</p><p>Events received by GTK+ from GDK normally begin in <span data-xref=\"Gtk.main_do_event\"/>.\nDepending on the type of event, existence of modal dialogs, grabs, etc.,\nthe event may be propagated; if so, this function is used.</p><p><span data-xref=\"Gtk.propagate_event\"/> calls <span data-xref=\"Gtk.Widget.event\"/> on each widget it\ndecides to send the event to. So <span data-xref=\"Gtk.Widget.event\"/> is the lowest-level\nfunction; it simply emits the <span data-xref=\"Gtk.Widget-event\"/> and possibly an\nevent-specific signal on a widget. <span data-xref=\"Gtk.propagate_event\"/> is a bit\nhigher-level, and <span data-xref=\"Gtk.main_do_event\"/> is the highest level.</p><p>All that said, you most likely don\u2019t want to use any of these\nfunctions; synthesizing events is rarely needed. There are almost\ncertainly better ways to achieve your goals. For example, use\n<span data-xref=\"Gdk.Window.invalidate_rect\">Gdk.Window.prototype.invalidate_rect</span> or <span data-xref=\"Gtk.Widget.queue_draw\"/> instead\nof making up expose events.</p>",
            "kind": "function",
            "name": "propagate_event"
        },
        {
            "doc": "<p>Adds a file to the list of files to be parsed at the\nend of <span data-xref=\"Gtk.init\"/>.</p>",
            "kind": "function",
            "name": "rc_add_default_file"
        },
        {
            "doc": "<p>Searches for a theme engine in the GTK+ search path. This function\nis not useful for applications and should not be used.</p>",
            "kind": "function",
            "name": "rc_find_module_in_path"
        },
        {
            "doc": "<p>Looks up a file in pixmap path for the specified <span data-xref=\"Gtk.Settings\"/>.\nIf the file is not found, it outputs a warning message using\ng_warning() and returns <code>null</code>.</p>",
            "kind": "function",
            "name": "rc_find_pixmap_in_path"
        },
        {
            "doc": "<p>Retrieves the current list of RC files that will be parsed\nat the end of <span data-xref=\"Gtk.init\"/>.</p>",
            "kind": "function",
            "name": "rc_get_default_files"
        },
        {
            "doc": "<p>Obtains the path to the IM modules file. See the documentation\nof the <code>GTK_IM_MODULE_FILE</code>\nenvironment variable for more details.</p>",
            "kind": "function",
            "name": "rc_get_im_module_file"
        },
        {
            "doc": "<p>Obtains the path in which to look for IM modules. See the documentation\nof the <code>GTK_PATH</code>\nenvironment variable for more details about looking up modules. This\nfunction is useful solely for utilities supplied with GTK+ and should\nnot be used by applications under normal circumstances.</p>",
            "kind": "function",
            "name": "rc_get_im_module_path"
        },
        {
            "doc": "<p>Returns a directory in which GTK+ looks for theme engines.\nFor full information about the search for theme engines,\nsee the docs for <code>GTK_PATH</code> in [Running GTK+ Applications][gtk-running].</p>",
            "kind": "function",
            "name": "rc_get_module_dir"
        },
        {
            "doc": "<p>Finds all matching RC styles for a given widget,\ncomposites them together, and then creates a\n<span data-xref=\"Gtk.Style\"/> representing the composite appearance.\n(GTK+ actually keeps a cache of previously\ncreated styles, so a new style may not be\ncreated.)</p>",
            "kind": "function",
            "name": "rc_get_style"
        },
        {
            "doc": "<p>Creates up a <span data-xref=\"Gtk.Style\"/> from styles defined in a RC file by providing\nthe raw components used in matching. This function may be useful\nwhen creating pseudo-widgets that should be themed like widgets but\ndon\u2019t actually have corresponding GTK+ widgets. An example of this\nwould be items inside a GNOME canvas widget.</p><p>The action of <span data-xref=\"Gtk.rc_get_style\"/> is similar to:\n|[&lt;!-- language=\"C\" --&gt;\n gtk_widget_path (widget, NULL, &amp;path, NULL);\n gtk_widget_class_path (widget, NULL, &amp;class_path, NULL);\n gtk_rc_get_style_by_paths (gtk_widget_get_settings (widget),\n                            path, class_path,\n                            G_OBJECT_TYPE (widget));\n]|</p>",
            "kind": "function",
            "name": "rc_get_style_by_paths"
        },
        {
            "doc": "<p>Returns the standard directory in which themes should\nbe installed. (GTK+ does not actually use this directory\nitself.)</p>",
            "kind": "function",
            "name": "rc_get_theme_dir"
        },
        {
            "doc": "<p>Parses a given resource file.</p>",
            "kind": "function",
            "name": "rc_parse"
        },
        {
            "doc": "<p>Parses a color in the format expected\nin a RC file.</p><p>Note that theme engines should use <span data-xref=\"Gtk.rc_parse_color_full\"/> in\norder to support symbolic colors.</p>",
            "kind": "function",
            "name": "rc_parse_color"
        },
        {
            "doc": "<p>Parses a color in the format expected\nin a RC file. If <code>style</code> is not <code>null</code>, it will be consulted to resolve\nreferences to symbolic colors.</p>",
            "kind": "function",
            "name": "rc_parse_color_full"
        },
        {
            "doc": "<p>Parses a <span data-xref=\"Gtk.PathPriorityType\"/> variable from the format expected\nin a RC file.</p>",
            "kind": "function",
            "name": "rc_parse_priority"
        },
        {
            "doc": "<p>Parses a <span data-xref=\"Gtk.StateType\"/> variable from the format expected\nin a RC file.</p>",
            "kind": "function",
            "name": "rc_parse_state"
        },
        {
            "doc": "<p>Parses resource information directly from a string.</p>",
            "kind": "function",
            "name": "rc_parse_string"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.RcPropertyParser\"/> for use with <span data-xref=\"Gtk.Settings.install_property_parser\"/>\nor <span data-xref=\"Gtk.WidgetClass.install_style_property_parser\"/> which parses\nborders in the form\n<code>\"{ left, right, top, bottom }\"</code> for integers\nleft, right, top and bottom.</p>",
            "kind": "function",
            "name": "rc_property_parse_border"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.RcPropertyParser\"/> for use with <span data-xref=\"Gtk.Settings.install_property_parser\"/>\nor <span data-xref=\"Gtk.WidgetClass.install_style_property_parser\"/> which parses a\ncolor given either by its name or in the form\n<code>{ red, green, blue }</code> where red, green and\nblue are integers between 0 and 65535 or floating-point numbers\nbetween 0 and 1.</p>",
            "kind": "function",
            "name": "rc_property_parse_color"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.RcPropertyParser\"/> for use with <span data-xref=\"Gtk.Settings.install_property_parser\"/>\nor <span data-xref=\"Gtk.WidgetClass.install_style_property_parser\"/> which parses a single\nenumeration value.</p><p>The enumeration value can be specified by its name, its nickname or\nits numeric value. For consistency with flags parsing, the value\nmay be surrounded by parentheses.</p>",
            "kind": "function",
            "name": "rc_property_parse_enum"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.RcPropertyParser\"/> for use with <span data-xref=\"Gtk.Settings.install_property_parser\"/>\nor <span data-xref=\"Gtk.WidgetClass.install_style_property_parser\"/> which parses flags.</p><p>Flags can be specified by their name, their nickname or\nnumerically. Multiple flags can be specified in the form\n<code>\"( flag1 | flag2 | ... )\"</code>.</p>",
            "kind": "function",
            "name": "rc_property_parse_flags"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.RcPropertyParser\"/> for use with <span data-xref=\"Gtk.Settings.install_property_parser\"/>\nor <span data-xref=\"Gtk.WidgetClass.install_style_property_parser\"/> which parses a\nrequisition in the form\n<code>\"{ width, height }\"</code> for integers %width and %height.</p>",
            "kind": "function",
            "name": "rc_property_parse_requisition"
        },
        {
            "doc": "<p>If the modification time on any previously read file for the\ndefault <span data-xref=\"Gtk.Settings\"/> has changed, discard all style information\nand then reread all previously read RC files.</p>",
            "kind": "function",
            "name": "rc_reparse_all"
        },
        {
            "doc": "<p>If the modification time on any previously read file\nfor the given <span data-xref=\"Gtk.Settings\"/> has changed, discard all style information\nand then reread all previously read RC files.</p>",
            "kind": "function",
            "name": "rc_reparse_all_for_settings"
        },
        {
            "doc": "<p>This function recomputes the styles for all widgets that use a\nparticular <span data-xref=\"Gtk.Settings\"/> object. (There is one <span data-xref=\"Gtk.Settings\"/> object\nper <span data-xref=\"Gdk.Screen\">Gdk.Screen</span>, see <span data-xref=\"Gtk.Settings.get_for_screen\"/>); It is useful\nwhen some global parameter has changed that affects the appearance\nof all widgets, because when a widget gets a new style, it will\nboth redraw and recompute any cached information about its\nappearance. As an example, it is used when the default font size\nset by the operating system changes. Note that this function\ndoesn\u2019t affect widgets that have a style set explicitly on them\nwith <span data-xref=\"Gtk.Widget.set_style\"/>.</p>",
            "kind": "function",
            "name": "rc_reset_styles"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "rc_scanner_new"
        },
        {
            "doc": "<p>Sets the list of files that GTK+ will read at the\nend of <span data-xref=\"Gtk.init\"/>.</p>",
            "kind": "function",
            "name": "rc_set_default_files"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "recent_chooser_error_quark"
        },
        {
            "doc": "",
            "kind": "function",
            "name": "recent_manager_error_quark"
        },
        {
            "doc": "<p>Renders an activity area (Such as in <span data-xref=\"Gtk.Spinner\"/> or the\nfill line in <span data-xref=\"Gtk.Range\"/>), the state <span data-xref=\"Gtk.StateFlags\"/>.active\ndetermines whether there is activity going on.</p>",
            "kind": "function",
            "name": "render_activity"
        },
        {
            "doc": "<p>Renders an arrow pointing to <code>angle</code>.</p><p>Typical arrow rendering at 0, 1&amp;solidus;2 &amp;pi;, &amp;pi; and 3&amp;solidus;2 &amp;pi;:</p><p><img alt=\"\" src=\"arrows.png\" /></p>",
            "kind": "function",
            "name": "render_arrow"
        },
        {
            "doc": "<p>Renders the background of an element.</p><p>Typical background rendering, showing the effect of\n<code>background-image</code>, <code>border-width</code> and <code>border-radius</code>:</p><p><img alt=\"\" src=\"background.png\" /></p>",
            "kind": "function",
            "name": "render_background"
        },
        {
            "doc": "<p>Renders a checkmark (as in a <span data-xref=\"Gtk.CheckButton\"/>).</p><p>The <span data-xref=\"Gtk.StateFlags\"/>.active state determines whether the check is\non or off, and <span data-xref=\"Gtk.StateFlags\"/>.inconsistent determines whether it\nshould be marked as undefined.</p><p>Typical checkmark rendering:</p><p><img alt=\"\" src=\"checks.png\" /></p>",
            "kind": "function",
            "name": "render_check"
        },
        {
            "doc": "<p>Renders an expander (as used in <span data-xref=\"Gtk.TreeView\"/> and <span data-xref=\"Gtk.Expander\"/>) in the area\ndefined by <code>x</code>, <code>y</code>, <code>width</code>, <code>height</code>. The state <span data-xref=\"Gtk.StateFlags\"/>.active\ndetermines whether the expander is collapsed or expanded.</p><p>Typical expander rendering:</p><p><img alt=\"\" src=\"expanders.png\" /></p>",
            "kind": "function",
            "name": "render_expander"
        },
        {
            "doc": "<p>Renders a extension (as in a <span data-xref=\"Gtk.Notebook\"/> tab) in the rectangle\ndefined by <code>x</code>, <code>y</code>, <code>width</code>, <code>height</code>. The side where the extension\nconnects to is defined by <code>gap_side</code>.</p><p>Typical extension rendering:</p><p><img alt=\"\" src=\"extensions.png\" /></p>",
            "kind": "function",
            "name": "render_extension"
        },
        {
            "doc": "<p>Renders a focus indicator on the rectangle determined by <code>x</code>, <code>y</code>, <code>width</code>, <code>height</code>.</p><p>Typical focus rendering:</p><p><img alt=\"\" src=\"focus.png\" /></p>",
            "kind": "function",
            "name": "render_focus"
        },
        {
            "doc": "<p>Renders a frame around the rectangle defined by <code>x</code>, <code>y</code>, <code>width</code>, <code>height</code>.</p><p>Examples of frame rendering, showing the effect of <code>border-image</code>,\n<code>border-color</code>, <code>border-width</code>, <code>border-radius</code> and junctions:</p><p><img alt=\"\" src=\"frames.png\" /></p>",
            "kind": "function",
            "name": "render_frame"
        },
        {
            "doc": "<p>Renders a frame around the rectangle defined by (<code>x</code>, <code>y</code>, <code>width</code>, <code>height</code>),\nleaving a gap on one side. <code>xy0_gap</code> and <code>xy1_gap</code> will mean X coordinates\nfor <span data-xref=\"Gtk.PositionType\"/>.top and <span data-xref=\"Gtk.PositionType\"/>.bottom gap sides, and Y coordinates for\n<span data-xref=\"Gtk.PositionType\"/>.left and <span data-xref=\"Gtk.PositionType\"/>.right.</p><p>Typical rendering of a frame with a gap:</p><p><img alt=\"\" src=\"frame-gap.png\" /></p>",
            "kind": "function",
            "name": "render_frame_gap"
        },
        {
            "doc": "<p>Renders a handle (as in <span data-xref=\"Gtk.HandleBox\"/>, <span data-xref=\"Gtk.Paned\"/> and\n<span data-xref=\"Gtk.Window\"/>\u2019s resize grip), in the rectangle\ndetermined by <code>x</code>, <code>y</code>, <code>width</code>, <code>height</code>.</p><p>Handles rendered for the paned and grip classes:</p><p><img alt=\"\" src=\"handles.png\" /></p>",
            "kind": "function",
            "name": "render_handle"
        },
        {
            "doc": "<p>Renders the icon in <code>pixbuf</code> at the specified <code>x</code> and <code>y</code> coordinates.</p>",
            "kind": "function",
            "name": "render_icon"
        },
        {
            "doc": "<p>Renders the icon specified by <code>source</code> at the given <code>size</code>, returning the result\nin a pixbuf.</p>",
            "kind": "function",
            "name": "render_icon_pixbuf"
        },
        {
            "doc": "<p>Renders the icon in <code>surface</code> at the specified <code>x</code> and <code>y</code> coordinates.</p>",
            "kind": "function",
            "name": "render_icon_surface"
        },
        {
            "doc": "<p>Draws a text caret on <code>cr</code> at the specified index of <code>layout</code>.</p>",
            "kind": "function",
            "name": "render_insertion_cursor"
        },
        {
            "doc": "<p>Renders <code>layout</code> on the coordinates <code>x</code>, <code>y</code></p>",
            "kind": "function",
            "name": "render_layout"
        },
        {
            "doc": "<p>Renders a line from (x0, y0) to (x1, y1).</p>",
            "kind": "function",
            "name": "render_line"
        },
        {
            "doc": "<p>Renders an option mark (as in a <span data-xref=\"Gtk.RadioButton\"/>), the <span data-xref=\"Gtk.StateFlags\"/>.active\nstate will determine whether the option is on or off, and\n<span data-xref=\"Gtk.StateFlags\"/>.inconsistent whether it should be marked as undefined.</p><p>Typical option mark rendering:</p><p><img alt=\"\" src=\"options.png\" /></p>",
            "kind": "function",
            "name": "render_option"
        },
        {
            "doc": "<p>Renders a slider (as in <span data-xref=\"Gtk.Scale\"/>) in the rectangle defined by <code>x</code>, <code>y</code>,\n<code>width</code>, <code>height</code>. <code>orientation</code> defines whether the slider is vertical\nor horizontal.</p><p>Typical slider rendering:</p><p><img alt=\"\" src=\"sliders.png\" /></p>",
            "kind": "function",
            "name": "render_slider"
        },
        {
            "doc": "<p>Converts a color from RGB space to HSV.</p><p>Input values must be in the [0.0, 1.0] range;\noutput values will be in the same range.</p>",
            "kind": "function",
            "name": "rgb_to_hsv"
        },
        {
            "doc": "<p>Appends a specified target to the list of supported targets for a\ngiven widget and selection.</p>",
            "kind": "function",
            "name": "selection_add_target"
        },
        {
            "doc": "<p>Prepends a table of targets to the list of supported targets\nfor a given widget and selection.</p>",
            "kind": "function",
            "name": "selection_add_targets"
        },
        {
            "doc": "<p>Remove all targets registered for the given selection for the\nwidget.</p>",
            "kind": "function",
            "name": "selection_clear_targets"
        },
        {
            "doc": "<p>Requests the contents of a selection. When received,\na \u201cselection-received\u201d signal will be generated.</p>",
            "kind": "function",
            "name": "selection_convert"
        },
        {
            "doc": "<p>Claims ownership of a given selection for a particular widget,\nor, if <code>widget</code> is <code>null</code>, release ownership of the selection.</p>",
            "kind": "function",
            "name": "selection_owner_set"
        },
        {
            "doc": "<p>Claim ownership of a given selection for a particular widget, or,\nif <code>widget</code> is <code>null</code>, release ownership of the selection.</p>",
            "kind": "function",
            "name": "selection_owner_set_for_display"
        },
        {
            "doc": "<p>Removes all handlers and unsets ownership of all\nselections for a widget. Called when widget is being\ndestroyed. This function will not generally be\ncalled by applications.</p>",
            "kind": "function",
            "name": "selection_remove_all"
        },
        {
            "doc": "<p>Sets the GTK+ debug flags.</p>",
            "kind": "function",
            "name": "set_debug_flags"
        },
        {
            "doc": "<p>This is a convenience function for showing an application\u2019s about box.\nThe constructed dialog is associated with the parent window and\nreused for future invocations of this function.</p>",
            "kind": "function",
            "name": "show_about_dialog"
        },
        {
            "doc": "<p>This is a convenience function for launching the default application\nto show the uri. The uri must be of a form understood by GIO (i.e. you\nneed to install gvfs to get support for uri schemes such as http://\nor ftp://, as only local files are handled by GIO itself).\nTypical examples are\n- <code>file:///home/gnome/pict.jpg</code>\n- <code>http://www.gnome.org</code>\n- <code>mailto:me@gnome.org</code>\nIdeally the timestamp is taken from the event triggering\nthe <span data-xref=\"Gtk.show_uri\"/> call. If timestamp is not known you can take\n%GDK_CURRENT_TIME.</p>",
            "kind": "function",
            "name": "show_uri"
        },
        {
            "doc": "<p>Registers each of the stock items in <code>items</code>. If an item already\nexists with the same stock ID as one of the <code>items</code>, the old item\ngets replaced. The stock items are copied, so GTK+ does not hold\nany pointer into <code>items</code> and <code>items</code> can be freed. Use\n<span data-xref=\"Gtk.stock_add_static\"/> if <code>items</code> is persistent and GTK+ need not\ncopy the array.</p>",
            "kind": "function",
            "name": "stock_add"
        },
        {
            "doc": "<p>Same as <span data-xref=\"Gtk.stock_add\"/>, but doesn\u2019t copy <code>items</code>, so\n<code>items</code> must persist until application exit.</p>",
            "kind": "function",
            "name": "stock_add_static"
        },
        {
            "doc": "<p>Retrieves a list of all known stock IDs added to a <span data-xref=\"Gtk.IconFactory\"/>\nor registered with <span data-xref=\"Gtk.stock_add\"/>. The list must be freed with <span data-xref=\"GLib.SList.free\">GLib.SList.free</span>,\nand each string in the list must be freed with <span data-xref=\"GLib.free\">GLib.free</span>.</p>",
            "kind": "function",
            "name": "stock_list_ids"
        },
        {
            "doc": "<p>Fills <code>item</code> with the registered values for <code>stock_id</code>, returning <code>true</code>\nif <code>stock_id</code> was known.</p>",
            "kind": "function",
            "name": "stock_lookup"
        },
        {
            "doc": "<p>Sets a function to be used for translating the @label of\na stock item.</p><p>If no function is registered for a translation domain,\n<span data-xref=\"GLib.dgettext\">GLib.dgettext</span> is used.</p><p>The function is used for all stock items whose\n@translation_domain matches <code>domain</code>. Note that it is possible\nto use strings different from the actual gettext translation domain\nof your application for this, as long as your <span data-xref=\"Gtk.TranslateFunc\"/> uses\nthe correct domain when calling dgettext(). This can be useful, e.g.\nwhen dealing with message contexts:</p><p>|[&lt;!-- language=\"C\" --&gt;\nGtkStockItem items[] = {\n { MY_ITEM1, NC_(\"odd items\", \"Item 1\"), 0, 0, \"odd-item-domain\" },\n { MY_ITEM2, NC_(\"even items\", \"Item 2\"), 0, 0, \"even-item-domain\" },\n};</p><p>gchar <em>\nmy_translate_func (const gchar </em>msgid,\n                   gpointer     data)\n{\n  gchar *msgctxt = data;</p><p>return (gchar*)g_dpgettext2 (GETTEXT_PACKAGE, msgctxt, msgid);\n}</p><p>...</p><p>gtk_stock_add (items, G_N_ELEMENTS (items));\ngtk_stock_set_translate_func (\"odd-item-domain\", my_translate_func, \"odd items\");\ngtk_stock_set_translate_func (\"even-item-domain\", my_translate_func, \"even items\");\n]|</p>",
            "kind": "function",
            "name": "stock_set_translate_func"
        },
        {
            "doc": "<p>This function frees a target table as returned by\n<span data-xref=\"Gtk.target_table_new_from_list\"/></p>",
            "kind": "function",
            "name": "target_table_free"
        },
        {
            "doc": "<p>This function creates an <span data-xref=\"Gtk.TargetEntry\"/> array that contains the\nsame targets as the passed %list. The returned table is newly\nallocated and should be freed using <span data-xref=\"Gtk.target_table_free\"/> when no\nlonger needed.</p>",
            "kind": "function",
            "name": "target_table_new_from_list"
        },
        {
            "doc": "<p>Determines if any of the targets in <code>targets</code> can be used to\nprovide a <span data-xref=\"GdkPixbuf.Pixbuf\">GdkPixbuf.Pixbuf</span>.</p>",
            "kind": "function",
            "name": "targets_include_image"
        },
        {
            "doc": "<p>Determines if any of the targets in <code>targets</code> can be used to\nprovide rich text.</p>",
            "kind": "function",
            "name": "targets_include_rich_text"
        },
        {
            "doc": "<p>Determines if any of the targets in <code>targets</code> can be used to\nprovide text.</p>",
            "kind": "function",
            "name": "targets_include_text"
        },
        {
            "doc": "<p>Determines if any of the targets in <code>targets</code> can be used to\nprovide an uri list.</p>",
            "kind": "function",
            "name": "targets_include_uri"
        },
        {
            "doc": "<p>Create a simple window with window title <code>window_title</code> and\ntext contents <code>dialog_text</code>.\nThe window will quit any running <span data-xref=\"Gtk.main\"/>-loop when destroyed, and it\nwill automatically be destroyed upon test function teardown.</p>",
            "kind": "function",
            "name": "test_create_simple_window"
        },
        {
            "doc": "<p>This function wraps <span data-xref=\"GObject.Object.new\">GObject.Object.new</span> for widget types.\nIt\u2019ll automatically show all created non window widgets, also\n<span data-xref=\"GObject.Object.ref_sink\">GObject.Object.prototype.ref_sink</span> them (to keep them alive across a running test)\nand set them up for destruction during the next test teardown phase.</p>",
            "kind": "function",
            "name": "test_create_widget"
        },
        {
            "doc": "<p>Create a window with window title <code>window_title</code>, text contents <code>dialog_text</code>,\nand a number of buttons, according to the paired argument list given\nas @... parameters.\nEach button is created with a @label and a ::clicked signal handler that\nincremrents the integer stored in @nump.\nThe window will be automatically shown with <span data-xref=\"Gtk.Widget.show_now\"/> after\ncreation, so when this function returns it has already been mapped,\nresized and positioned on screen.\nThe window will quit any running <span data-xref=\"Gtk.main\"/>-loop when destroyed, and it\nwill automatically be destroyed upon test function teardown.</p>",
            "kind": "function",
            "name": "test_display_button_window"
        },
        {
            "doc": "<p>This function will search <code>widget</code> and all its descendants for a GtkLabel\nwidget with a text string matching <code>label_pattern</code>.\nThe <code>label_pattern</code> may contain asterisks \u201c*\u201d and question marks \u201c?\u201d as\nplaceholders, <span data-xref=\"GLib.pattern_match\">GLib.pattern_match</span> is used for the matching.\nNote that locales other than \"C\u201c tend to alter (translate\u201d label strings,\nso this function is genrally only useful in test programs with\npredetermined locales, see <span data-xref=\"Gtk.test_init\"/> for more details.</p>",
            "kind": "function",
            "name": "test_find_label"
        },
        {
            "doc": "<p>This function will search siblings of <code>base_widget</code> and siblings of its\nancestors for all widgets matching <code>widget_type</code>.\nOf the matching widgets, the one that is geometrically closest to\n<code>base_widget</code> will be returned.\nThe general purpose of this function is to find the most likely \u201caction\u201d\nwidget, relative to another labeling widget. Such as finding a\nbutton or text entry widget, given its corresponding label widget.</p>",
            "kind": "function",
            "name": "test_find_sibling"
        },
        {
            "doc": "<p>This function will search the descendants of <code>widget</code> for a widget\nof type <code>widget_type</code> that has a label matching <code>label_pattern</code> next\nto it. This is most useful for automated GUI testing, e.g. to find\nthe \u201cOK\u201d button in a dialog and synthesize clicks on it.\nHowever see <span data-xref=\"Gtk.test_find_label\"/>, <span data-xref=\"Gtk.test_find_sibling\"/> and\n<span data-xref=\"Gtk.test_widget_click\"/> for possible caveats involving the search of\nsuch widgets and synthesizing widget events.</p>",
            "kind": "function",
            "name": "test_find_widget"
        },
        {
            "doc": "<p>This function is used to initialize a GTK+ test program.</p><p>It will in turn call <span data-xref=\"GLib.test_init\">GLib.test_init</span> and <span data-xref=\"Gtk.init\"/> to properly\ninitialize the testing framework and graphical toolkit. It\u2019ll\nalso set the program\u2019s locale to \u201cC\u201d and prevent loading of rc\nfiles and Gtk+ modules. This is done to make tets program\nenvironments as deterministic as possible.</p><p>Like <span data-xref=\"Gtk.init\"/> and <span data-xref=\"GLib.test_init\">GLib.test_init</span>, any known arguments will be\nprocessed and stripped from @argc and @argv.</p>",
            "kind": "function",
            "name": "test_init"
        },
        {
            "doc": "<p>Return the type ids that have been registered after\ncalling <span data-xref=\"Gtk.test_register_all_types\"/>.</p>",
            "kind": "function",
            "name": "test_list_all_types"
        },
        {
            "doc": "<p>Force registration of all core Gtk+ and Gdk object types.\nThis allowes to refer to any of those object types via\n<span data-xref=\"GObject.type_from_name\">GObject.type_from_name</span> after calling this function.</p>",
            "kind": "function",
            "name": "test_register_all_types"
        },
        {
            "doc": "<p>Retrive the literal adjustment value for GtkRange based\nwidgets and spin buttons. Note that the value returned by\nthis function is anything between the lower and upper bounds\nof the adjustment belonging to <code>widget</code>, and is not a percentage\nas passed in to <span data-xref=\"Gtk.test_slider_set_perc\"/>.</p>",
            "kind": "function",
            "name": "test_slider_get_value"
        },
        {
            "doc": "<p>This function will adjust the slider position of all GtkRange\nbased widgets, such as scrollbars or scales, it\u2019ll also adjust\nspin buttons. The adjustment value of these widgets is set to\na value between the lower and upper limits, according to the\n<code>percentage</code> argument.</p>",
            "kind": "function",
            "name": "test_slider_set_perc"
        },
        {
            "doc": "<p>This function will generate a <code>button</code> click in the upwards or downwards\nspin button arrow areas, usually leading to an increase or decrease of\nspin button\u2019s value.</p>",
            "kind": "function",
            "name": "test_spin_button_click"
        },
        {
            "doc": "<p>Retrive the text string of <code>widget</code> if it is a GtkLabel,\nGtkEditable (entry and text widgets) or GtkTextView.</p>",
            "kind": "function",
            "name": "test_text_get"
        },
        {
            "doc": "<p>Set the text string of <code>widget</code> to <code>string</code> if it is a GtkLabel,\nGtkEditable (entry and text widgets) or GtkTextView.</p>",
            "kind": "function",
            "name": "test_text_set"
        },
        {
            "doc": "<p>This function will generate a <code>button</code> click (button press and button\nrelease event) in the middle of the first GdkWindow found that belongs\nto <code>widget</code>.\nFor %GTK_NO_WINDOW widgets like GtkButton, this will often be an\ninput-only event window. For other widgets, this is usually widget-&gt;window.\nCertain caveats should be considered when using this function, in\nparticular because the mouse pointer is warped to the button click\nlocation, see <span data-xref=\"Gdk.test_simulate_button\">Gdk.test_simulate_button</span> for details.</p>",
            "kind": "function",
            "name": "test_widget_click"
        },
        {
            "doc": "<p>This function will generate keyboard press and release events in\nthe middle of the first GdkWindow found that belongs to <code>widget</code>.\nFor %GTK_NO_WINDOW widgets like GtkButton, this will often be an\ninput-only event window. For other widgets, this is usually widget-&gt;window.\nCertain caveats should be considered when using this function, in\nparticular because the mouse pointer is warped to the key press\nlocation, see <span data-xref=\"Gdk.test_simulate_key\">Gdk.test_simulate_key</span> for details.</p>",
            "kind": "function",
            "name": "test_widget_send_key"
        },
        {
            "doc": "<p>Enters the main loop and waits for <code>widget</code> to be \u201cdrawn\u201d. In this\ncontext that means it waits for the frame clock of <code>widget</code> to have\nrun a full styling, layout and drawing cycle.</p><p>This function is intended to be used for syncing with actions that\ndepend on <code>widget</code> relayouting or on interaction with the display\nserver.</p>",
            "kind": "function",
            "name": "test_widget_wait_for_draw"
        },
        {
            "doc": "<p>Obtains a <code>tree_model</code> and <code>path</code> from selection data of target type\n%GTK_TREE_MODEL_ROW. Normally called from a drag_data_received handler.\nThis function can only be used if <code>selection_data</code> originates from the same\nprocess that\u2019s calling this function, because a pointer to the tree model\nis being passed around. If you aren\u2019t in the same process, then you'll\nget memory corruption. In the <span data-xref=\"Gtk.TreeDragDest\"/> drag_data_received handler,\nyou can assume that selection data of type %GTK_TREE_MODEL_ROW is\nin from the current process. The returned path must be freed with\n<span data-xref=\"Gtk.TreePath.free\"/>.</p>",
            "kind": "function",
            "name": "tree_get_row_drag_data"
        },
        {
            "doc": "<p>Lets a set of row reference created by\n<span data-xref=\"Gtk.TreeRowReference.new_proxy\"/> know that the\nmodel emitted the <span data-xref=\"Gtk.TreeModel-row-deleted\"/> signal.</p>",
            "kind": "function",
            "name": "tree_row_reference_deleted"
        },
        {
            "doc": "<p>Lets a set of row reference created by\n<span data-xref=\"Gtk.TreeRowReference.new_proxy\"/> know that the\nmodel emitted the <span data-xref=\"Gtk.TreeModel-row-inserted\"/> signal.</p>",
            "kind": "function",
            "name": "tree_row_reference_inserted"
        },
        {
            "doc": "<p>Lets a set of row reference created by\n<span data-xref=\"Gtk.TreeRowReference.new_proxy\"/> know that the\nmodel emitted the <span data-xref=\"Gtk.TreeModel-rows-reordered\"/> signal.</p>",
            "kind": "function",
            "name": "tree_row_reference_reordered"
        },
        {
            "doc": "<p>Sets selection data of target type %GTK_TREE_MODEL_ROW. Normally used\nin a drag_data_get handler.</p>",
            "kind": "function",
            "name": "tree_set_row_drag_data"
        },
        {
            "doc": "<p>All this function does it to return <code>true</code>.</p><p>This can be useful for example if you want to inhibit the deletion\nof a window. Of course you should not do this as the user expects\na reaction from clicking the close icon of the window...</p><h2>A persistent window</h2><p>|[&lt;!-- language=\"C\" --&gt;</p>\n<h1>include &lt;gtk/gtk.h&gt;</h1><p>int\nmain (int argc, char <em><em>argv)\n{\n  GtkWidget </em>win, </em>but;\n  const char *text = \"Close yourself. I mean it!\";</p><p>gtk_init (&amp;argc, &amp;argv);</p><p>win = gtk_window_new (GTK_WINDOW_TOPLEVEL);\n  g_signal_connect (win,\n                    \"delete-event\",\n                    G_CALLBACK (gtk_true),\n                    NULL);\n  g_signal_connect (win, \"destroy\",\n                    G_CALLBACK (gtk_main_quit),\n                    NULL);</p><p>but = gtk_button_new_with_label (text);\n  g_signal_connect_swapped (but, \"clicked\",\n                            G_CALLBACK (gtk_object_destroy),\n                            win);\n  gtk_container_add (GTK_CONTAINER (win), but);</p><p>gtk_widget_show_all (win);</p><p>gtk_main ();</p><p>return 0;\n}\n]|</p>",
            "kind": "function",
            "name": "true"
        }
    ],
    "name": "Gtk",
    "records": [
        {
            "doc": "",
            "kind": "class",
            "name": "AboutDialogClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "AboutDialogPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "AccelGroupClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "AccelGroupEntry"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "AccelGroupPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "AccelKey"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "AccelLabelClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "AccelLabelPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "AccelMapClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "AccessibleClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "AccessiblePrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ActionBarClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ActionBarPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ActionClass"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.ActionEntry\"/> structs are used with <span data-xref=\"Gtk.ActionGroup.add_actions\"/> to\nconstruct actions.</p>",
            "kind": "class",
            "name": "ActionEntry"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ActionGroupClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ActionGroupPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ActionPrivate"
        },
        {
            "doc": "<p>The interface vtable for <span data-xref=\"Gtk.Actionable\"/>.</p>",
            "kind": "class",
            "name": "ActionableInterface"
        },
        {
            "doc": "<p>&gt; This method can be called with a <code>null</code> action at times.</p>",
            "kind": "class",
            "name": "ActivatableIface"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "AdjustmentClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "AdjustmentPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "AlignmentClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "AlignmentPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "AppChooserButtonClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "AppChooserButtonPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "AppChooserDialogClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "AppChooserDialogPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "AppChooserWidgetClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "AppChooserWidgetPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ApplicationClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ApplicationPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ApplicationWindowClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ApplicationWindowPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ArrowClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ArrowPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "AspectFrameClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "AspectFramePrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "AssistantClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "AssistantPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "BinClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "BinPrivate"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.BindingArg\"/> holds the data associated with\nan argument for a key binding signal emission as\nstored in <span data-xref=\"Gtk.BindingSignal\"/>.</p>",
            "kind": "class",
            "name": "BindingArg"
        },
        {
            "doc": "<p>Each key binding element of a binding sets binding list is\nrepresented by a GtkBindingEntry.</p>",
            "kind": "class",
            "name": "BindingEntry"
        },
        {
            "doc": "<p>A binding set maintains a list of activatable key bindings.\nA single binding set can match multiple types of widgets.\nSimilar to style contexts, can be matched by any information contained\nin a widgets <span data-xref=\"Gtk.WidgetPath\"/>. When a binding within a set is matched upon\nactivation, an action signal is emitted on the target widget to carry out\nthe actual activation.</p>",
            "kind": "class",
            "name": "BindingSet"
        },
        {
            "doc": "<p>A GtkBindingSignal stores the necessary information to\nactivate a widget in response to a key press via a signal\nemission.</p>",
            "kind": "class",
            "name": "BindingSignal"
        },
        {
            "doc": "<p>A struct that specifies a border around a rectangular area\nthat can be of different width on each side.</p>",
            "kind": "class",
            "name": "Border"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "BoxClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "BoxPrivate"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.BuildableIface\"/> interface contains method that are\nnecessary to allow <span data-xref=\"Gtk.Builder\"/> to construct an object from\na <span data-xref=\"Gtk.Builder\"/> UI definition.</p>",
            "kind": "class",
            "name": "BuildableIface"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "BuilderClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "BuilderPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ButtonBoxClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ButtonBoxPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ButtonClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ButtonPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CalendarClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CalendarPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellAreaBoxClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellAreaBoxPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellAreaClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellAreaContextClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellAreaContextPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellAreaPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellEditableIface"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellLayoutIface"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellRendererAccelClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellRendererAccelPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellRendererClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellRendererClassPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellRendererComboClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellRendererComboPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellRendererPixbufClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellRendererPixbufPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellRendererPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellRendererProgressClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellRendererProgressPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellRendererSpinClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellRendererSpinPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellRendererSpinnerClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellRendererSpinnerPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellRendererTextClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellRendererTextPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellRendererToggleClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellRendererTogglePrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellViewClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CellViewPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CheckButtonClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CheckMenuItemClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CheckMenuItemPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ColorButtonClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ColorButtonPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ColorChooserDialogClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ColorChooserDialogPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ColorChooserInterface"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ColorChooserWidgetClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ColorChooserWidgetPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ColorSelectionClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ColorSelectionDialogClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ColorSelectionDialogPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ColorSelectionPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ComboBoxClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ComboBoxPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ComboBoxTextClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ComboBoxTextPrivate"
        },
        {
            "doc": "<p>Base class for containers.</p>",
            "kind": "class",
            "name": "ContainerClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ContainerPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CssProviderClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "CssProviderPrivate"
        },
        {
            "doc": "<p>Defines a part of a CSS document. Because sections are nested into\none another, you can use <span data-xref=\"Gtk.CssSection.get_parent\"/> to get the\ncontaining region.</p>",
            "kind": "class",
            "name": "CssSection"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "DialogClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "DialogPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "DrawingAreaClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "EditableInterface"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "EntryBufferClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "EntryBufferPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "EntryClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "EntryCompletionClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "EntryCompletionPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "EntryPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "EventBoxClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "EventBoxPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ExpanderClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ExpanderPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FileChooserButtonClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FileChooserButtonPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FileChooserDialogClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FileChooserDialogPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FileChooserWidgetClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FileChooserWidgetPrivate"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.FileFilterInfo\"/>-struct is used to pass information about the\ntested file to <span data-xref=\"Gtk.FileFilter.filter\"/>.</p>",
            "kind": "class",
            "name": "FileFilterInfo"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FixedChild"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FixedClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FixedPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FlowBoxChildClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FlowBoxClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FontButtonClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FontButtonPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FontChooserDialogClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FontChooserDialogPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FontChooserIface"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FontChooserWidgetClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FontChooserWidgetPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FontSelectionClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FontSelectionDialogClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FontSelectionDialogPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FontSelectionPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FrameClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "FramePrivate"
        },
        {
            "doc": "<p>GtkGradient is a boxed type that represents a gradient.\nIt is the result of parsing a\n[gradient expression][gtkcssprovider-gradients].\nTo obtain the gradient represented by a GtkGradient, it has to\nbe resolved with <span data-xref=\"Gtk.Gradient.resolve\"/>, which replaces all\nsymbolic color references by the colors they refer to (in a given\ncontext) and constructs a #cairo_pattern_t value.</p><p>It is not normally necessary to deal directly with #GtkGradients,\nsince they are mostly used behind the scenes by <span data-xref=\"Gtk.StyleContext\"/> and\n<span data-xref=\"Gtk.CssProvider\"/>.</p><p><span data-xref=\"Gtk.Gradient\"/> is deprecated. It was used internally by GTK\u2019s CSS engine\nto represent gradients. As its handling is not conforming to modern\nweb standards, it is not used anymore. If you want to use gradients in\nyour own code, please use Cairo directly.</p>",
            "kind": "class",
            "name": "Gradient"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "GridClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "GridPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "HBoxClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "HButtonBoxClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "HPanedClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "HSVClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "HSVPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "HScaleClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "HScrollbarClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "HSeparatorClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "HandleBoxClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "HandleBoxPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "HeaderBarClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "HeaderBarPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "IMContextClass"
        },
        {
            "doc": "<p>Bookkeeping information about a loadable input method.</p>",
            "kind": "class",
            "name": "IMContextInfo"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "IMContextSimpleClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "IMContextSimplePrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "IMMulticontextClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "IMMulticontextPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "IconFactoryClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "IconFactoryPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "IconInfoClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "IconSet"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "IconSource"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "IconThemeClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "IconThemePrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "IconViewClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "IconViewPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ImageClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ImageMenuItemClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ImageMenuItemPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ImagePrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "InfoBarClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "InfoBarPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "InvisibleClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "InvisiblePrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "LabelClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "LabelPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "LabelSelectionInfo"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "LayoutClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "LayoutPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "LevelBarClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "LevelBarPrivate"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.LinkButtonClass\"/> contains only\nprivate data.</p>",
            "kind": "class",
            "name": "LinkButtonClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "LinkButtonPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ListBoxClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ListBoxRowClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ListStoreClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ListStorePrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "LockButtonClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "LockButtonPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "MenuBarClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "MenuBarPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "MenuButtonClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "MenuButtonPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "MenuClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "MenuItemClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "MenuItemPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "MenuPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "MenuShellClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "MenuShellPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "MenuToolButtonClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "MenuToolButtonPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "MessageDialogClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "MessageDialogPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "MiscClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "MiscPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "MountOperationClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "MountOperationPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "NotebookClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "NotebookPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "NumerableIconClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "NumerableIconPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "OffscreenWindowClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "OrientableIface"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "OverlayClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "OverlayPrivate"
        },
        {
            "doc": "<p>See also <span data-xref=\"Gtk.PrintSettings.set_page_ranges\"/>.</p>",
            "kind": "class",
            "name": "PageRange"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "PanedClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "PanedPrivate"
        },
        {
            "doc": "<p>GtkPaperSize handles paper sizes. It uses the standard called\n<a href=\"http://www.pwg.org/standards.html\">PWG 5101.1-2002 PWG: Standard for Media Standardized Names</a>\nto name the paper sizes (and to get the data for the page sizes).\nIn addition to standard paper sizes, GtkPaperSize allows to\nconstruct custom paper sizes with arbitrary dimensions.</p><p>The <span data-xref=\"Gtk.PaperSize\"/> object stores not only the dimensions (width\nand height) of a paper size and its name, it also provides\ndefault [print margins][print-margins].</p><p>Printing support has been added in GTK+ 2.10.</p>",
            "kind": "class",
            "name": "PaperSize"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "PlacesSidebarClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "PlugClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "PlugPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "PopoverClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "PopoverPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "PrintOperationClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "PrintOperationPreviewIface"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "PrintOperationPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ProgressBarClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ProgressBarPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "RadioActionClass"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.RadioActionEntry\"/> structs are used with\n<span data-xref=\"Gtk.ActionGroup.add_radio_actions\"/> to construct groups of radio actions.</p>",
            "kind": "class",
            "name": "RadioActionEntry"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "RadioActionPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "RadioButtonClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "RadioButtonPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "RadioMenuItemClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "RadioMenuItemPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "RadioToolButtonClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "RangeClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "RangePrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "RcContext"
        },
        {
            "doc": "<p>Deprecated</p>",
            "kind": "class",
            "name": "RcProperty"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "RcStyleClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "RecentActionClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "RecentActionPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "RecentChooserDialogClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "RecentChooserDialogPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "RecentChooserIface"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "RecentChooserMenuClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "RecentChooserMenuPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "RecentChooserWidgetClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "RecentChooserWidgetPrivate"
        },
        {
            "doc": "<p>Meta-data to be passed to <span data-xref=\"Gtk.RecentManager.add_full\"/> when\nregistering a recently used resource.</p>",
            "kind": "class",
            "name": "RecentData"
        },
        {
            "doc": "<p>A GtkRecentFilterInfo struct is used\nto pass information about the tested file to <span data-xref=\"Gtk.RecentFilter.filter\"/>.</p>",
            "kind": "class",
            "name": "RecentFilterInfo"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.RecentInfo\"/>-struct contains private data only, and should\nbe accessed using the provided API.</p><p><span data-xref=\"Gtk.RecentInfo\"/> constains all the meta-data\nassociated with an entry in the recently used files list.</p>",
            "kind": "class",
            "name": "RecentInfo"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.RecentManagerClass\"/> contains only private data.</p>",
            "kind": "class",
            "name": "RecentManagerClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "RecentManagerPrivate"
        },
        {
            "doc": "<p>Represents a request of a screen object in a given orientation. These\nare primarily used in container implementations when allocating a natural\nsize for children calling. See <span data-xref=\"Gtk.distribute_natural_allocation\"/>.</p>",
            "kind": "class",
            "name": "RequestedSize"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.Requisition\"/>-struct represents the desired size of a widget. See\n[GtkWidget\u2019s geometry management section][geometry-management] for\nmore information.</p>",
            "kind": "class",
            "name": "Requisition"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "RevealerClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ScaleButtonClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ScaleButtonPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ScaleClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ScalePrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ScrollableInterface"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ScrollbarClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ScrolledWindowClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ScrolledWindowPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "SearchBarClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "SearchEntryClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "SelectionData"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "SeparatorClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "SeparatorMenuItemClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "SeparatorPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "SeparatorToolItemClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "SeparatorToolItemPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "SettingsClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "SettingsPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "SettingsValue"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "SizeGroupClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "SizeGroupPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "SocketClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "SocketPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "SpinButtonClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "SpinButtonPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "SpinnerClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "SpinnerPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "StackClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "StackSwitcherClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "StatusIconClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "StatusIconPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "StatusbarClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "StatusbarPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "StockItem"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "StyleClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "StyleContextClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "StyleContextPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "StylePropertiesClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "StylePropertiesPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "StyleProviderIface"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "SwitchClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "SwitchPrivate"
        },
        {
            "doc": "<p>GtkSymbolicColor is a boxed type that represents a symbolic color.\nIt is the result of parsing a\n[color expression][gtkcssprovider-symbolic-colors].\nTo obtain the color represented by a GtkSymbolicColor, it has to\nbe resolved with <span data-xref=\"Gtk.SymbolicColor.resolve\"/>, which replaces all\nsymbolic color references by the colors they refer to (in a given\ncontext) and evaluates mix, shade and other expressions, resulting\nin a <span data-xref=\"Gdk.RGBA\">Gdk.RGBA</span> value.</p><p>It is not normally necessary to deal directly with #GtkSymbolicColors,\nsince they are mostly used behind the scenes by <span data-xref=\"Gtk.StyleContext\"/> and\n<span data-xref=\"Gtk.CssProvider\"/>.</p><p><span data-xref=\"Gtk.SymbolicColor\"/> is deprecated. Symbolic colors are considered an\nimplementation detail of GTK+.</p>",
            "kind": "class",
            "name": "SymbolicColor"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TableChild"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TableClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TablePrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TableRowCol"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.TargetEntry\"/> represents a single type of\ndata than can be supplied for by a widget for a selection\nor for supplied or received during drag-and-drop.</p>",
            "kind": "class",
            "name": "TargetEntry"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.TargetList\"/>-struct is a reference counted list\nof <span data-xref=\"Gtk.TargetPair\"/> and should be treated as\nopaque.</p>",
            "kind": "class",
            "name": "TargetList"
        },
        {
            "doc": "<p>A <span data-xref=\"Gtk.TargetPair\"/> is used to represent the same\ninformation as a table of <span data-xref=\"Gtk.TargetEntry\"/>, but in\nan efficient form.</p>",
            "kind": "class",
            "name": "TargetPair"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TearoffMenuItemClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TearoffMenuItemPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TextAppearance"
        },
        {
            "doc": "<p>Using <span data-xref=\"Gtk.TextAttributes\"/> directly should rarely be necessary.\nIt\u2019s primarily useful with <span data-xref=\"Gtk.TextIter.get_attributes\"/>.\nAs with most GTK+ structs, the fields in this struct should only\nbe read, never modified directly.</p>",
            "kind": "class",
            "name": "TextAttributes"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TextBTree"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TextBufferClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TextBufferPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TextChildAnchorClass"
        },
        {
            "doc": "<p>You may wish to begin by reading the\n[text widget conceptual overview][TextWidget]\nwhich gives an overview of all the objects and data\ntypes related to the text widget and how they work together.</p>",
            "kind": "class",
            "name": "TextIter"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TextMarkClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TextTagClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TextTagPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TextTagTableClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TextTagTablePrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TextViewClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TextViewPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ThemeEngine"
        },
        {
            "doc": "<p>Base class for theming engines.</p>",
            "kind": "class",
            "name": "ThemingEngineClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ThemingEnginePrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ToggleActionClass"
        },
        {
            "doc": "<p><span data-xref=\"Gtk.ToggleActionEntry\"/> structs are used with\n<span data-xref=\"Gtk.ActionGroup.add_toggle_actions\"/> to construct toggle actions.</p>",
            "kind": "class",
            "name": "ToggleActionEntry"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ToggleActionPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ToggleButtonClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ToggleButtonPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ToggleToolButtonClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ToggleToolButtonPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ToolButtonClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ToolButtonPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ToolItemClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ToolItemGroupClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ToolItemGroupPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ToolItemPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ToolPaletteClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ToolPalettePrivate"
        },
        {
            "doc": "<p>Virtual function table for the <span data-xref=\"Gtk.ToolShell\"/> interface.</p>",
            "kind": "class",
            "name": "ToolShellIface"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ToolbarClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ToolbarPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TreeDragDestIface"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TreeDragSourceIface"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.TreeIter\"/> is the primary structure\nfor accessing a <span data-xref=\"Gtk.TreeModel\"/>. Models are expected to put a unique\ninteger in the @stamp member, and put\nmodel-specific data in the three @user_data\nmembers.</p>",
            "kind": "class",
            "name": "TreeIter"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TreeModelFilterClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TreeModelFilterPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TreeModelIface"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TreeModelSortClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TreeModelSortPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TreePath"
        },
        {
            "doc": "<p>A GtkTreeRowReference tracks model changes so that it always refers to the\nsame row (a <span data-xref=\"Gtk.TreePath\"/> refers to a position, not a fixed row). Create a\nnew GtkTreeRowReference with <span data-xref=\"Gtk.TreeRowReference.new\"/>.</p>",
            "kind": "class",
            "name": "TreeRowReference"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TreeSelectionClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TreeSelectionPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TreeSortableIface"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TreeStoreClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TreeStorePrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TreeViewClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TreeViewColumnClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TreeViewColumnPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "TreeViewPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "UIManagerClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "UIManagerPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "VBoxClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "VButtonBoxClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "VPanedClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "VScaleClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "VScrollbarClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "VSeparatorClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ViewportClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "ViewportPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "VolumeButtonClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "WidgetAuxInfo"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "WidgetClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "WidgetClassPrivate"
        },
        {
            "doc": "<p>GtkWidgetPath is a boxed type that represents a widget hierarchy from\nthe topmost widget, typically a toplevel, to any child. This widget\npath abstraction is used in <span data-xref=\"Gtk.StyleContext\"/> on behalf of the real\nwidget in order to query style information.</p><p>If you are using GTK+ widgets, you probably will not need to use\nthis API directly, as there is <span data-xref=\"Gtk.Widget.get_path\"/>, and the style\ncontext returned by <span data-xref=\"Gtk.Widget.get_style_context\"/> will be automatically\nupdated on widget hierarchy changes.</p><p>The widget path generation is generally simple:</p><h2>Defining a button within a window</h2><p>|[&lt;!-- language=\"C\" --&gt;\n{\n  GtkWidgetPath *path;</p><p>path = gtk_widget_path_new ();\n  gtk_widget_path_append_type (path, GTK_TYPE_WINDOW);\n  gtk_widget_path_append_type (path, GTK_TYPE_BUTTON);\n}\n]|</p><p>Although more complex information, such as widget names, or\ndifferent classes (property that may be used by other widget\ntypes) and intermediate regions may be included:</p><h2>Defining the first tab widget in a notebook</h2><p>|[&lt;!-- language=\"C\" --&gt;\n{\n  GtkWidgetPath *path;\n  guint pos;</p><p>path = gtk_widget_path_new ();</p><p>pos = gtk_widget_path_append_type (path, GTK_TYPE_NOTEBOOK);\n  gtk_widget_path_iter_add_region (path, pos, \"tab\", GTK_REGION_EVEN | GTK_REGION_FIRST);</p><p>pos = gtk_widget_path_append_type (path, GTK_TYPE_LABEL);\n  gtk_widget_path_iter_set_name (path, pos, \"first tab label\");\n}\n]|</p><p>All this information will be used to match the style information\nthat applies to the described widget.</p>",
            "kind": "class",
            "name": "WidgetPath"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "WidgetPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "WindowClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "WindowGeometryInfo"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "WindowGroupClass"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "WindowGroupPrivate"
        },
        {
            "doc": "",
            "kind": "class",
            "name": "WindowPrivate"
        }
    ],
    "version": "3.0"
}