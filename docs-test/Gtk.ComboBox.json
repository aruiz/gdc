{
    "constructors": [
        {
            "doc": "<p>Creates a new empty <span data-xref=\"Gtk.ComboBox\"/>.</p>",
            "kind": "constructor",
            "name": "new",
            "parameters": [],
            "retval": {
                "type": "Gtk.Widget"
            }
        },
        {
            "doc": "<p>Creates a new empty <span data-xref=\"Gtk.ComboBox\"/> using <pre>area</pre> to layout cells.</p>",
            "kind": "constructor",
            "name": "new_with_area",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "area",
                    "direction": "in",
                    "type": "Gtk.CellArea"
                }
            ],
            "retval": {
                "type": "Gtk.Widget"
            }
        },
        {
            "doc": "<p>Creates a new empty <span data-xref=\"Gtk.ComboBox\"/> with an entry.</p><p>The new combo box will use <pre>area</pre> to layout cells.</p>",
            "kind": "constructor",
            "name": "new_with_area_and_entry",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "area",
                    "direction": "in",
                    "type": "Gtk.CellArea"
                }
            ],
            "retval": {
                "type": "Gtk.Widget"
            }
        },
        {
            "doc": "<p>Creates a new empty <span data-xref=\"Gtk.ComboBox\"/> with an entry.</p>",
            "kind": "constructor",
            "name": "new_with_entry",
            "parameters": [],
            "retval": {
                "type": "Gtk.Widget"
            }
        },
        {
            "doc": "<p>Creates a new <span data-xref=\"Gtk.ComboBox\"/> with the model initialized to <pre>model</pre>.</p>",
            "kind": "constructor",
            "name": "new_with_model",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "model",
                    "direction": "in",
                    "type": "Gtk.TreeModel"
                }
            ],
            "retval": {
                "type": "Gtk.Widget"
            }
        },
        {
            "doc": "<p>Creates a new empty <span data-xref=\"Gtk.ComboBox\"/> with an entry\nand with the model initialized to <pre>model</pre>.</p>",
            "kind": "constructor",
            "name": "new_with_model_and_entry",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "model",
                    "direction": "in",
                    "type": "Gtk.TreeModel"
                }
            ],
            "retval": {
                "type": "Gtk.Widget"
            }
        }
    ],
    "doc": "<p>A GtkComboBox is a widget that allows the user to choose from a list of\nvalid choices. The GtkComboBox displays the selected choice. When\nactivated, the GtkComboBox displays a popup which allows the user to\nmake a new choice. The style in which the selected value is displayed,\nand the style of the popup is determined by the current theme. It may\nbe similar to a Windows-style combo box.</p><p>The GtkComboBox uses the model-view pattern; the list of valid choices\nis specified in the form of a tree model, and the display of the choices\ncan be adapted to the data in the model by using cell renderers, as you\nwould in a tree view. This is possible since GtkComboBox implements the\n<span data-xref=\"Gtk.CellLayout\"/> interface. The tree model holding the valid choices is\nnot restricted to a flat list, it can be a real tree, and the popup will\nreflect the tree structure.</p><p>To allow the user to enter values not in the model, the \u201chas-entry\u201d\nproperty allows the GtkComboBox to contain a <span data-xref=\"Gtk.Entry\"/>. This entry\ncan be accessed by calling <span data-xref=\"Gtk.Bin.get_child\"/> on the combo box.</p><p>For a simple list of textual choices, the model-view API of GtkComboBox\ncan be a bit overwhelming. In this case, <span data-xref=\"Gtk.ComboBoxText\"/> offers a\nsimple alternative. Both GtkComboBox and <span data-xref=\"Gtk.ComboBoxText\"/> can contain\nan entry.</p>",
    "kind": "class",
    "methods": [
        {
            "doc": "<p>Returns the index of the currently active item, or -1 if there\u2019s no\nactive item. If the model is a non-flat treemodel, and the active item\nis not an immediate child of the root of the tree, this function returns\n<code>gtk_tree_path_get_indices (path)[0]</code>, where\n<code>path</code> is the <span data-xref=\"Gtk.TreePath\"/> of the active item.</p>",
            "kind": "method",
            "name": "get_active",
            "parameters": [],
            "retval": {
                "type": "Number(gint)"
            }
        },
        {
            "doc": "<p>Returns the ID of the active row of <pre>combo_box</pre>.  This value is taken\nfrom the active row and the column specified by the <span data-xref=\"Gtk.ComboBox-id-column\"/>\nproperty of <pre>combo_box</pre> (see <span data-xref=\"Gtk.ComboBox.set_id_column\"/>).</p><p>The returned value is an interned string which means that you can\ncompare the pointer by value to other interned strings and that you\nmust not free it.</p><p>If the <span data-xref=\"Gtk.ComboBox-id-column\"/> property of <pre>combo_box</pre> is not set, or if\nno row is active, or if the active row has a <pre>null</pre> ID value, then <pre>null</pre>\nis returned.</p>",
            "kind": "method",
            "name": "get_active_id",
            "parameters": [],
            "retval": {
                "type": "String"
            }
        },
        {
            "doc": "<p>Sets <pre>iter</pre> to point to the current active item, if it exists.</p>",
            "kind": "method",
            "name": "get_active_iter",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "iter",
                    "direction": "out",
                    "type": "Gtk.TreeIter"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Gets the current value of the :add-tearoffs property.</p>",
            "kind": "method",
            "name": "get_add_tearoffs",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Returns whether the combo box sets the dropdown button\nsensitive or not when there are no items in the model.</p>",
            "kind": "method",
            "name": "get_button_sensitivity",
            "parameters": [],
            "retval": {
                "type": "Gtk.SensitivityType"
            }
        },
        {
            "doc": "<p>Returns the column with column span information for <pre>combo_box</pre>.</p>",
            "kind": "method",
            "name": "get_column_span_column",
            "parameters": [],
            "retval": {
                "type": "Number(gint)"
            }
        },
        {
            "doc": "<p>Returns the column which <pre>combo_box</pre> is using to get the strings\nfrom to display in the internal entry.</p>",
            "kind": "method",
            "name": "get_entry_text_column",
            "parameters": [],
            "retval": {
                "type": "Number(gint)"
            }
        },
        {
            "doc": "<p>Returns whether the combo box grabs focus when it is clicked\nwith the mouse. See <span data-xref=\"Gtk.ComboBox.set_focus_on_click\"/>.</p>",
            "kind": "method",
            "name": "get_focus_on_click",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Returns whether the combo box has an entry.</p>",
            "kind": "method",
            "name": "get_has_entry",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Returns the column which <pre>combo_box</pre> is using to get string IDs\nfor values from.</p>",
            "kind": "method",
            "name": "get_id_column",
            "parameters": [],
            "retval": {
                "type": "Number(gint)"
            }
        },
        {
            "doc": "<p>Returns the <span data-xref=\"Gtk.TreeModel\"/> which is acting as data source for <pre>combo_box</pre>.</p>",
            "kind": "method",
            "name": "get_model",
            "parameters": [],
            "retval": {
                "type": "Gtk.TreeModel"
            }
        },
        {
            "doc": "<p>Gets the accessible object corresponding to the combo box\u2019s popup.</p><p>This function is mostly intended for use by accessibility technologies;\napplications should have little use for it.</p>",
            "kind": "method",
            "name": "get_popup_accessible",
            "parameters": [],
            "retval": {
                "type": "Atk.Object"
            }
        },
        {
            "doc": "<p>Gets whether the popup uses a fixed width matching\nthe allocated width of the combo box.</p>",
            "kind": "method",
            "name": "get_popup_fixed_width",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Returns the current row separator function.</p>",
            "kind": "method",
            "name": "get_row_separator_func",
            "parameters": [],
            "retval": {
                "type": "Gtk.TreeViewRowSeparatorFunc"
            }
        },
        {
            "doc": "<p>Returns the column with row span information for <pre>combo_box</pre>.</p>",
            "kind": "method",
            "name": "get_row_span_column",
            "parameters": [],
            "retval": {
                "type": "Number(gint)"
            }
        },
        {
            "doc": "<p>Gets the current title of the menu in tearoff mode. See\n<span data-xref=\"Gtk.ComboBox.set_add_tearoffs\"/>.</p>",
            "kind": "method",
            "name": "get_title",
            "parameters": [],
            "retval": {
                "type": "String"
            }
        },
        {
            "doc": "<p>Returns the wrap width which is used to determine the number of columns\nfor the popup menu. If the wrap width is larger than 1, the combo box\nis in table mode.</p>",
            "kind": "method",
            "name": "get_wrap_width",
            "parameters": [],
            "retval": {
                "type": "Number(gint)"
            }
        },
        {
            "doc": "<p>Hides the menu or dropdown list of <pre>combo_box</pre>.</p><p>This function is mostly intended for use by accessibility technologies;\napplications should have little use for it.</p>",
            "kind": "method",
            "name": "popdown",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Pops up the menu or dropdown list of <pre>combo_box</pre>.</p><p>This function is mostly intended for use by accessibility technologies;\napplications should have little use for it.</p>",
            "kind": "method",
            "name": "popup",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Pops up the menu or dropdown list of <pre>combo_box</pre>, the popup window\nwill be grabbed so only <pre>device</pre> and its associated pointer/keyboard\nare the only #GdkDevices able to send events to it.</p>",
            "kind": "method",
            "name": "popup_for_device",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "device",
                    "direction": "in",
                    "type": "Gdk.Device"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the active item of <pre>combo_box</pre> to be the item at @index.</p>",
            "kind": "method",
            "name": "set_active",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "index_",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Changes the active row of <pre>combo_box</pre> to the one that has an ID equal to\n<pre>active_id</pre>, or unsets the active row if <pre>active_id</pre> is <pre>null</pre>.  Rows having\na <pre>null</pre> ID string cannot be made active by this function.</p><p>If the <span data-xref=\"Gtk.ComboBox-id-column\"/> property of <pre>combo_box</pre> is unset or if no\nrow has the given ID then the function does nothing and returns <pre>false</pre>.</p>",
            "kind": "method",
            "name": "set_active_id",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "active_id",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>Sets the current active item to be the one referenced by <pre>iter</pre>, or\nunsets the active item if <pre>iter</pre> is <pre>null</pre>.</p>",
            "kind": "method",
            "name": "set_active_iter",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "iter",
                    "direction": "in",
                    "type": "Gtk.TreeIter"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets whether the popup menu should have a tearoff\nmenu item.</p>",
            "kind": "method",
            "name": "set_add_tearoffs",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "add_tearoffs",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets whether the dropdown button of the combo box should be\nalways sensitive (<span data-xref=\"Gtk.SensitivityType\"/>.on), never sensitive (<span data-xref=\"Gtk.SensitivityType\"/>.off)\nor only if there is at least one item to display (<span data-xref=\"Gtk.SensitivityType\"/>.auto).</p>",
            "kind": "method",
            "name": "set_button_sensitivity",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "sensitivity",
                    "direction": "in",
                    "type": "Gtk.SensitivityType"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the column with column span information for <pre>combo_box</pre> to be\n<pre>column_span</pre>. The column span column contains integers which indicate\nhow many columns an item should span.</p>",
            "kind": "method",
            "name": "set_column_span_column",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "column_span",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the model column which <pre>combo_box</pre> should use to get strings from\nto be <pre>text_column</pre>. The column <pre>text_column</pre> in the model of <pre>combo_box</pre>\nmust be of type %G_TYPE_STRING.</p><p>This is only relevant if <pre>combo_box</pre> has been created with\n<span data-xref=\"Gtk.ComboBox-has-entry\"/> as <pre>true</pre>.</p>",
            "kind": "method",
            "name": "set_entry_text_column",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "text_column",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets whether the combo box will grab focus when it is clicked with\nthe mouse. Making mouse clicks not grab focus is useful in places\nlike toolbars where you don\u2019t want the keyboard focus removed from\nthe main area of the application.</p>",
            "kind": "method",
            "name": "set_focus_on_click",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "focus_on_click",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the model column which <pre>combo_box</pre> should use to get string IDs\nfor values from. The column <pre>id_column</pre> in the model of <pre>combo_box</pre>\nmust be of type %G_TYPE_STRING.</p>",
            "kind": "method",
            "name": "set_id_column",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "id_column",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the model used by <pre>combo_box</pre> to be <pre>model</pre>. Will unset a previously set\nmodel (if applicable). If model is <pre>null</pre>, then it will unset the model.</p><p>Note that this function does not clear the cell renderers, you have to\ncall <span data-xref=\"Gtk.CellLayout.clear\"/> yourself if you need to set up different\ncell renderers for the new model.</p>",
            "kind": "method",
            "name": "set_model",
            "parameters": [
                {
                    "allow_none": true,
                    "argname": "model",
                    "direction": "in",
                    "type": "Gtk.TreeModel"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Specifies whether the popup\u2019s width should be a fixed width\nmatching the allocated width of the combo box.</p>",
            "kind": "method",
            "name": "set_popup_fixed_width",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "fixed",
                    "direction": "in",
                    "type": "Boolean"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the row separator function, which is used to determine\nwhether a row should be drawn as a separator. If the row separator\nfunction is <pre>null</pre>, no separators are drawn. This is the default value.</p>",
            "kind": "method",
            "name": "set_row_separator_func",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "func",
                    "direction": "in",
                    "type": "Gtk.TreeViewRowSeparatorFunc"
                },
                {
                    "allow_none": true,
                    "argname": "data",
                    "direction": "in",
                    "type": "void"
                },
                {
                    "allow_none": true,
                    "argname": "destroy",
                    "direction": "in",
                    "type": "GLib.DestroyNotify"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the column with row span information for <pre>combo_box</pre> to be <pre>row_span</pre>.\nThe row span column contains integers which indicate how many rows\nan item should span.</p>",
            "kind": "method",
            "name": "set_row_span_column",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "row_span",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the menu\u2019s title in tearoff mode.</p>",
            "kind": "method",
            "name": "set_title",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "title",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>Sets the wrap width of <pre>combo_box</pre> to be <pre>width</pre>. The wrap width is basically\nthe preferred number of columns when you want the popup to be layed out\nin a table.</p>",
            "kind": "method",
            "name": "set_wrap_width",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "width",
                    "direction": "in",
                    "type": "Number(gint)"
                }
            ],
            "retval": {
                "type": "void"
            }
        }
    ],
    "name": "ComboBox",
    "properties": [
        {
            "doc": "<p>The item which is currently active. If the model is a non-flat treemodel,\nand the active item is not an immediate child of the root of the tree,\nthis property has the value\n<code>gtk_tree_path_get_indices (path)[0]</code>,\nwhere <code>path</code> is the <span data-xref=\"Gtk.TreePath\"/> of the active item.</p>",
            "kind": "property",
            "name": "active",
            "type": "Number(gint)"
        },
        {
            "doc": "<p>The value of the ID column of the active row.</p>",
            "kind": "property",
            "name": "active-id",
            "type": "String"
        },
        {
            "doc": "<p>The add-tearoffs property controls whether generated menus\nhave tearoff menu items.</p><p>Note that this only affects menu style combo boxes.</p>",
            "kind": "property",
            "name": "add-tearoffs",
            "type": "Boolean"
        },
        {
            "doc": "<p>Whether the dropdown button is sensitive when\nthe model is empty.</p>",
            "kind": "property",
            "name": "button-sensitivity",
            "type": "Gtk.SensitivityType"
        },
        {
            "doc": "<p>The <span data-xref=\"Gtk.CellArea\"/> used to layout cell renderers for this combo box.</p><p>If no area is specified when creating the combo box with <span data-xref=\"Gtk.ComboBox.new_with_area\"/>\na horizontally oriented <span data-xref=\"Gtk.CellAreaBox\"/> will be used.</p>",
            "kind": "property",
            "name": "cell-area",
            "type": "Gtk.CellArea"
        },
        {
            "doc": "<p>If this is set to a non-negative value, it must be the index of a column\nof type %G_TYPE_INT in the model.</p><p>The values of that column are used to determine how many columns a value\nin the list will span.</p>",
            "kind": "property",
            "name": "column-span-column",
            "type": "Number(gint)"
        },
        {
            "doc": "<p>The column in the combo box's model to associate with strings from the entry\nif the combo was created with <span data-xref=\"Gtk.ComboBox-has-entry\"/> = <pre>true</pre>.</p>",
            "kind": "property",
            "name": "entry-text-column",
            "type": "Number(gint)"
        },
        {
            "doc": "",
            "kind": "property",
            "name": "focus-on-click",
            "type": "Boolean"
        },
        {
            "doc": "<p>Whether the combo box has an entry.</p>",
            "kind": "property",
            "name": "has-entry",
            "type": "Boolean"
        },
        {
            "doc": "<p>The has-frame property controls whether a frame\nis drawn around the entry.</p>",
            "kind": "property",
            "name": "has-frame",
            "type": "Boolean"
        },
        {
            "doc": "<p>The column in the combo box's model that provides string\nIDs for the values in the model, if != -1.</p>",
            "kind": "property",
            "name": "id-column",
            "type": "Number(gint)"
        },
        {
            "doc": "<p>The model from which the combo box takes the values shown\nin the list.</p>",
            "kind": "property",
            "name": "model",
            "type": "Gtk.TreeModel"
        },
        {
            "doc": "<p>Whether the popup's width should be a fixed width matching the\nallocated width of the combo box.</p>",
            "kind": "property",
            "name": "popup-fixed-width",
            "type": "Boolean"
        },
        {
            "doc": "<p>Whether the combo boxes dropdown is popped up.\nNote that this property is mainly useful, because\nit allows you to connect to notify::popup-shown.</p>",
            "kind": "property",
            "name": "popup-shown",
            "type": "Boolean"
        },
        {
            "doc": "<p>If this is set to a non-negative value, it must be the index of a column\nof type %G_TYPE_INT in the model.</p><p>The values of that column are used to determine how many rows a value in\nthe list will span. Therefore, the values in the model column pointed to\nby this property must be greater than zero and not larger than wrap-width.</p>",
            "kind": "property",
            "name": "row-span-column",
            "type": "Number(gint)"
        },
        {
            "doc": "<p>A title that may be displayed by the window manager\nwhen the popup is torn-off.</p>",
            "kind": "property",
            "name": "tearoff-title",
            "type": "String"
        },
        {
            "doc": "<p>If wrap-width is set to a positive value, the list will be\ndisplayed in multiple columns, the number of columns is\ndetermined by wrap-width.</p>",
            "kind": "property",
            "name": "wrap-width",
            "type": "Number(gint)"
        }
    ],
    "signals": [
        {
            "doc": "<p>The changed signal is emitted when the active\nitem is changed. The can be due to the user selecting\na different item from the list, or due to a\ncall to <span data-xref=\"Gtk.ComboBox.set_active_iter\"/>.\nIt will also be emitted while typing into the entry of a combo box\nwith an entry.</p>",
            "kind": "signal",
            "name": "changed",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>For combo boxes that are created with an entry (See GtkComboBox:has-entry).</p><p>A signal which allows you to change how the text displayed in a combo box's\nentry is displayed.</p><p>Connect a signal handler which returns an allocated string representing\n<pre>path</pre>. That string will then be used to set the text in the combo box's entry.\nThe default signal handler uses the text from the GtkComboBox::entry-text-column\nmodel column.</p><p>Here's an example signal handler which fetches data from the model and\ndisplays it in the entry.\n|[<!-- language=\"C\" -->\nstatic gchar<em>\nformat_entry_text_callback (GtkComboBox </em>combo,\n                            const gchar *path,\n                            gpointer     user_data)\n{\n  GtkTreeIter iter;\n  GtkTreeModel model;\n  gdouble      value;</p>\n<p>model = gtk_combo_box_get_model (combo);</p><p>gtk_tree_model_get_iter_from_string (model, &amp;iter, path);\n  gtk_tree_model_get (model, &amp;iter,\n                      THE_DOUBLE_VALUE_COLUMN, &amp;value,\n                      -1);</p><p>return g_strdup_printf (\"%g\", value);\n}\n]|</p>",
            "kind": "signal",
            "name": "format-entry-text",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "path",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "String"
            }
        },
        {
            "doc": "<p>The ::move-active signal is a\n[keybinding signal][GtkBindingSignal]\nwhich gets emitted to move the active selection.</p>",
            "kind": "signal",
            "name": "move-active",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "scroll_type",
                    "direction": "in",
                    "type": "Gtk.ScrollType"
                }
            ],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "<p>The ::popdown signal is a\n[keybinding signal][GtkBindingSignal]\nwhich gets emitted to popdown the combo box list.</p><p>The default bindings for this signal are Alt+Up and Escape.</p>",
            "kind": "signal",
            "name": "popdown",
            "parameters": [],
            "retval": {
                "type": "Boolean"
            }
        },
        {
            "doc": "<p>The ::popup signal is a\n[keybinding signal][GtkBindingSignal]\nwhich gets emitted to popup the combo box list.</p><p>The default binding for this signal is Alt+Down.</p>",
            "kind": "signal",
            "name": "popup",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        }
    ],
    "vfuncs": [
        {
            "doc": "",
            "kind": "vfunc",
            "name": "changed",
            "parameters": [],
            "retval": {
                "type": "void"
            }
        },
        {
            "doc": "",
            "kind": "vfunc",
            "name": "format_entry_text",
            "parameters": [
                {
                    "allow_none": false,
                    "argname": "path",
                    "direction": "in",
                    "type": "String"
                }
            ],
            "retval": {
                "type": "String"
            }
        }
    ]
}